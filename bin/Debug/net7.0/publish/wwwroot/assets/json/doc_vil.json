{
  "openapi": "3.0.1",
  "info": {
    "title": "SMS API Documentation",
    "description": "Send and receive SMS, business solutions on SMS, Bulk, transactional, promotional SMS in a single solution. Getting started is easy. Even in trial, you can experience SMS communication easily putting yourself in your customers shoe",
    "contact": {
      "name": "Prudent support",
      "email": "support@prutech.in"
    },
    "version": "1.0.0",
    "x-homepage": {
      "markdown": "Customer engagement<br/>Complete API solutions that will help you drive better outcomes for your customers and business, throughout the customer journey with rich set of APIs for managing People, Flow, Conversations and more.<br/>### Channels<br/>If you require a straight forward connectivity for your existing solutions this is what you are looking for. Implement one-way or two-way communication over any major mobile messaging channel like SMS, Voice, RCS, WhatsApp, Viber and more."
    }
  },
  "tags": [
    {
      "name": "Authentication API",
      "description": "All API requests need to be authenticated through the Authorization header. The ACP  API offers the following authentication methods:HTTP Basic authentication,JWT Authentication.Select your preferred method to suit your current tech stack and security requirement level.Many of these methods are vulnerable to man - in -the - middle attacks,so it is recommended to combine them with other security mechanisms such as an encrypted connection or SSL."
    },
    {
      "name": "Authentication for RCS",
      "description": "All API requests need to be authenticated through the Authorization header. The ACP  API offers the following authentication methods:HTTP Basic authentication,JWT Authentication.Select your preferred method to suit your current tech stack and security requirement level.Many of these methods are vulnerable to man - in -the - middle attacks,so it is recommended to combine them with other security mechanisms such as an encrypted connection or SSL."
    },
    {
      "name": "Authentication for Voice",
      "description": "All API requests need to be authenticated through the Authorization header. The ACP  API offers the following authentication methods:HTTP Basic authentication,JWT Authentication.Select your preferred method to suit your current tech stack and security requirement level.Many of these methods are vulnerable to man - in -the - middle attacks,so it is recommended to combine them with other security mechanisms such as an encrypted connection or SSL."
    },
    {
      "name": "Send Whatsapp Message",
      "description": "Send and receive simple messages, pre-set buttons, or rich media message by using our extensive WhatApp API. Getting started is easy. Even in trial, you can experience WhatApp two-way communication easily putting yourself in your customers shoes."

    },
    {
      "name": "Customer APIs",
      "description": "Send and receive simple messages, pre-set buttons, or rich media message by using our extensive WhatApp API. Getting started is easy. Even in trial, you can experience WhatApp two-way communication easily putting yourself in your customers shoes."

    },
    {
      "name": "Receive Whatsapp Message",
      "description": "Send and receive simple messages, pre-set buttons, or rich media message by using our extensive WhatApp API. Getting started is easy. Even in trial, you can experience WhatApp two-way communication easily putting yourself in your customers shoes."

    },
    {
      "name": "Send Rcs Message",
      "description": "Send and receive simple messages, pre-set buttons, or rich media message by using our extensive WhatApp API. Getting started is easy. Even in trial, you can experience WhatApp two-way communication easily putting yourself in your customers shoes."
    },
    {
      "name": "Click To Call",
      "description": "Send and receive simple messages, pre-set buttons, or rich media message by using our extensive WhatApp API. Getting started is easy. Even in trial, you can experience WhatApp two-way communication easily putting yourself in your customers shoes."
    },
    {
      "name": "OBD Campaign",
      "description": "Send and receive simple messages, pre-set buttons, or rich media message by using our extensive WhatApp API. Getting started is easy. Even in trial, you can experience WhatApp two-way communication easily putting yourself in your customers shoes."
    },
    {
      "name": "Rooms",
      "description": "Virtual meeting space within the EnableX platform to host RTC sessions."
    },
    {
      "name": "CDR",
      "description": "Call Detail Report (CDR) contains individual usage information by each user."
    },
    {
      "name": "Archive",
      "description": "To get access to files created during RTC Sessions viz. Individual Recording Files, Transcoded Playable Video File, Chat Script File, Session Meta File."
    },
    {
      "name": "CREATE SMS CAMPAIGN",
      "description": "To create SMS campaign."
    },
    {
      "name": "BASE UPLOAD",
      "description": "To create upload base for campaign."
    },
    {
      "name": "v1/Send Template",
      "description": "Send Template for Cpass Application."
    },
    {
      "name": "INSTANT SMS",
      "description": "To create instant SMS."
    }
  ],
  "paths": {
    "https://prutech.org/PMMW/api/authentication/generate-token": {
      "post": {
        "tags": [ "Authentication API" ],
        "summary": "Get Authentication Token",
        "description": "Customer will  call this Api service for generating token,which will expire in a limited as of now, it is one day.",

        "operationId": "PLATFORM & CONNECTIVITY/Authentication/Get Token for whatsapp",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.Credentials"
              },
              "examples": {
                "Body template message": {
                  "value": {
                    "username": "username",
                    "password": "password"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.dataError"
                },
                "examples": {
                  "Success Response": {
                    "value": {
                      "tokenId": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InBydWRlbnQiLCJwYXNzd29yZCI6Ijk3M2M0NzU5YjY3NmUwNTZmNjZhMGQwZTUwOTg3OGFiY2ExN2ZjNzJiMTRjOGQ3NTM3NmQyMGRiNDViMTAxYTYiLCJpYXQiOjE2NDUxNzU5OTUsImV4cCI6MTY0NTI2MjM5NX0.Gkr79I9tVSTHZOpktCpFblO7SYLiEAi_cC2cBPUsyBk",
                      "expireIn": "86400"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "UnAuthorized",
            "content": {
              "application/json": {
                "examples": {
                  "Failure Response": {
                    "value": {
                      "message": "UnAuthorized!"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "examples": {
                  "Failure Response": {
                    "value": {
                      "message": "Error!"
                    }
                  }
                }
              }
            }

          }
        }

      }
    },
    "/Basic": {
      "post": {
        "tags": [ "Authentication API" ],
        "summary": "Basic Authentication whatsapp",
        "description": "Basic authorization type can be used in situations when the API key is not available. For example, API methods for generating API keys should be authenticated with the Basic type.\n\nIn this case, the credentials included in the Authorization header should be a Base64 encoded username and password combination. More formally, basic authentication header can be constructed in three steps:\n\n* Username and password are concatenated using the colon `(:)` as a separator `username:password`.\n* The resulting string is encoded using the [RFC2045-MIME](https://www.ietf.org/rfc/rfc2045.txt) variant of Base64.\n* Encoded string is added as credentials after the `\"Basic \"` type.\n\nExample:\n\n```shell\nUsername: \"Aladdin\"\nPassword: \"openSesame\"\n\nConcatenated string: \"Aladdin:openSesame\"\n\nBase64 encoded string: \"QWxhZGRpbjpvcGVuU2VzYW1l\"\n\nAuthorization header: \"Basic QWxhZGRpbjpvcGVuU2VzYW1l\"\n```\n\n> **Implementation detail**: Base64 encoding is a standard and many available programming languages and frameworks provide convenient methods for encoding strings.",

        "operationId": "PLATFORM & CONNECTIVITY/Authentication/Basic Authentication whatsapp"
      }

    },
    "https://prutech.org/PMMW/api/whatsapp/send-audio": {
      "post": {
        "tags": [ "Send Whatsapp Message" ],
        "summary": "Send Audio Message",
        "description": "Send an audio to a single recipient. Audio messages can only be successfully delivered if the recipient has contacted the business within the last 24 hours, otherwise template message should be used. <br/> The API response will not contain the final delivery status",

        "operationId": "channels/whatsapp/send-audio",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token for validating user..<br/>Token can be Authorization Bearer or Authorization Basic",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.AudioMessage"
              },
              "examples": {
                "Audio message": {
                  "value": {
                    "From": "441134960000",
                    "To": "441134960001",
                    "MessageId": "a28dd97c-1ffb-4fcf-99f1-0b557ed381da",
                    "Content": {
                      "MediaUrl": "http://example.com/audio"
                    },
                    "CallBackData": "Callback data"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Message accepted for delivery.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.SingleMessageInfo"
                },
                "examples": {
                  "Success Response": {
                    "value": {
                      "status": 1,
                      "message": "success"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "status": 0,
                      "message": "Message Id should be unique"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "UnAuthorized",
            "content": {
              "application/json": {
                "examples": {
                  "Failure Response": {
                    "value": {
                      "message": "UnAuthorized!"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "examples": {
                  "Failure Response": {
                    "value": {
                      "message": "Error!"
                    }
                  }
                }
              }
            }

          }
        }
      }
    },
    "https://prutech.org/PMMW/api/whatsapp/send-buttons": {
      "post": {
        "tags": [ "Send Whatsapp Message" ],
        "summary": "Send Button Message",
        "description": "Send an interactive buttons message to a single recipient. Interactive buttons messages can only be successfully delivered if the recipient has contacted the business within the last 24 hours, otherwise template message should be used. <br/> The API response will not contain the final delivery status, use Delivery Reports",

        "operationId": "channels/whatsapp/send-buttons",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token for validating user..<br/>Token can be Authorization Bearer or Authorization Basic",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.InteractiveButtonsMessage"
              },
              "examples": {
                "Interactive reply buttons message": {
                  "value": {
                    "From": "441134960000",
                    "To": "441134960001",
                    "MessageId": "a28dd97c-1ffb-4fcf-99f1-0b557ed381da",
                    "Content": {
                      "Body": {
                        "Text": "Some text"
                      },
                      "Action": {
                        "Buttons": [
                          {
                            "Type": "reply",
                            "Reply": {
                              "Id": "1",
                              "Title": "Title1"
                            }
                          },
                          {
                            "Type": "reply",
                            "Reply": {
                              "Id": "2",
                              "Title": "Title2"
                            }
                          },
                          {
                            "Type": "reply",
                            "Reply": {
                              "Id": "3",
                              "Title": "Title3"
                            }
                          }
                        ]
                      },
                      "Footer": {
                        "Text": "Footer"
                      }
                    },
                    "CallBackData": "Callback data"
                  }
                },
                "Text header interactive buttons": {
                  "value": {
                    "From": "441134960000",
                    "To": "441134960001",
                    "MessageId": "a28dd97c-1ffb-4fcf-99f1-0b557ed381da",
                    "Content": {
                      "Body": {
                        "Text": "Some text"
                      },
                      "Action": {
                        "Buttons": [
                          {
                            "Type": "reply",
                            "Reply": {
                              "Id": "1",
                              "Title": "Title1"
                            }
                          },
                          {
                            "Type": "reply",
                            "Reply": {
                              "Id": "2",
                              "Title": "Title2"
                            }
                          },
                          {
                            "Type": "reply",
                            "Reply": {
                              "Id": "3",
                              "Title": "Title3"
                            }
                          }
                        ]
                      },
                      "Header": {
                        "Type": "text",
                        "Text": "Header"
                      },
                      "Footer": {
                        "Text": "Footer"
                      }
                    },
                    "CallBackData": "Callback data"
                  }
                },
                "Video header interactive buttons": {
                  "value": {
                    "From": "441134960000",
                    "To": "441134960001",
                    "MessageId": "a28dd97c-1ffb-4fcf-99f1-0b557ed381da",
                    "Content": {
                      "Body": {
                        "Text": "Some text"
                      },
                      "Action": {
                        "Buttons": [
                          {
                            "Type": "reply",
                            "Reply": {
                              "Id": "1",
                              "Title": "Title1"
                            }
                          },
                          {
                            "Type": "reply",
                            "Reply": {
                              "Id": "2",
                              "Title": "Title2"
                            }
                          },
                          {
                            "Type": "reply",
                            "Reply": {
                              "Id": "3",
                              "Title": "Title3"
                            }
                          }
                        ]
                      },
                      "Header": {
                        "Type": "video",
                        "Video": {
                          "MediaUrl": "https://example.com/video"
                        }

                      },
                      "Footer": {
                        "Text": "Footer"
                      }
                    },
                    "CallBackData": "Callback data"
                  }
                },
                "Image header interactive buttons": {
                  "value": {
                    "From": "441134960000",
                    "To": "441134960001",
                    "MessageId": "a28dd97c-1ffb-4fcf-99f1-0b557ed381da",
                    "Content": {
                      "Body": {
                        "Text": "Some text"
                      },
                      "Action": {
                        "Buttons": [
                          {
                            "Type": "reply",
                            "Reply": {
                              "Id": "1",
                              "Title": "Title1"
                            }
                          },
                          {
                            "Type": "reply",
                            "Reply": {
                              "Id": "2",
                              "Title": "Title2"
                            }
                          },
                          {
                            "Type": "reply",
                            "Reply": {
                              "Id": "3",
                              "Title": "Title3"
                            }
                          }
                        ]
                      },
                      "Header": {
                        "Type": "image",
                        "Image": {
                          "MediaUrl": "https://example.com/image"
                        }

                      },
                      "Footer": {
                        "Text": "Footer"
                      }
                    },
                    "CallBackData": "Callback data"
                  }
                },
                "Document header interactive buttons": {
                  "value": {
                    "From": "441134960000",
                    "To": "441134960001",
                    "MessageId": "a28dd97c-1ffb-4fcf-99f1-0b557ed381da",
                    "Content": {
                      "Body": {
                        "Text": "Some text"
                      },
                      "Action": {
                        "Buttons": [
                          {
                            "Type": "reply",
                            "Reply": {
                              "Id": "1",
                              "Title": "Title1"
                            }
                          },
                          {
                            "Type": "reply",
                            "Reply": {
                              "Id": "2",
                              "Title": "Title2"
                            }
                          },
                          {
                            "Type": "reply",
                            "Reply": {
                              "Id": "3",
                              "Title": "Title3"
                            }
                          }
                        ]
                      },
                      "header": {
                        "Type": "document",
                        "Document": {
                          "MediaUrl": "https://example.com/document",
                          "FileName": "document.pdf"
                        }

                      },
                      "footer": {
                        "Text": "Footer"
                      }
                    },
                    "CallBackData": "Callback data"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Message accepted for delivery.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.SingleMessageInfo"
                },
                "examples": {
                  "Success Response": {
                    "value": {
                      "status": 1,
                      "message": "success"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "status": 0,
                      "message": "Message Id should be unique"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "UnAuthorized",
            "content": {
              "application/json": {
                "examples": {
                  "Failure Response": {
                    "value": {
                      "message": "UnAuthorized!"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "examples": {
                  "Failure Response": {
                    "value": {
                      "message": "Error!"
                    }
                  }
                }
              }
            }

          }
        }
      }
    },
    "https://prutech.org/PMMW/api/whatsapp/send-contact": {
      "post": {
        "tags": [ "Send Whatsapp Message" ],
        "summary": "Send Contact Message",
        "description": "Send a contact to a single recipient. Contact messages can only be successfully delivered if the recipient has contacted the business within the last 24 hours, otherwise template message should be used. <br/> The API response will not contain the final delivery status",

        "operationId": "channels/whatsapp/send-contact",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token for validating user..<br/>Token can be Authorization Bearer or Authorization Basic",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.ContactsMessage"
              },
              "examples": {
                "Contact message": {
                  "value": {
                    "From": "487865454345",
                    "To": "487865454345",
                    "MessageId": "cdfsdfgsdgdfhdf-fghhfg0-gdg",
                    "Content": {
                      "Contacts": [
                        {
                          "Addresses": [
                            {
                              "City": "City",
                              "Country": "Country",
                              "Country_code": "Country_code",
                              "State": " State",
                              "Street": "Street",
                              "Type": "Type",
                              "Zip": "Zip"
                            }
                          ],
                          "Birthday": "dob",
                          "Emails": [
                            {
                              "Email": "email",
                              "Type": "HOME"
                            }
                          ],
                          "Name": {
                            "First_name": "firstname",
                            "Formatted_name": "formattedname",
                            "Middle_name": "middlename",
                            "Prefix": "Prefix",
                            "Suffix": "Suffix",
                            "Last_name": "Last_name"
                          },
                          "Org": {
                            "Company": "Company",
                            "Department": "Department",
                            "Title": "Titler"
                          },
                          "Phones": [
                            {
                              "Phone": "457635467876",
                              "Type": "HOME",
                              "Wa_id": "556456432323"
                            }
                          ],
                          "Urls": [
                            {
                              "Url": "https://www.google.com",
                              "Type": "WORK"
                            }
                          ]
                        }
                      ]
                    },
                    "CallBackData": ""
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Message accepted for delivery.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.SingleMessageInfo"
                },
                "examples": {
                  "Success Response": {
                    "value": {
                      "status": 1,
                      "message": "success"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "status": 0,
                      "message": "Message Id should be unique"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "UnAuthorized",
            "content": {
              "application/json": {
                "examples": {
                  "Failure Response": {
                    "value": {
                      "message": "UnAuthorized!"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "examples": {
                  "Failure Response": {
                    "value": {
                      "message": "Error!"
                    }
                  }
                }
              }
            }

          }
        }
      }
    },
    "https://prutech.org/PMMW/api/whatsapp/send-document": {
      "post": {
        "tags": [ "Send Whatsapp Message" ],
        "summary": "Send Document Message",
        "description": "Send a document to a single recipient. Document messages can only be successfully delivered if the recipient has contacted the business within the last 24 hours, otherwise template message should be used. <br/> The API response will not contain the final delivery status.",

        "operationId": "channels/whatsapp/send-document",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token for validating user..<br/>Token can be Authorization Bearer or Authorization Basic",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.DocumentMessage"
              },
              "examples": {
                "Document message": {
                  "value": {
                    "From": "441134960000",
                    "To": "441134960001",
                    "MessageId": "a28dd97c-1ffb-4fcf-99f1-0b557ed381da",
                    "Content": {
                      "MediaUrl": "http://example.com/document"
                    },
                    "CallBackData": "Callback data"
                  }
                },
                "Document message with all fields": {
                  "value": {
                    "From": "441134960000",
                    "To": "441134960001",
                    "MessageId": "a28dd97c-1ffb-4fcf-99f1-0b557ed381da",
                    "Content": {
                      "MediaUrl": "http://example.com/document",
                      "Caption": "Some document caption",
                      "FileName": "filename.pdf"
                    },
                    "CallBackData": "Callback data"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Message accepted for delivery.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.SingleMessageInfo"
                },
                "examples": {
                  "Success Response": {
                    "value": {
                      "status": 1,
                      "message": "success"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "status": 0,
                      "message": "Message Id should be unique"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "UnAuthorized",
            "content": {
              "application/json": {
                "examples": {
                  "Failure Response": {
                    "value": {
                      "message": "UnAuthorized!"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "examples": {
                  "Failure Response": {
                    "value": {
                      "message": "Error!"
                    }
                  }
                }
              }
            }

          }
        }
      }
    },
    "https://prutech.org/PMMW/api/whatsapp/send-image": {
      "post": {
        "tags": [ "Send Whatsapp Message" ],
        "summary": "Send Image Message",
        "description": "Send an image to a single recipient. Image messages can only be successfully delivered if the recipient has contacted the business within the last 24 hours, otherwise template message should be used.The API response will not contain the final delivery status ",
        "operationId": "channels/whatsapp/send-image",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token for validating user..<br/>Token can be Authorization Bearer or Authorization Basic",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.ImageMessage"
              },
              "examples": {
                "Image message": {
                  "value": {
                    "From": "441134960000",
                    "To": "441134960001",
                    "MessageId": "a28dd97c-1ffb-4fcf-99f1-0b557ed381da",
                    "Content": {
                      "MediaUrl": "http://example.com/image"
                    },
                    "CallBackData": "Callback data"
                  }
                },
                "Image message with caption": {
                  "value": {
                    "From": "441134960000",
                    "To": "441134960001",
                    "MessageId": "a28dd97c-1ffb-4fcf-99f1-0b557ed381da",
                    "Content": {
                      "MediaUrl": "http://example.com/image",
                      "Caption": "Some image caption"
                    },
                    "CallBackData": "Callback data"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Message accepted for delivery.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.SingleMessageInfo"
                },
                "examples": {
                  "Success Response": {
                    "value": {
                      "status": 1,
                      "message": "success"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "status": 0,
                      "message": "Message Id should be unique"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "UnAuthorized",
            "content": {
              "application/json": {
                "examples": {
                  "Failure Response": {
                    "value": {
                      "message": "UnAuthorized!"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "examples": {
                  "Failure Response": {
                    "value": {
                      "message": "Error!"
                    }
                  }
                }
              }
            }

          }
        }
      }
    },
    "https://prutech.org/PMMW/api/whatsapp/send-list": {
      "post": {
        "tags": [ "Send Whatsapp Message" ],
        "summary": "Send List Message",
        "description": "Send an interactive list message to a single recipient. Interactive list messages can only be successfully delivered if the recipient has contacted the business within the last 24 hours, otherwise template message should be used. <br/> The API response will not contain the final delivery status, use Delivery Reports",

        "operationId": "channels/whatsapp/send-list",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token for validating user..<br/>Token can be Authorization Bearer or Authorization Basic",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.InteractiveListMessage"
              },
              "examples": {
                "Interactive list message": {
                  "value": {
                    "From": "441134960000",
                    "To": "441134960001",
                    "MessageId": "a28dd97c-1ffb-4fcf-99f1-0b557ed381da",
                    "Content": {
                      "Body": {
                        "Text": "Some text"
                      },
                      "Action": {
                        "Button": "SUBMIT",
                        "Sections": [
                          {
                            "Title": "Choose one",
                            "Rows": [
                              {
                                "Id": "1",
                                "Title": "first row title",
                                "Description": "first row description"
                              },
                              {
                                "Id": "2",
                                "Title": "second row title",
                                "Description": "second row description"
                              }
                            ]
                          },
                          {
                            "Title": "Second section title",
                            "Rows": [
                              {
                                "Id": "3",
                                "Title": "third row title"
                              }
                            ]
                          }
                        ]
                      },
                      "Header": {
                        "Type": "text",
                        "Text": "Header"
                      },
                      "Footer": {
                        "Text": "Footer"
                      }
                    },
                    "CallBackData": "Callback data"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Message accepted for delivery.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.SingleMessageInfo"
                },
                "examples": {
                  "Success Response": {
                    "value": {
                      "status": 1,
                      "message": "success"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "status": 0,
                      "message": "Message Id should be unique"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "UnAuthorized",
            "content": {
              "application/json": {
                "examples": {
                  "Failure Response": {
                    "value": {
                      "message": "UnAuthorized!"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "examples": {
                  "Failure Response": {
                    "value": {
                      "message": "Error!"
                    }
                  }
                }
              }
            }

          }
        }
      }
    },
    "https://prutech.org/PMMW/api/whatsapp/send-location": {
      "post": {
        "tags": [ "Send Whatsapp Message" ],
        "summary": "Send Location Message",
        "description": "Send a location to a single recipient. Location messages can only be successfully delivered if the recipient has contacted the business within the last 24 hours, otherwise template message should be used. <br/> The API response will not contain the final delivery status, use Delivery Reports",

        "operationId": "channels/whatsapp/send-location",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token for validating user..<br/>Token can be Authorization Bearer or Authorization Basic",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.LocationMessage"
              },
              "examples": {
                "Location message": {
                  "value": {
                    "From": "441134960000",
                    "To": "441134960001",
                    "MessageId": "a28dd97c-1ffb-4fcf-99f1-0b557ed381da",
                    "Content": {
                      "Latitude": 9.994799,
                      "Longitude": 76.292222,
                      "Name": "",
                      "Address": ""

                    },
                    "CallBackData": ""
                  }
                }

              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Message accepted for delivery.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.SingleMessageInfo"
                },
                "examples": {
                  "Success Response": {
                    "value": {
                      "status": 1,
                      "message": "success"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "status": 0,
                      "message": "Message Id should be unique"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "UnAuthorized",
            "content": {
              "application/json": {
                "examples": {
                  "Failure Response": {
                    "value": {
                      "message": "UnAuthorized!"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "examples": {
                  "Failure Response": {
                    "value": {
                      "message": "Error!"
                    }
                  }
                }
              }
            }

          }
        }
      }
    },
    "https://prutech.org/PMMW/api/whatsapp/send-sticker": {
      "post": {
        "tags": [ "Send Whatsapp Message" ],
        "summary": "Send Sticker Message",
        "description": "Send a sticker to a single recipient. Sticker messages can only be successfully delivered if the recipient has contacted the business within the last 24 hours, otherwise template messages should be used. <br/> The API response will not contain the final delivery status, use Delivery Reports",

        "operationId": "channels/whatsapp/send-sticker",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token for validating user..<br/>Token can be Authorization Bearer or Authorization Basic",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.StickerMessage"
              },
              "examples": {
                "Sticker message": {
                  "value": {
                    "From": "441134960000",
                    "To": "441134960001",
                    "MessageId": "a28dd97c-1ffb-4fcf-99f1-0b557ed381da",
                    "Content": {
                      "MediaUrl": "http://example.com/sticker"
                    },
                    "CallBackData": "Callback data"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Message accepted for delivery.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.SingleMessageInfo"
                },
                "examples": {
                  "Success Response": {
                    "value": {
                      "status": 1,
                      "message": "success"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "status": 0,
                      "message": "Message Id should be unique"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "UnAuthorized",
            "content": {
              "application/json": {
                "examples": {
                  "Failure Response": {
                    "value": {
                      "message": "UnAuthorized!"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "examples": {
                  "Failure Response": {
                    "value": {
                      "message": "Error!"
                    }
                  }
                }
              }
            }

          }
        }
      }
    },
    "https://prutech.org/PMMW/api/whatsapp/send-template": {
      "post": {
        "tags": [ "Send Whatsapp Message" ],
        "summary": "Send Template Message",
        "description": "Send a single or multiple template messages to one or more recipients. Template messages can be sent and delivered at anytime. Each template sent needs to be registered and pre-approved by WhatsApp. <br/> The API response will not contain the final delivery status.",

        "operationId": "channels/whatsapp/send-template",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token for validating user..<br/>Token can be Authorization Bearer or Authorization Basic",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.BulkMessage"
              },
              "examples": {
                "Body template message": {
                  "value": {
                    "Messages": [
                      {
                        "From": "441134960000",
                        "To": "441134960001",
                        "MessageId": "a28dd97c-1ffb-4fcf-99f1-0b557ed381da",
                        "Content": {
                          "TemplateName": "template_name",
                          "TemplateData": {
                            "Body": {
                              "PlaceHolders": [
                                {
                                  "Type": "text",
                                  "Text": "some text"
                                },
                                {
                                  "Type": "text",
                                  "Text": "some text"
                                }
                              ]
                            }
                          },
                          "Language": "en_GB"
                        },
                        "CallBackData": "Callback data"

                      },
                      {
                        "From": "441134960000",
                        "To": "441134960001",
                        "MessageId": "a28dd97c-1ffb-4fcf-99f1-0b557ed38098",
                        "Content": {
                          "TemplateName": "template_name",
                          "TemplateData": {
                            "Body": {
                              "PlaceHolders": [
                                {
                                  "Type": "text",
                                  "Text": "some text"
                                },
                                {
                                  "Type": "text",
                                  "Text": "some text"
                                }
                              ]
                            }
                          },
                          "Language": "en_GB"
                        },
                        "CallBackData": "Callback data"

                      }
                    ],
                    "BulkId": "bulk_19981"
                  }
                },
                "Text header template message": {
                  "value": {
                    "Messages": [
                      {
                        "From": "441134960000",
                        "To": "441134960001",
                        "MessageId": "a28dd97c-1ffb-4fcf-99f1-0b557ed381da",
                        "Content": {
                          "TemplateName": "template_name",
                          "TemplateData": {
                            "Body": {
                              "PlaceHolders": [
                                {
                                  "Type": "text",
                                  "Text": "some text"
                                },
                                {
                                  "Type": "text",
                                  "Text": "some text"
                                }
                              ]
                            },
                            "Header": {
                              "Type": "text",
                              "PlaceHolder": [
                                {
                                  "Type": "text",
                                  "Text": "some text"
                                },
                                {
                                  "Type": "text",
                                  "Text": "some text"
                                }
                              ]
                            }
                          },
                          "Language": "en_GB"
                        },
                        "CallBackData": "Callback data"
                      }
                    ],
                    "BulkId": "bulk_19981"
                  }
                },
                "Document header template message": {
                  "value": {
                    "Messages": [
                      {
                        "From": "441134960000",
                        "To": "441134960001",
                        "MessageId": "a28dd97c-1ffb-4fcf-99f1-0b557ed381da",
                        "Content": {
                          "TemplateName": "template_name",
                          "TemplateData": {
                            "Body": {
                              "PlaceHolders": [
                                {
                                  "Type": "text",
                                  "Text": "some text"
                                },
                                {
                                  "Type": "text",
                                  "Text": "some text"
                                }
                              ]
                            },
                            "Header": {
                              "Type": "document",
                              "MediaUrl": "http://example.com/document",
                              "FileName": "document.pdf"
                            }
                          },
                          "Language": "en_GB"
                        },
                        "CallBackData": "Callback data"
                      }
                    ],
                    "BulkId": "bulk_19981"
                  }
                },
                "Image header template message": {
                  "value": {
                    "Messages": [
                      {
                        "From": "441134960000",
                        "To": "441134960001",
                        "MessageId": "a28dd97c-1ffb-4fcf-99f1-0b557ed381da",
                        "Content": {
                          "TemplateName": "template_name",
                          "TemplateData": {
                            "Body": {
                              "PlaceHolders": [
                                {
                                  "Type": "text",
                                  "Text": "some text"
                                },
                                {
                                  "Type": "text",
                                  "Text": "some text"
                                }
                              ]
                            },
                            "Header": {
                              "Type": "image",

                              "MediaUrl": "http://example.com/image"

                            }
                          },
                          "Language": "en_GB"
                        },
                        "CallBackData": "Callback data"
                      }
                    ],
                    "BulkId": "bulk_19981"
                  }
                },
                "Video header template message": {
                  "value": {
                    "Messages": [
                      {
                        "From": "441134960000",
                        "To": "441134960001",
                        "MessageId": "a28dd97c-1ffb-4fcf-99f1-0b557ed381da",
                        "Content": {
                          "TemplateName": "template_name",
                          "TemplateData": {
                            "Body": {
                              "PlaceHolders": []
                            },
                            "Header": {
                              "Type": "video",

                              "MediaUrl": "http://example.com/video"

                            }
                          },
                          "Language": "en_GB"
                        },
                        "CallBackData": "Callback data"
                      }
                    ],
                    "BulkId": "bulk_19981"
                  }
                },

                "Quick reply button template message": {
                  "value": {
                    "Messages": [
                      {
                        "From": "441134960000",
                        "To": "441134960001",
                        "MessageId": "a28dd97c-1ffb-4fcf-99f1-0b557ed381da",
                        "Content": {
                          "TemplateName": "template_name",
                          "TemplateData": {
                            "Body": {
                              "PlaceHolders": []
                            },
                            "Buttons": [
                              {
                                "Type": "QUICK_REPLY",
                                "Parameter": "Yes"
                              },
                              {
                                "Type": "QUICK_REPLY",
                                "Parameter": "Yes"
                              },
                              {
                                "Type": "QUICK_REPLY",
                                "Parameter": "No"
                              }
                            ]
                          },
                          "Language": "en_GB"
                        },
                        "CallBackData": "Callback data"
                      }
                    ],
                    "BulkId": "bulk_19981"
                  }
                },
                "Url button template message": {
                  "value": {
                    "Messages": [
                      {
                        "From": "441134960000",
                        "To": "441134960001",
                        "MessageId": "a28dd97c-1ffb-4fcf-99f1-0b557ed381da",
                        "Content": {
                          "TemplateName": "template_name",
                          "TemplateData": {
                            "Body": {
                              "PlaceHolders": []
                            },
                            "Buttons": [
                              {
                                "Type": "URL",
                                "Parameter": "No"
                              }
                            ]
                          },
                          "Language": "en_GB"
                        },
                        "CallBackData": "Callback data"
                      }
                    ],
                    "BulkId": "bulk_19981"
                  }
                },

                "Template message with SMS failover": {
                  "value": {
                    "Messages": [
                      {
                        "From": "441134960000",
                        "To": "441134960001",
                        "MessageId": "a28dd97c-1ffb-4fcf-99f1-0b557ed381da",
                        "Content": {
                          "TemplateName": "template_name",
                          "TemplateData": {
                            "Body": {
                              "Placeholders": [
                                {
                                  "Type": "text",
                                  "Text": "some text"
                                },
                                {
                                  "Type": "text",
                                  "Text": "some text"
                                }
                              ]
                            }
                          },
                          "Language": "en_GB"
                        },
                        "CallBackData": "Callback data",

                        "SmsFailover": {
                          "From": "InfoSMS",
                          "Text": "SMS message to be sent if WhatsApp template message could not be delivered."
                        }
                      }
                    ],
                    "BulkId": "bulk_19981"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Template created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.BulkMessageInfo"
                },
                "examples": {
                  "Success Response": {
                    "value": {
                      "status": 1,
                      "message": "Request Accepted"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "status": 0,
                      "message": "Bulk Id should be unique"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "UnAuthorized",
            "content": {
              "application/json": {
                "examples": {
                  "Failure Response": {
                    "value": {
                      "message": "UnAuthorized!"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "examples": {
                  "Failure Response": {
                    "value": {
                      "message": "Error!"
                    }
                  }
                }
              }
            }

          }
        }
      }
    },
    "https://prutech.org/PMMW/api/whatsapp/send-text": {
      "post": {
        "tags": [ "Send Whatsapp Message" ],
        "summary": "Send Text Message",
        "description": "Send a text message to a single recipient. Text messages can only be successfully delivered if the recipient has contacted the business within the last 24 hours, otherwise template message should be used. <br/> The API response will not contain the final delivery status.",

        "operationId": "channels/whatsapp/send-text",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token for validating user..<br/>Token can be Authorization Bearer or Authorization Basic",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.TextMessage"
              },
              "examples": {
                "Text message": {
                  "value": {
                    "From": "441134960000",
                    "To": "441134960001",
                    "MessageId": "a28dd97c-1ffb-4fcf-99f1-0b557ed381da",
                    "Content": {
                      "Text": "Some text with url: http://example.com",
                      "PreviewUrl": false
                    },
                    "CallBackData": "Callback data"
                  }
                },
                "Text message with previewable url": {
                  "value": {
                    "From": "441134960000",
                    "To": "441134960001",
                    "MessageId": "a28dd97c-1ffb-4fcf-99f1-0b557ed381da",
                    "Content": {
                      "Text": "Some text with url: http://example.com",
                      "PreviewUrl": true
                    },
                    "CallBackData": "Callback data"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Message accepted for delivery.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.SingleMessageInfo"
                },
                "examples": {
                  "Success Response": {
                    "value": {
                      "status": 1,
                      "message": "success"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "status": 0,
                      "message": "Message Id should be unique"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "UnAuthorized",
            "content": {
              "application/json": {
                "examples": {
                  "Failure Response": {
                    "value": {
                      "message": "UnAuthorized!"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "examples": {
                  "Failure Response": {
                    "value": {
                      "message": "Error!"
                    }
                  }
                }
              }
            }

          }
        }
      }
    },
    "https://prutech.org/PMMW/api/whatsapp/send-video": {
      "post": {
        "tags": [ "Send Whatsapp Message" ],
        "summary": "Send Video Message",
        "description": "Send a video to a single recipient. Video messages can only be successfully delivered if the recipient has contacted the business within the last 24 hours, otherwise template message should be used. <br/> The API response will not contain the final delivery status, use Delivery Reports",

        "operationId": "channels/whatsapp/send-video",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token for validating user..<br/>Token can be Authorization Bearer or Authorization Basic",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.VideoMessage"
              },
              "examples": {
                "Video message": {
                  "value": {
                    "From": "441134960000",
                    "To": "441134960001",
                    "MessageId": "a28dd97c-1ffb-4fcf-99f1-0b557ed381da",
                    "Content": {
                      "MediaUrl": "http://example.com/video"
                    },
                    "CallBackData": "Callback data"
                  }
                },
                "Video message with caption": {
                  "value": {
                    "From": "441134960000",
                    "To": "441134960001",
                    "MessageId": "a28dd97c-1ffb-4fcf-99f1-0b557ed381da",
                    "Content": {
                      "MediaUrl": "http://example.com/video",
                      "Caption": "Some video caption"
                    },
                    "CallBackData": "Callback data"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Message accepted for delivery.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.SingleMessageInfo"
                },
                "examples": {
                  "Success Response": {
                    "value": {
                      "status": 1,
                      "message": "success"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "status": 0,
                      "message": "Message Id should be unique"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "UnAuthorized",
            "content": {
              "application/json": {
                "examples": {
                  "Failure Response": {
                    "value": {
                      "message": "UnAuthorized!"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "examples": {
                  "Failure Response": {
                    "value": {
                      "message": "Error!"
                    }
                  }
                }
              }
            }

          }
        }
      }
    },
    "https://prutech.org/PMMW/api/whatsapp/create-template": {
      "post": {
        "tags": [ "Send Whatsapp Message" ],
        "summary": "Create Template",
        "description": "Create WhatsApp template. Created template will be submitted for WhatsApps review and approval. Once approved, template can be sent to end-users. Refer to template guidelines.",

        "operationId": "channels/whatsapp/create-templates",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token for validating user..<br/>Token can be Authorization Bearer or Authorization Basic",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/prudentwhatsapptemplatemanagement.openapi.com.prudent.whatsapp.template.management.api.TemplatePublicApiRequest"
              },
              "examples": {
                "Template message": {
                  "value": {
                    "name": "name of template for approval",
                    "category": "ALERT_UPDATE",
                    "components": [
                      {
                        "type": "BODY",
                        "text": "text content {{1}} {{2}} {{3}} {{4}}",
                        "example": {
                          "body_text": [
                            [
                              "1000",
                              "text",
                              "05FEB22",
                              "www.jio.com/r/HWiJoXfkA"
                            ]
                          ]
                        }
                      },
                      {
                        "type": "HEADER",
                        "format": "TEXT",
                        "text": "some text",
                        "example": {
                          "header_text": [
                            "some text"

                          ]
                        }
                      },
                      {
                        "type": "FOOTER",
                        "text": "text"
                      },
                      {
                        "type": "BUTTONS",
                        "buttons": [
                          {
                            "type": "QUICK_REPLY",
                            "text": "button text1"

                          },
                          {
                            "type": "QUICK_REPLY",
                            "text": "button text2"

                          },
                          {
                            "type": "QUICK_REPLY",
                            "text": "button text3"

                          }
                        ]
                      }
                    ],
                    "language": "en"
                  }
                },
                "url/phone number button message": {
                  "value": {
                    "name": "name of template for approval",
                    "category": "ALERT_UPDATE",
                    "components": [
                      {
                        "type": "BODY",
                        "text": "text content",
                        "example": {
                          "body_text": [
                            [
                              "1000",
                              "text",
                              "05FEB22",
                              "www.jio.com/r/HWiJoXfkA"
                            ]
                          ]
                        }
                      },
                      {
                        "type": "HEADER",
                        "format": "TEXT",
                        "text": "some text",
                        "example": {
                          "header_text": [
                            "some text"

                          ]
                        }
                      },
                      {
                        "type": "FOOTER",
                        "text": "text"
                      },
                      {
                        "type": "BUTTONS",
                        "buttons": [
                          {
                            "type": "URL",
                            "text": "button url",
                            "url": "https://www.website.com/{{1}}",
                            "example": [
                              "https://www.website.com/dynamic-url-example"
                            ]

                          },
                          {
                            "type": "PHONE_NUMBER",
                            "text": "button phone number",
                            "phone_number": "+1(650) 555-1111"

                          }

                        ]
                      }
                    ],
                    "language": "en"
                  }
                },
                "image/video/document header message": {
                  "value": {
                    "name": "name of template for approval",
                    "category": "ALERT_UPDATE",
                    "components": [
                      {
                        "type": "BODY",
                        "text": "text content",
                        "example": {
                          "body_text": [
                            [
                              "1000",
                              "text",
                              "05FEB22",
                              "www.jio.com/r/HWiJoXfkA"
                            ]
                          ]
                        }
                      },
                      {
                        "type": "HEADER",
                        "format": "IMAGE/VIDEO/DOCUMENT",
                        "example": {
                          "header_handle": [
                            "https://url-to-media-file/media.file"
                          ]
                        }
                      },
                      {
                        "type": "FOOTER",
                        "text": "text"
                      },
                      {
                        "type": "BUTTONS",
                        "buttons": [
                          {
                            "type": "QUICK_REPLY",
                            "text": "button text1"

                          },
                          {
                            "type": "QUICK_REPLY",
                            "text": "button text2"

                          },
                          {
                            "type": "QUICK_REPLY",
                            "text": "button text3"

                          }
                        ]
                      }
                    ],
                    "language": "en"
                  }
                }
              }
            }
          },
          "required": true
        },

        "responses": {
          "200": {
            "description": "Template created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.CreateTemplateResponse"
                },
                "examples": {
                  "Success Response": {
                    "value": {
                      "status": true,
                      "message": "submitted"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "status": 0,
                      "message": "Template with that name already exists"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "UnAuthorized",
            "content": {
              "application/json": {
                "examples": {
                  "Failure Response": {
                    "value": {
                      "message": "UnAuthorized!"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "examples": {
                  "Failure Response": {
                    "value": {
                      "message": "Error!"
                    }
                  }
                }
              }
            }

          }
        }
      }
    },
    "https://prutech.org/PMMW/api/whatsapp/pull-whatsapp-report": {
      "post": {
        "tags": [ "Customer APIs" ],
        "summary": "Pull Report",
        "description": "Using pull report API customer can directly fetch WhatsApp seen/delivery reports either using message id or using date range.",

        "operationId": "channels/whatsapp/pull-whatsapp-report",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token for validating user..<br/>Token can be Authorization Bearer or Authorization Basic",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/infobippushko.openapi.ott.PullReport"
              },
              "examples": {
                "Pull with message id": {
                  "value": {

                    "messageId": "ABEGOFkWA5EBAgo6B82cNiWIAMKC"

                  }
                },
                "Pull with date": {
                  "value": {

                    "fromTime": "01-01-2022 00:00:01",
                    "toTime": "12-01-2022 23:59:59"

                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Template created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.PullReportResponse"
                },
                "examples": {
                  "Success Response": {
                    "value": {
                      "seenTime": "01-01-2022 00: 00: 02",
                      "sentTime": "01-01-2022 00: 00: 01",
                      "messageId": "1659eba4-bae9-11ec-b064-0050568c4cc9",
                      "deliveredTime": "01-01-2022 00: 00: 01"

                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "status": 0,
                      "message": "No Data Avalible"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "UnAuthorized",
            "content": {
              "application/json": {
                "examples": {
                  "Failure Response": {
                    "value": {
                      "message": "UnAuthorized!"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "examples": {
                  "Failure Response": {
                    "value": {
                      "message": "Error!"
                    }
                  }
                }
              }
            }

          }

        }
      }
    },
    "https://{Your domain}/api/whatsapp/seen-report": {
      "post": {
        "tags": [ "Customer APIs" ],
        "summary": "Receive Seen Reports",
        "description": "Seen reports are always forwarded to the URL the client previously provided",

        "operationId": "channels/whatsapp/seen-report",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/infobippushko.openapi.ott.SeenReport"
              },
              "examples": {
                "Video message": {
                  "value": {
                    "Results": [
                      {
                        "MessageId": "1215f543ab19-345f-adbd-12ad31451ed25f35",
                        "From": "385919998888",
                        "To": "41793026731",
                        "SentAt": "2018-12-12T11:21:57.793+0000",
                        "SeenAt": "2018-12-12T11:21:58.251+0000"
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Your server returns this code if it accepts the callback"
          }

        }
      }
    },
    "https://{Your domain}/api/whatsapp/delivery-report": {
      "post": {
        "tags": [ "Customer APIs" ],
        "summary": "Receive Delivery Reports",
        "description": "Delivery reports are always forwarded to the URL the client previously provided",

        "operationId": "channels/whatsapp/delivery-report",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/infobippushko.openapi.whatsapp.DeliveryResult"
              },
              "examples": {
                "Delivery reports": {
                  "value": {
                    "Results": [
                      {
                        "BulkId": "",
                        "Price": {
                          "PricePerMessage": 0.21,
                          "Currency": "BRL"
                        },
                        "Status": {
                          "Id": 5,
                          "GroupId": 3,
                          "GroupName": "DELIVERED",
                          "Name": "DELIVERED_TO_HANDSET",
                          "Description": "Message delivered to handset"
                        },
                        "Error": {
                          "Id": 0,
                          "Name": "NO_ERROR",
                          "Description": "No Error",
                          "GroupId": 0,
                          "GroupName": "OK",
                          "Permanent": false
                        },
                        "MessageId": "fb469d73-d362-463f-b30f-1e959b53badc",
                        "DoneAt": "2019-04-09T16:01:56.494-0300",
                        "MessageCount": 1,
                        "SentAt": "2019-04-09T16:00:58.647-0300",
                        "To": "41793026731"
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Your server returns this code if it accepts the callback"
          }
        }
      }
    },
    "https://{Your domain}/api/whatsapp/failed-report": {
      "post": {
        "tags": [ "Customer APIs" ],
        "summary": "Receive Failed Reports",
        "description": "Failed reports are always forwarded to the URL the client previously provided",

        "operationId": "channels/whatsapp/failed-report",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/infobippushko.openapi.whatsapp.DeliveryResult"
              },
              "examples": {
                "Delivery reports": {
                  "value": {
                    "Results": [
                      {
                        "BulkId": "",
                        "Price": {
                          "PricePerMessage": 0.21,
                          "Currency": "BRL"
                        },
                        "Status": {
                          "Id": 5,
                          "GroupId": 3,
                          "GroupName": "FAILED",
                          "Name": "FAILED_TO_HANDSET",
                          "Description": "Message failed to handset"
                        },
                        "Error": {
                          "Id": 0,
                          "Name": "NO_ERROR",
                          "Description": "No Error",
                          "GroupId": 0,
                          "GroupName": "OK",
                          "Permanent": false
                        },
                        "MessageId": "fb469d73-d362-463f-b30f-1e959b53badc",
                        "DoneAt": "2019-04-09T16:01:56.494-0300",
                        "MessageCount": 1,
                        "SentAt": "2019-04-09T16:00:58.647-0300",
                        "To": "41793026731"
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Your server returns this code if it accepts the callback"
          }
        }
      }
    },
    "https://{Your domain}/api/whatsapp/receive-messages": {
      "post": {
        "tags": [ "Customer APIs" ],
        "summary": "Receive inbound message",
        "description": "Inbound messages will be forwarded in real time to the end-point client provided during the setup. This way, 2-way communication will be established, and the enterprise is enabled to create a certain logic for processing incoming messages.",
        "operationId": "channels/whatsapp/receive-messages",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/infobippushko.openapi.whatsapp.InboundMessageResult"
              },
              "examples": {
                "Received WhatsApp TEXT message": {
                  "value": {
                    "Results": [
                      {
                        "From": "385919998888",
                        "To": "41793026731",
                        "IntegrationType": "WHATSAPP",
                        "ReceivedAt": "2019-07-19T11:23:26.998+0000",
                        "MessageId": "ABEGOFl3VCQoAhBalbc6rTQT6mgS29EmGZ7a",
                        "Message": {
                          "Type": "TEXT",
                          "Text": "Support hello"
                        },
                        "Contact": {
                          "Name": "Frank"
                        },
                        "Price": 1
                      }
                    ],
                    "MessageCount": 1,
                    "PendingMessageCount": 0
                  }
                },
                "Received WhatsApp IMAGE message": {
                  "value": {
                    "results": [
                      {
                        "From": "385919998888",
                        "To": "41793026731",
                        "IntegrationType": "WHATSAPP",
                        "ReceivedAt": "2018-09-10T11:27:17.980+0000",
                        "MessageId": "ABEGOFkWA5EBAgo6B82cNiWIAMKC",
                        "Message": {
                          "Type": "IMAGE",
                          "Caption": "Image Caption",
                          "Url": "https://{base_url}/whatsapp/1/senders/447796344125/media/f1b96d31-9ab9-4513-808b-50ab37360fbe"
                        },
                        "Price": 1
                      }
                    ],
                    "MessageCount": 1,
                    "PendingMessageCount": 0
                  }
                },
                "Received WhatsApp STICKER message": {
                  "value": {
                    "results": [
                      {
                        "From": "385919998888",
                        "To": "41793026731",
                        "IntegrationType": "WHATSAPP",
                        "ReceivedAt": "2018-09-10T11:27:17.980+0000",
                        "MessageId": "ABEGOFkWA5EBAgo6B82cNiWIAMKC",
                        "Message": {
                          "Type": "STICKER",
                          "Url": "https://{base_url}/whatsapp/1/senders/447796344125/media/f1b96d31-9ab9-4513-808b-50ab37360fbe"
                        },
                        "price": 1
                      }
                    ],
                    "MessageCount": 1,
                    "PendingMessageCount": 0
                  }
                },
                "Received WhatsApp AUDIO message": {
                  "value": {
                    "results": [
                      {
                        "From": "385919998888",
                        "To": "41793026731",
                        "integrationType": "WHATSAPP",
                        "ReceivedAt": "2020-02-06T14:18:29.797+0000",
                        "MessageId": "ABEGVUGWh3gEAgo-sLTvmQCS5kwjhsy",
                        "Message": {
                          "Type": "AUDIO",
                          "Url": "https://{base_url/whatsapp/1/senders/551140038883/media/cb5608eb-aa38-454f-a045-899df74324e2"
                        },
                        "price": 1
                      }
                    ],
                    "MessageCount": 1,
                    "PendingMessageCount": 0
                  }
                },
                "Received WhatsApp VIDEO message": {
                  "value": {
                    "results": [
                      {
                        "From": "385918889999",
                        "To": "41793026731",
                        "IntegrationType": "WHATSAPP",
                        "ReceivedAt": "2019-09-24T12:21:06.486+0000",
                        "MessageId": "ABEGOFmJJRkFAhDvgHvPWYmCNKXZSQaqgH2A",
                        "Message": {
                          "Caption": "Look at this!",
                          "Type": "VIDEO",
                          "Url": "https://{base_url}/whatsapp/1/senders/447860098731/media/42f076b9-1d1e-4d56-8c1e-02d0a402a1e3"
                        },
                        "price": 1
                      }
                    ],
                    "MessageCount": 1,
                    "PendingMessageCount": 0
                  }
                },
                "Received WhatsApp DOCUMENT message": {
                  "value": {
                    "results": [
                      {
                        "From": "385919998888",
                        "To": "41793026731",
                        "IntegrationType": "WHATSAPP",
                        "ReceivedAt": "2018-09-10T12:10:18.379+0000",
                        "MessageId": "ABEGOFkWA5EBAgo6B82cNiWIAMKC",
                        "Message": {
                          "Type": "DOCUMENT",
                          "Caption": "Document caption",
                          "Url": "https://{base_url}/whatsapp/1/senders/447796344125/media/c256e11d-a7e9-4dbb-aa9c-2a6028ddf7e8"
                        },
                        "price": 1
                      }
                    ],
                    "MessageCount": 1,
                    "PendingMessageCount": 0
                  }
                },
                "Received WhatsApp LOCATION message": {
                  "value": {
                    "results": [
                      {
                        "From": "385919998888",
                        "To": "41793026731",
                        "IntegrationType": "WHATSAPP",
                        "ReceivedAt": "2018-09-10T12:13:53.864+0000",
                        "MessageId": "ABEGOFkWA5EBAgo6B82cNiWIAMKC",
                        "Message": {
                          "Type": "LOCATION",
                          "Longitude": -73.985655555556,
                          "Latitude": 40.748433333333,
                          "Name": "Empire State Building",
                          "Url": "https://www.facebook.com/113272675352744",
                          "Address": "350 5th Ave, New York, NY"
                        },
                        "Price": 1
                      }
                    ],
                    "MessageCount": 1,
                    "PendingMessageCount": 1
                  }
                },
                "Received WhatsApp CONTACT message": {
                  "value": {
                    "results": [
                      {
                        "From": "385919998888",
                        "To": "41793026731",
                        "IntegrationType": "WHATSAPP",
                        "ReceivedAt": "2019-09-24T10:07:04.070+0000",
                        "MessageId": "ABEGOFmJJRkFAhA7ud6mcWKmglIlIO6xibx9",
                        "Message": {
                          "Type": "CONTACT",
                          "Contacts": [
                            {
                              "Name": {
                                "FirstName": "Frank",
                                "LastName": "Bipper",
                                "FormattedName": "Frank Bipper"
                              },
                              "Org": {
                                "Company": "Infobip"
                              },
                              "Phones": [
                                {
                                  "Phone": "+385 91 888 9999",
                                  "Type": "Mobile",
                                  "WaId": "385918889999"
                                }
                              ]
                            }
                          ]
                        },
                        "price": 1
                      }
                    ],
                    "MessageCount": 1,
                    "PendingMessageCount": 0
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Your server returns this code if it accepts the callback"
          }
        }
      }
    },
    "https://prutech.org/PMMW/api/whatsapp/get-templateList": {
      "get": {
        "tags": [ "Customer APIs" ],
        "summary": "Get Template List",
        "description": "Represents a collection of templates with its status",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token for validating user..<br/>Token can be Authorization Bearer or Authorization Basic",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "channels/whatsapp/get-templateList",

        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.templateList"
                },
                "examples": {
                  "Success Response": {
                    "value": {
                      "total": "351",
                      "waba_templates": [
                        {
                          "name": "testtestuyyy1603vdeoimg",
                          "status": "approved",
                          "language": "en",
                          "rejected_reason": "NONE"
                        },
                        {
                          "name": "vil_testkk",
                          "status": "rejected",
                          "language": "en",
                          "rejected_reason": "INVALID_FORMAT"
                        },
                        {
                          "name": "newlevel0",
                          "status": "rejected",
                          "language": "en",
                          "rejected_reason": "INVALID_FORMAT"
                        },
                        {
                          "name": "test111018",
                          "status": "approved",
                          "language": "en",
                          "rejected_reason": "NONE"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "status": 0,
                      "message": "Invalid token"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "https://prutech.org/PMMW/api/whatsapp/download-media?id={mediaId}": {
      "get": {
        "tags": [ "Receive Whatsapp Message" ],
        "summary": "Download media",
        "description": "Download WhatsApp media sent by end-users.",
        "operationId": "channels/whatsapp/download-whatsapp-inbound-media",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token for validating user..<br/>Token can be Authorization Bearer or Authorization Basic",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mediaId",
            "in": "path",
            "description": "ID of the media.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            },
            "example": "123e4567-e89b-12d3-a456-426655440000"
          }
        ],
        "responses": {
          "200": {
            "description": "Media successfully downloaded",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "description": "Media binary stream response",
                  "format": "binary"
                }
              }
            }
          },
          "500": {
            "description": "Error"
          }
        }
      }
    },
    "https://prutech.org/PMMW/api/authentication/generate-token.": {
      "post": {
        "tags": [ "Authentication for RCS" ],
        "summary": "Get Token for RCS",
        "description": "Customer will  call this Api service for generating token,which will expire in a limited as of now,it is one day.",

        "operationId": "PLATFORM & CONNECTIVITY/Authentication/Get Token for RCS",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.Credentials"
              },
              "examples": {
                "Body template message": {
                  "value": {
                    "username": "username",
                    "password": "password"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.dataError"
                },
                "examples": {
                  "Success Response": {
                    "value": {
                      "tokenId": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InBydWRlbnQiLCJwYXNzd29yZCI6Ijk3M2M0NzU5YjY3NmUwNTZmNjZhMGQwZTUwOTg3OGFiY2ExN2ZjNzJiMTRjOGQ3NTM3NmQyMGRiNDViMTAxYTYiLCJpYXQiOjE2NDUxNzU5OTUsImV4cCI6MTY0NTI2MjM5NX0.Gkr79I9tVSTHZOpktCpFblO7SYLiEAi_cC2cBPUsyBk",
                      "expireIn": "86400"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "UnAuthorized",
            "content": {
              "application/json": {
                "examples": {
                  "Failure Response": {
                    "value": {
                      "message": "UnAuthorized!"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "examples": {
                  "Failure Response": {
                    "value": {
                      "message": "Error!"
                    }
                  }
                }
              }
            }

          }
        }

      }

    },
    "/Basic.": {
      "post": {
        "tags": [ "Authentication for RCS" ],
        "summary": "Basic Authentication RCS",
        "description": "Basic authorization type can be used in situations when the API key is not available. For example, API methods for generating API keys should be authenticated with the Basic type.\n\nIn this case, the credentials included in the Authorization header should be a Base64 encoded username and password combination. More formally, basic authentication header can be constructed in three steps:\n\n* Username and password are concatenated using the colon `(:)` as a separator `username:password`.\n* The resulting string is encoded using the [RFC2045-MIME](https://www.ietf.org/rfc/rfc2045.txt) variant of Base64.\n* Encoded string is added as credentials after the `\"Basic \"` type.\n\nExample:\n\n```shell\nUsername: \"Aladdin\"\nPassword: \"openSesame\"\n\nConcatenated string: \"Aladdin:openSesame\"\n\nBase64 encoded string: \"QWxhZGRpbjpvcGVuU2VzYW1l\"\n\nAuthorization header: \"Basic QWxhZGRpbjpvcGVuU2VzYW1l\"\n```\n\n> **Implementation detail**: Base64 encoding is a standard and many available programming languages and frameworks provide convenient methods for encoding strings.",

        "operationId": "PLATFORM & CONNECTIVITY/Authentication/Basic Authentication RCS"
      }
    },
    "https://prutech.org/PMMW/api/rcs/send-message": {
      "post": {
        "tags": [ "Send Rcs Message" ],
        "summary": "Send RCS message",
        "description": "Used for sending single RCS messages",
        "operationId": "channels/rcs/send-rcs-message",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/infobiprcsapi.openapi.com.infobip.rcs.api.single.RcsSendRequest"
              },
              "examples": {
                "Text": {
                  "value": {
                    "from": "myRcsSender",
                    "to": "385977666618",

                    "content": {
                      "text": "exampleText",
                      "suggestions": [
                        {
                          "text": "exampleText",
                          "postbackData": "examplePostbackData",
                          "type": "REPLY"
                        },
                        {
                          "text": "exampleText",
                          "postbackData": "examplePostbackData",
                          "url": "www.example.test",
                          "type": "OPEN_URL"
                        },
                        {
                          "text": "exampleText",
                          "postbackData": "examplePostbackData",
                          "phoneNumber": "385977666618",
                          "type": "DIAL_PHONE"
                        },
                        {
                          "text": "exampleText",
                          "postbackData": "examplePostbackData",
                          "latitude": 45.793418,
                          "longitude": 15.946297,
                          "label": "label",
                          "type": "SHOW_LOCATION"
                        },
                        {
                          "text": "exampleText",
                          "postbackData": "examplePostbackData",
                          "type": "REQUEST_LOCATION"
                        }
                      ],
                      "type": "TEXT"
                    },
                    "notifyUrl": "https://www.example.com/rcs",
                    "callbackData": "Callback data",
                    "messageId": "externalMessageId"
                  }
                },
                "File": {
                  "value": {
                    "from": "myRcsSender",
                    "to": "385977666618",

                    "content": {
                      "file": {
                        "url": "www.example.url"
                      },
                      "thumbnail": {
                        "url": "www.thumbnail.example.url"
                      },
                      "type": "FILE"
                    },
                    "notifyUrl": "https://www.example.com/rcs",
                    "callbackData": "Callback data",
                    "messageId": "externalMessageId"
                  }
                },
                "Card": {
                  "value": {
                    "from": "myRcsSender",

                    "validityPeriodTimeUnit": "MINUTES",
                    "content": {
                      "orientation": "HORIZONTAL",
                      "alignment": "LEFT",
                      "content": {
                        "title": "title,",
                        "description": "description",
                        "media": {
                          "file": {
                            "url": "url"
                          },
                          "thumbnail": {
                            "url": "url"
                          },
                          "height": "MEDIUM"
                        }
                      },
                      "suggestions": [
                        {
                          "text": "exampleText",
                          "postbackData": "examplePostbackData",
                          "type": "REPLY"
                        },
                        {
                          "text": "exampleText",
                          "postbackData": "examplePostbackData",
                          "url": "www.example.test",
                          "type": "OPEN_URL"
                        },
                        {
                          "text": "exampleText",
                          "postbackData": "examplePostbackData",
                          "phoneNumber": "385977666618",
                          "type": "DIAL_PHONE"
                        },
                        {
                          "text": "exampleText",
                          "postbackData": "examplePostbackData",
                          "latitude": 45.793418,
                          "longitude": 15.946297,
                          "label": "label",
                          "type": "SHOW_LOCATION"
                        },
                        {
                          "text": "exampleText",
                          "postbackData": "examplePostbackData",
                          "type": "REQUEST_LOCATION"
                        }
                      ],
                      "type": "CARD"
                    },
                    "notifyUrl": "https://www.example.com/rcs",
                    "callbackData": "Callback data",
                    "messageId": "externalMessageId"
                  }
                },
                "Carousel": {
                  "value": {
                    "from": "myRcsSender",
                    "to": "385977666618",

                    "content": {
                      "cardWidth": "MEDIUM",
                      "contents": [
                        {
                          "title": "title,",
                          "description": "description",
                          "media": {
                            "file": {
                              "url": "url"
                            },
                            "thumbnail": {
                              "url": "url"
                            },
                            "height": "MEDIUM"
                          }
                        }
                      ],
                      "suggestions": [
                        {
                          "text": "exampleText",
                          "postbackData": "examplePostbackData",
                          "type": "REPLY"
                        },
                        {
                          "text": "exampleText",
                          "postbackData": "examplePostbackData",
                          "url": "www.example.test",
                          "type": "OPEN_URL"
                        },
                        {
                          "text": "exampleText",
                          "postbackData": "examplePostbackData",
                          "phoneNumber": "385977666618",
                          "type": "DIAL_PHONE"
                        },
                        {
                          "text": "exampleText",
                          "postbackData": "examplePostbackData",
                          "latitude": 45.793418,
                          "longitude": 15.946297,
                          "label": "label",
                          "type": "SHOW_LOCATION"
                        },
                        {
                          "text": "exampleText",
                          "postbackData": "examplePostbackData",
                          "type": "REQUEST_LOCATION"
                        }
                      ],
                      "type": "CAROUSEL"
                    },
                    "notifyUrl": "https://www.example.com/rcs",
                    "callbackData": "Callback data",
                    "messageId": "externalMessageId"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/infobiprcsapi.openapi.RcsApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/infobiprcsapi.openapi.ApiException"
                }
              }
            }
          }
        }
      }
    },
    "https://prutech.org/PMMW/api/rcs/send-bulkmessage": {
      "post": {
        "tags": [ "Send Rcs Message" ],
        "summary": "Send bulk RCS message",
        "description": "Used for sending bulk RCS messages",
        "operationId": "channels/rcs/send-rcs-bulk-message",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/infobiprcsapi.openapi.com.infobip.rcs.api.bulk.RcsBulkSendRequest"
              },
              "examples": {
                "Text": {
                  "value": {
                    "messages": [
                      {
                        "from": "myRcsSender",
                        "to": "385977666618",

                        "content": {
                          "text": "exampleText",
                          "suggestions": [
                            {
                              "text": "exampleText",
                              "postbackData": "examplePostbackData",
                              "type": "REPLY"
                            },
                            {
                              "text": "exampleText",
                              "postbackData": "examplePostbackData",
                              "url": "www.example.test",
                              "type": "OPEN_URL"
                            },
                            {
                              "text": "exampleText",
                              "postbackData": "examplePostbackData",
                              "phoneNumber": "385977666618",
                              "type": "DIAL_PHONE"
                            },
                            {
                              "text": "exampleText",
                              "postbackData": "examplePostbackData",
                              "latitude": 45.793418,
                              "longitude": 15.946297,
                              "label": "label",
                              "type": "SHOW_LOCATION"
                            },
                            {
                              "text": "exampleText",
                              "postbackData": "examplePostbackData",
                              "type": "REQUEST_LOCATION"
                            }
                          ],
                          "type": "TEXT"
                        },
                        "notifyUrl": "https://www.example.com/rcs/",
                        "callbackData": "Callback data",
                        "messageId": "externalMessageId"
                      },
                      {
                        "from": "myRcsSender",
                        "to": "385977666618",
                        "validityPeriod": 15,
                        "validityPeriodTimeUnit": "MINUTES",
                        "content": {
                          "text": "exampleText",
                          "suggestions": [
                            {
                              "text": "exampleText",
                              "postbackData": "examplePostbackData",
                              "type": "REPLY"
                            },
                            {
                              "text": "exampleText",
                              "postbackData": "examplePostbackData",
                              "url": "www.example.test",
                              "type": "OPEN_URL"
                            },
                            {
                              "text": "exampleText",
                              "postbackData": "examplePostbackData",
                              "phoneNumber": "385977666618",
                              "type": "DIAL_PHONE"
                            },
                            {
                              "text": "exampleText",
                              "postbackData": "examplePostbackData",
                              "latitude": 45.793418,
                              "longitude": 15.946297,
                              "label": "label",
                              "type": "SHOW_LOCATION"
                            },
                            {
                              "text": "exampleText",
                              "postbackData": "examplePostbackData",
                              "type": "REQUEST_LOCATION"
                            }
                          ],
                          "type": "TEXT"
                        },
                        "notifyUrl": "https://www.example.com/rcs",
                        "callbackData": "Callback data",
                        "messageId": "externalMessageId"
                      }
                    ]
                  }
                },
                "File": {
                  "value": {
                    "messages": [
                      {
                        "from": "myRcsSender",
                        "to": "385977666618",

                        "content": {
                          "file": {
                            "url": "www.example.url"
                          },
                          "thumbnail": {
                            "url": "www.thumbnail.example.url"
                          },
                          "type": "FILE"
                        },
                        "callbackData": "Callback data",
                        "messageId": "externalMessageId"
                      },
                      {
                        "from": "myRcsSender",
                        "to": "385977666618",
                        "validityPeriod": 15,
                        "validityPeriodTimeUnit": "MINUTES",
                        "content": {
                          "file": {
                            "url": "www.example.url"
                          },
                          "thumbnail": {
                            "url": "www.thumbnail.example.url"
                          },
                          "type": "FILE"
                        },
                        "notifyUrl": "https://www.example.com/rcs",
                        "callbackData": "Callback data",
                        "messageId": "externalMessageId"
                      }
                    ]
                  }
                },
                "Card": {
                  "value": {
                    "messages": [
                      {
                        "from": "myRcsSender",
                        "to": "385977666618",

                        "content": {
                          "orientation": "HORIZONTAL",
                          "alignment": "LEFT",
                          "content": {
                            "title": "title,",
                            "description": "description",
                            "media": {
                              "file": {
                                "url": "url"
                              },
                              "thumbnail": {
                                "url": "url"
                              },
                              "height": "MEDIUM"
                            }
                          },
                          "suggestions": [
                            {
                              "text": "exampleText",
                              "postbackData": "examplePostbackData",
                              "type": "REPLY"
                            },
                            {
                              "text": "exampleText",
                              "postbackData": "examplePostbackData",
                              "url": "www.example.test",
                              "type": "OPEN_URL"
                            },
                            {
                              "text": "exampleText",
                              "postbackData": "examplePostbackData",
                              "phoneNumber": "385977666618",
                              "type": "DIAL_PHONE"
                            },
                            {
                              "text": "exampleText",
                              "postbackData": "examplePostbackData",
                              "latitude": 45.793418,
                              "longitude": 15.946297,
                              "label": "label",
                              "type": "SHOW_LOCATION"
                            },
                            {
                              "text": "exampleText",
                              "postbackData": "examplePostbackData",
                              "type": "REQUEST_LOCATION"
                            }
                          ],
                          "type": "CARD"
                        },
                        "notifyUrl": "https://www.example.com/rcs",
                        "callbackData": "Callback data",
                        "messageId": "externalMessageId"
                      },
                      {
                        "from": "myRcsSender",
                        "to": "385977666618",
                        "validityPeriod": 15,
                        "validityPeriodTimeUnit": "MINUTES",
                        "content": {
                          "orientation": "HORIZONTAL",
                          "alignment": "LEFT",
                          "content": {
                            "title": "title,",
                            "description": "description",
                            "media": {
                              "file": {
                                "url": "url"
                              },
                              "thumbnail": {
                                "url": "url"
                              },
                              "height": "MEDIUM"
                            }
                          },
                          "suggestions": [
                            {
                              "text": "exampleText",
                              "postbackData": "examplePostbackData",
                              "type": "REPLY"
                            },
                            {
                              "text": "exampleText",
                              "postbackData": "examplePostbackData",
                              "url": "www.example.test",
                              "type": "OPEN_URL"
                            },
                            {
                              "text": "exampleText",
                              "postbackData": "examplePostbackData",
                              "phoneNumber": "385977666618",
                              "type": "DIAL_PHONE"
                            },
                            {
                              "text": "exampleText",
                              "postbackData": "examplePostbackData",
                              "latitude": 45.793418,
                              "longitude": 15.946297,
                              "label": "label",
                              "type": "SHOW_LOCATION"
                            },
                            {
                              "text": "exampleText",
                              "postbackData": "examplePostbackData",
                              "type": "REQUEST_LOCATION"
                            }
                          ],
                          "type": "CARD"
                        },
                        "notifyUrl": "https://www.example.com/rcs",
                        "callbackData": "Callback data",
                        "messageId": "externalMessageId"
                      }
                    ]
                  }
                },
                "Carousel": {
                  "value": {
                    "messages": [
                      {
                        "from": "myRcsSender",
                        "to": "385977666618",

                        "content": {
                          "cardWidth": "MEDIUM",
                          "contents": [
                            {
                              "title": "title,",
                              "description": "description",
                              "media": {
                                "file": {
                                  "url": "url"
                                },
                                "thumbnail": {
                                  "url": "url"
                                },
                                "height": "MEDIUM"
                              }
                            }
                          ],
                          "suggestions": [
                            {
                              "text": "exampleText",
                              "postbackData": "examplePostbackData",
                              "type": "REPLY"
                            },
                            {
                              "text": "exampleText",
                              "postbackData": "examplePostbackData",
                              "url": "www.example.test",
                              "type": "OPEN_URL"
                            },
                            {
                              "text": "exampleText",
                              "postbackData": "examplePostbackData",
                              "phoneNumber": "385977666618",
                              "type": "DIAL_PHONE"
                            },
                            {
                              "text": "exampleText",
                              "postbackData": "examplePostbackData",
                              "latitude": 45.793418,
                              "longitude": 15.946297,
                              "label": "label",
                              "type": "SHOW_LOCATION"
                            },
                            {
                              "text": "exampleText",
                              "postbackData": "examplePostbackData",
                              "type": "REQUEST_LOCATION"
                            }
                          ],
                          "type": "CAROUSEL"
                        },
                        "notifyUrl": "https://www.example.com/rcs",
                        "callbackData": "Callback data",
                        "messageId": "externalMessageId"
                      },
                      {
                        "from": "myRcsSender",
                        "to": "385977666618",
                        "validityPeriod": 15,
                        "validityPeriodTimeUnit": "MINUTES",
                        "content": {
                          "cardWidth": "MEDIUM",
                          "contents": [
                            {
                              "title": "title,",
                              "description": "description",
                              "media": {
                                "file": {
                                  "url": "url"
                                },
                                "thumbnail": {
                                  "url": "url"
                                },
                                "height": "MEDIUM"
                              }
                            }
                          ],
                          "suggestions": [
                            {
                              "text": "exampleText",
                              "postbackData": "examplePostbackData",
                              "type": "REPLY"
                            },
                            {
                              "text": "exampleText",
                              "postbackData": "examplePostbackData",
                              "url": "www.example.test",
                              "type": "OPEN_URL"
                            },
                            {
                              "text": "exampleText",
                              "postbackData": "examplePostbackData",
                              "phoneNumber": "385977666618",
                              "type": "DIAL_PHONE"
                            },
                            {
                              "text": "exampleText",
                              "postbackData": "examplePostbackData",
                              "latitude": 45.793418,
                              "longitude": 15.946297,
                              "label": "label",
                              "type": "SHOW_LOCATION"
                            },
                            {
                              "text": "exampleText",
                              "postbackData": "examplePostbackData",
                              "type": "REQUEST_LOCATION"
                            }
                          ],
                          "type": "CAROUSEL"
                        },
                        "notifyUrl": "https://www.example.com/rcs/",
                        "callbackData": "Callback data",
                        "messageId": "externalMessageId"
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/infobiprcsapi.openapi.RcsApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/infobiprcsapi.openapi.ApiException"
                }
              }
            }
          }
        }

      }
    },
    "https://prutech.org/PMMW/api/rcs/pull-Rcs-report": {
      "post": {
        "tags": [ "Customer APIs RCS" ],
        "summary": "Pull Report",
        "description": "Using pull report API customer can directly fetch WhatsApp seen/delivery reports either using message id or using date range.",

        "operationId": "channels/RCS/pull-Rcs-report",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token for validating user..<br/>Token can be Authorization Bearer or Authorization Basic",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/infobippushko.openapi.ott.PullReport"
              },
              "examples": {
                "Pull with message id": {
                  "value": {

                    "messageId": "ABEGOFkWA5EBAgo6B82cNiWIAMKC"

                  }
                },
                "Pull with date": {
                  "value": {

                    "fromTime": "01-01-2022 00:00:01",
                    "toTime": "12-01-2022 23:59:59"

                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Template created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.PullReportResponse"
                },
                "examples": {
                  "Success Response": {
                    "value": {
                      "seenTime": "01-01-2022 00: 00: 02",
                      "sentTime": "01-01-2022 00: 00: 01",
                      "messageId": "1659eba4-bae9-11ec-b064-0050568c4cc9",
                      "deliveredTime": "01-01-2022 00: 00: 01"

                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "status": 0,
                      "message": "No Data Avalible"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "UnAuthorized",
            "content": {
              "application/json": {
                "examples": {
                  "Failure Response": {
                    "value": {
                      "message": "UnAuthorized!"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "examples": {
                  "Failure Response": {
                    "value": {
                      "message": "Error!"
                    }
                  }
                }
              }
            }

          }

        }
      }
    },
    "https://{Your domain}/api/rcs/seen-report": {
      "post": {
        "tags": [ "Customer APIs RCS" ],
        "summary": "Receive Seen Reports",
        "description": "Seen reports are always forwarded to the URL the client previously provided",

        "operationId": "channels/RCS/seen-report",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/infobippushko.openapi.ott.SeenReport"
              },
              "examples": {
                "Video message": {
                  "value": {
                    "results": [
                      {
                        "MessageId": "1215f543ab19-345f-adbd-12ad31451ed25f35",
                        "From": "385919998888",
                        "To": "41793026731",
                        "SentAt": "2018-12-12T11:21:57.793+0000",
                        "SeenAt": "2018-12-12T11:21:58.251+0000"
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Your server returns this code if it accepts the callback"
          }

        }
      }
    },
    "https://{Your domain}/api/rcs/delivery-report": {
      "post": {
        "tags": [ "Customer APIs RCS" ],
        "summary": "Receive Delivery Reports",
        "description": "Delivery reports are always forwarded to the URL the client previously provided",

        "operationId": "channels/RCS/delivery-report",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/infobippushko.openapi.whatsapp.DeliveryResult"
              },
              "examples": {
                "Delivery reports": {
                  "value": {
                    "results": [
                      {
                        "BulkId": "",
                        "Price": {
                          "PricePerMessage": 0.21,
                          "Currency": "BRL"
                        },
                        "Status": {
                          "Id": 5,
                          "GroupId": 3,
                          "GroupName": "DELIVERED",
                          "Name": "DELIVERED_TO_HANDSET",
                          "Description": "Message delivered to handset"
                        },
                        "Error": {
                          "Id": 0,
                          "Name": "NO_ERROR",
                          "Description": "No Error",
                          "GroupId": 0,
                          "GroupName": "OK",
                          "Permanent": false
                        },
                        "MessageId": "fb469d73-d362-463f-b30f-1e959b53badc",
                        "DoneAt": "2019-04-09T16:01:56.494-0300",
                        "MessageCount": 1,
                        "SentAt": "2019-04-09T16:00:58.647-0300",
                        "To": "41793026731"
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Your server returns this code if it accepts the callback"
          }
        }
      }
    },
    "https://{Your domain}/api/rcs/failed-report": {
      "post": {
        "tags": [ "Customer APIs RCS" ],
        "summary": "Receive Failed Reports",
        "description": "Failed reports are always forwarded to the URL the client previously provided",

        "operationId": "channels/RCS/failed-report",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/infobippushko.openapi.whatsapp.DeliveryResult"
              },
              "examples": {
                "Delivery reports": {
                  "value": {
                    "results": [
                      {
                        "BulkId": "",
                        "Price": {
                          "PricePerMessage": 0.21,
                          "Currency": "BRL"
                        },
                        "Status": {
                          "Id": 5,
                          "GroupId": 3,
                          "GroupName": "FAILED",
                          "Name": "FAILED_TO_HANDSET",
                          "Description": "Message failed to handset"
                        },
                        "Error": {
                          "Id": 0,
                          "Name": "NO_ERROR",
                          "Description": "No Error",
                          "GroupId": 0,
                          "GroupName": "OK",
                          "Permanent": false
                        },
                        "MessageId": "fb469d73-d362-463f-b30f-1e959b53badc",
                        "DoneAt": "2019-04-09T16:01:56.494-0300",
                        "MessageCount": 1,
                        "SentAt": "2019-04-09T16:00:58.647-0300",
                        "To": "41793026731"
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Your server returns this code if it accepts the callback"
          }
        }
      }
    },
    "https://{Your domain}/api/rcs/receive-messages": {
      "post": {
        "tags": [ "Customer APIs RCS" ],
        "summary": "Receive inbound message",
        "description": "Inbound messages will be forwarded in real time to the end-point client provided during the setup. This way, 2-way communication will be established, and the enterprise is enabled to create a certain logic for processing incoming messages.",
        "operationId": "channels/RCS/receive-message",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/infobippushko.openapi.whatsapp.InboundRCSMessageResult"
              },
              "examples": {
                "Received RCS TEXT message": {
                  "value": {
                    "results": [
                      {
                        "from": "385992691430",
                        "to": "infobip",
                        "integrationType": "RCS",
                        "receivedAt": "2019-08-02T11:20:05.863+0000",
                        "messageId": "Ms=F11DR9CQIKqAkV4fGTuNw",
                        "message": {
                          "text": "Hi",
                          "type": "TEXT"
                        },
                        "price": {
                          "pricePerMessage": 0,
                          "currency": "HRK"
                        }
                      }
                    ],
                    "messageCount": 1,
                    "pendingMessageCount": 2139
                  }
                },
                "Received RCS File message": {
                  "value": {
                    "results": [
                      {
                        "from": "385977666618",
                        "to": "infobip",
                        "integrationType": "RCS",
                        "receivedAt": "2019-08-02T11:02:21.857+0000",
                        "messageId": "MsXXWjWPSqRJ2ufXGXeqpkiA",
                        "message": {
                          "url": "https://rcs-user-content-us.storage.googleapis.com/7785f541-3070-43f6-8842-80b02c479e2e/795a531f4ddcf89e8ebd638d5a47ab9ffc07572c873ee2a3ce663a1c3615",
                          "name": "acc=1;doc=encoded=cCEKZcDa1WOdPEhTLxVbFFEpwfmXj4SacCDzbNXslu7KniqM0gatRrc=.jpg",
                          "contentType": "image/jpeg",
                          "size": 581699,
                          "type": "FILE"
                        },
                        "price": {
                          "pricePerMessage": 0,
                          "currency": "HRK"
                        }
                      }
                    ],
                    "messageCount": 1,
                    "pendingMessageCount": 2137
                  }
                },
                "Received RCS SUGGESTION message": {
                  "value": {
                    "results": [
                      {
                        "from": "385992691430",
                        "to": "infobip",
                        "integrationType": "RCS",
                        "receivedAt": "2019-08-02T11:26:59.153+0000",
                        "messageId": "MsxKluA1JkQvOXtedW8cOw6g",
                        "message": {
                          "text": "Reply",
                          "postbackData": "REPLY",
                          "type": "SUGGESTION"
                        },
                        "price": {
                          "pricePerMessage": 0,
                          "currency": "HRK"
                        }
                      }
                    ],
                    "messageCount": 1,
                    "pendingMessageCount": 2139
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Your server returns this code if it accepts the callback"
          }
        }
      }
    },
    "http://cts.myvi.in:8443/Cpaas/api/obdcampaignapi/AuthToken": {
      "post": {
        "tags": [ "Authentication for Voice" ],
        "summary": "Get Token for Click To Call",
        "description": "Customer will  call this Api service for generating token,which will expire in a limited period of time.",

        "operationId": "PLATFORM & CONNECTIVITY/Authentication/Get Token for Click To Call",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.Credentials"
              },
              "examples": {
                "Body template message": {
                  "value": {
                    "username": "username",
                    "password": "password"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.dataError"
                },
                "examples": {
                  "Success Response": {
                    "value": {
                      "tokenId": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InBydWRlbnQiLCJwYXNzd29yZCI6Ijk3M2M0NzU5YjY3NmUwNTZmNjZhMGQwZTUwOTg3OGFiY2ExN2ZjNzJiMTRjOGQ3NTM3NmQyMGRiNDViMTAxYTYiLCJpYXQiOjE2NDUxNzU5OTUsImV4cCI6MTY0NTI2MjM5NX0.Gkr79I9tVSTHZOpktCpFblO7SYLiEAi_cC2cBPUsyBk",
                      "expireIn": "86400"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "UnAuthorized",
            "content": {
              "application/json": {
                "examples": {
                  "Failure Response": {
                    "value": {
                      "message": "UnAuthorized!"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "examples": {
                  "Failure Response": {
                    "value": {
                      "message": "Error!"
                    }
                  }
                }
              }
            }

          }
        }

      }

    },
    "https://prutech.org/api/obdcampaignapi/AuthToken": {
      "post": {
        "tags": [ "Authentication for Voice" ],
        "summary": "Get Token for OBD Campaign",
        "description": "Customer will  call this Api service for generating token,which will expire in a limited period of time.",

        "operationId": "PLATFORM & CONNECTIVITY/Authentication/Get Token for OBD Campaign",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.Credentials"
              },
              "examples": {
                "Body template message": {
                  "value": {
                    "username": "username",
                    "password": "password"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.dataError"
                },
                "examples": {
                  "Success Response": {
                    "value": {
                      "tokenId": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InBydWRlbnQiLCJwYXNzd29yZCI6Ijk3M2M0NzU5YjY3NmUwNTZmNjZhMGQwZTUwOTg3OGFiY2ExN2ZjNzJiMTRjOGQ3NTM3NmQyMGRiNDViMTAxYTYiLCJpYXQiOjE2NDUxNzU5OTUsImV4cCI6MTY0NTI2MjM5NX0.Gkr79I9tVSTHZOpktCpFblO7SYLiEAi_cC2cBPUsyBk",
                      "expireIn": "86400"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "UnAuthorized",
            "content": {
              "application/json": {
                "examples": {
                  "Failure Response": {
                    "value": {
                      "message": "UnAuthorized!"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "examples": {
                  "Failure Response": {
                    "value": {
                      "message": "Error!"
                    }
                  }
                }
              }
            }

          }
        }

      }

    },
    "https://cts.myvi.in:8443/Cpaas/api/clicktocall/initiate-call": {
      "post": {
        "tags": [ "Click To Call" ],
        "summary": "Initiate Call",
        "description": "This method allows you to initiate a call",

        "operationId": "channels/Voice/initiate-call",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token for validating user..<br/>Token can be Authorization Bearer or Authorization Basic",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/prudentVoicestandaloneapiservice.openapi.Call"
              },
              "examples": {
                "Text message": {
                  "value": {
                    "cli": "7777777777",
                    "apartyno": "1234567890",
                    "bpartyno": "9876543210",
                    "reference_id": 123
                  }

                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Message accepted for delivery.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVoicestandaloneapiservice.openapi.SingleMessageInfo"
                },
                "examples": {
                  "Success Response": {
                    "value": {
                      "status": 1,
                      "message": {
                        "RespId": 200,
                        "Response": "success",
                        "ReqId": 101
                      },
                      "requestid": "101"

                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "status": 0,
                      "message": "Message Id should be unique"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "https://prutech.org/clicktocall/api/Json/Post": {
      "post": {
        "tags": [ "Click To Call" ],
        "summary": "Get call detail",
        "description": "This method allows you to get call details",

        "operationId": "channels/Voice/Get call detail",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/prudentVoicestandaloneapiservice.openapi.CallPingBack"
              },
              "examples": {
                "Text message": {
                  "value": {

                    "ct_call_id _ID": "1212",

                    "aparty_number": "99999999989",

                    "bparty_number": "88888888888",

                    "a_call_start_time": "02/01/2019 04:47:42",

                    "a_call_conn_time": "02/01/2019 04:47:50",

                    "a_call_end_time": "02/01/2019 04:49:00",

                    "a_duration": "70",

                    "a_call_status": "Call Connected",

                    "b_call_start_time": "02/01/2019 04:47:51",

                    "b_call_conn_time": "02/01/2019 04:48:00",

                    "b_call_end_time": "02/01/2019 04:49:00",

                    "b_duration": "60",

                    "b_call_status": "Call Connected",

                    "recording_uri": "https://prutech.org/voice/xxxxx/sdbfvfsshdjsdcjsvdc"

                  }

                }
              }
            }
          },
          "required": true
        }
      }
    },
    "https://prutech.org/api/obdcampaignapi/createCampaign": {
      "post": {
        "tags": [ "OBD Campaign" ],
        "summary": "CreateCampaign",
        "description": "This method allows you to initiate a call",

        "operationId": "channels/Voice/createCampaign",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token for validating user..<br/>Token can be Authorization Bearer or Authorization Basic",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/prudentVoicestandaloneapiservice.openapi.Create-Campaign"
              },
              "examples": {
                "Text message": {
                  "value": {

                    "flowid": "9932MkNOXg/2ytIWjjUmQA==",
                    "fromdate": "2021-05-10",
                    "todate": "2021-05-12",
                    "fromtime": "10:10:10",
                    "totime": "20:20:20",
                    "dailtimeout": 5,
                    "name": "ssss",
                    "description": "fffffffff",
                    "retryintervaltype": "0",
                    "retryintervalvalue": "5"
                  }


                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Message accepted for delivery.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVoicestandaloneapiservice.openapi.createCampaignResponse"
                },
                "examples": {
                  "Success Response": {
                    "value": { "campainKey": "wertwrtwgsdhsghfghyrtu" }
                  }
                }
              }
            }
          }

        }
      }
    },
    "https://prutech.org/api/obdcampaignapi/campaignBaseLoad?campaignid={campaignid}": {
      "post": {
        "tags": [ "OBD Campaign" ],
        "summary": "campaignBaseLoad",
        "description": "This method allows you to initiate a call",

        "operationId": "channels/Voice/campaignBaseLoad",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token for validating user..<br/>Token can be Authorization Bearer or Authorization Basic",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "campaignid",
            "in": "path",
            "description": "Encrypted campaignKey out from creat campign API",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            },
            "example": "wertwrtwgsdhsghfghyrtu"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/prudentVoicestandaloneapiservice.openapi.campaignBaseLoad"
              },
              "examples": {
                "Text message": {
                  "value": {
                    "file": "Example file"
                  }


                }
              }
            }
          },
          "required": true
        }
      }
    },
    "https://prutech.org/obdcampaign/api/Json/Post": {
      "post": {
        "tags": [ "OBD Campaign" ],
        "summary": "Get call details",
        "description": "This method allows you to Get call details",

        "operationId": "channels/Voice/Get call details",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/prudentVoicestandaloneapiservice.openapi.Create-CampaignPingback"
              },
              "examples": {
                "Text message": {
                  "value": {

                    "Campaign_Id": "1",

                    "Call_Id": "2",

                    "Msisdn": "9645243529",

                    "Call_Start_Time": "02/01/2019 04:47:42",

                    "Call_End_Time": "02/01/2019 04:47:52",

                    "Dtmf": "5",

                    "Duration": "10",

                    "Call_Circle": "KERALA",

                    "Call_Status": "Call Connected"

                  }


                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Message accepted for delivery.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVoicestandaloneapiservice.openapi.pingBackobdResponse"
                },
                "examples": {
                  "Success Response": {
                    "value": [
                      {

                        "status": "Success"

                      }
                    ]
                  }
                }
              }
            }
          }

        }
      }
    },
    "https://prutech.org/v2/rooms": {
      "get": {
        "tags": [ "Rooms" ],
        "summary": "Get list of video rooms",
        "description": "This method allows you to initiate a call",

        "operationId": "channels/Video/Get list of video rooms",
        "responses": {
          "200": {
            "description": "Message accepted for delivery.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.videoRommResponse"
                },
                "examples": {
                  "Success Response": {
                    "value": {
                      "result": 0,
                      "rooms": [
                        {
                          "name": "Topic or Room Title",
                          "service_id": "XXXXXXXXXXXXXXXX",
                          "owner_ref": "xyz",
                          "settings": {
                            "description": "Descriptive text",
                            "mode": "group",
                            "scheduled": false,
                            "scheduled_time": "2021-08-25 11:11:11",
                            "adhoc": false,
                            "duration": 30,
                            "moderators": "1",
                            "participants": "2",
                            "auto_recording": false,
                            "active_talker": true,
                            "screen_share": true,
                            "canvas": false,
                            "knock": true,
                            "quality": "SD",
                            "billing_code": "XXXXXX",
                            "abwd": true,
                            "facex": false,
                            "max_active_talkers": 2
                          },
                          "data": {
                            "custom_key": ""
                          },
                          "configured_media_zone": "XX",
                          "created": "2020-08-24T14:46:42.108Z",
                          "isMediaServerAvailable": false,
                          "updated": "2020-08-24T14:46:42.108Z",
                          "room_id": "XXXXXXXXXXXXXXX",
                          "sip": {
                            "enabled": false
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "result": 0,
                      "error": "string",
                      "desc": "string"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "result": 0,
                      "error": "string",
                      "desc": "string"
                    }
                  }
                }
              }
            }
          }

        }
      }
    },
    "https://prutech.org/v2/rooms..": {
      "post": {
        "tags": [ "Rooms" ],
        "summary": "Create Video Room",
        "description": "This method allows to create video room",

        "operationId": "channels/Video/Create Video Room",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.room"
              },
              "examples": {
                "Text message": {
                  "value": {
                    "name": "Topic or Room Title",
                    "owner_ref": "xyz",
                    "settings": {
                      "description": "Descriptive text",
                      "mode": "group",
                      "scheduled": false,
                      "adhoc": false,
                      "duration": 30,
                      "moderators": "1",
                      "participants": "2",
                      "auto_recording": false,
                      "quality": "SD"
                    },
                    "sip": {
                      "enabled": false
                    },
                    "data": {
                      "custom_key": ""
                    }
                  }


                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Message accepted for delivery.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.videoRommResponse"
                },
                "examples": {
                  "Success Response": {
                    "value": {
                      "result": 0,
                      "rooms": [
                        {
                          "name": "Topic or Room Title",
                          "service_id": "XXXXXXXXXXXXXXXX",
                          "owner_ref": "xyz",
                          "settings": {
                            "description": "Descriptive text",
                            "mode": "group",
                            "scheduled": false,
                            "scheduled_time": "2021-08-25 11:11:11",
                            "adhoc": false,
                            "duration": 30,
                            "moderators": "1",
                            "participants": "2",
                            "auto_recording": false,
                            "active_talker": true,
                            "screen_share": true,
                            "canvas": false,
                            "knock": true,
                            "quality": "SD",
                            "billing_code": "XXXXXX",
                            "abwd": true,
                            "facex": false,
                            "max_active_talkers": 2
                          },
                          "data": {
                            "custom_key": ""
                          },
                          "configured_media_zone": "XX",
                          "created": "2020-08-24T14:46:42.108Z",
                          "isMediaServerAvailable": false,
                          "updated": "2020-08-24T14:46:42.108Z",
                          "room_id": "XXXXXXXXXXXXXXX",
                          "sip": {
                            "enabled": false
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.createVideoRommResponse"
                },
                "examples": {
                  "Text message": {
                    "value": {
                      "result": 40004,
                      "error": [
                        "Required Data Missing: name"
                      ],
                      "desc": "Bad request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "result": 0,
                      "error": "string",
                      "desc": "string"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "result": 0,
                      "error": "string",
                      "desc": "string"
                    }
                  }
                }
              }
            }
          }

        }
      }
    },
    "https://prutech.org/v2/rooms/{roomId}": {
      "get": {
        "tags": [ "Rooms" ],
        "summary": "Get details about a video room",
        "description": "This method allows to get details about a video room",

        "operationId": "channels/Video/Get details about a video room",
        "parameters": [
          {
            "name": "roomId ",
            "in": "path",
            "description": "ID of video room to return",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            },
            "example": "123e4567-e89b-12d3-a456-426655440000"
          }
        ],
        "responses": {
          "200": {
            "description": "Message accepted for delivery.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.videoRommResponse"
                },
                "examples": {
                  "Success Response": {
                    "value": {
                      "result": 0,
                      "rooms": [
                        {
                          "name": "Topic or Room Title",
                          "service_id": "XXXXXXXXXXXXXXXX",
                          "owner_ref": "xyz",
                          "settings": {
                            "description": "Descriptive text",
                            "mode": "group",
                            "scheduled": false,
                            "scheduled_time": "2021-08-25 11:11:11",
                            "adhoc": false,
                            "duration": 30,
                            "moderators": "1",
                            "participants": "2",
                            "auto_recording": false,
                            "active_talker": true,
                            "screen_share": true,
                            "canvas": false,
                            "knock": true,
                            "quality": "SD",
                            "billing_code": "XXXXXX",
                            "abwd": true,
                            "facex": false,
                            "max_active_talkers": 2
                          },
                          "data": {
                            "custom_key": ""
                          },
                          "configured_media_zone": "XX",
                          "created": "2020-08-24T14:46:42.108Z",
                          "isMediaServerAvailable": false,
                          "updated": "2020-08-24T14:46:42.108Z",
                          "room_id": "XXXXXXXXXXXXXXX",
                          "sip": {
                            "enabled": false
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "video room not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "result": 0,
                      "error": "string",
                      "desc": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "result": 0,
                      "error": "string",
                      "desc": "string"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "result": 0,
                      "error": "string",
                      "desc": "string"
                    }
                  }
                }
              }
            }
          }

        }
      }
    },
    "https://prutech.org/v2/rooms/{roomId}..patch": {
      "post": {
        "tags": [ "Rooms" ],
        "summary": "Update details of a video room",
        "description": "This method allows to update details of a video room",

        "operationId": "channels/Video/Update details of a video room",
        "parameters": [
          {
            "name": "roomId ",
            "in": "path",
            "description": "ID of video room to return",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            },
            "example": "123e4567-e89b-12d3-a456-426655440000"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.updateroom"
              },
              "examples": {
                "Text message": {
                  "value": {
                    "name": "Topic or Room Title",
                    "settings": {
                      "description": "Descriptive text",
                      "duration": 30,
                      "moderators": "1",
                      "participants": "2",
                      "auto_recording": false,
                      "quality": "SD"
                    },
                    "sip": {
                      "enabled": false
                    },
                    "data": {
                      "custom_key": ""
                    }
                  }


                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Message accepted for delivery.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.videoRommupdateResponse"
                },
                "examples": {
                  "Success Response": {
                    "value": {
                      "result": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.createVideoRommResponse"
                },
                "examples": {
                  "Text message": {
                    "value": {
                      "result": 40004,
                      "error": [
                        "Required Data Missing: name"
                      ],
                      "desc": "Bad request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "result": 0,
                      "error": "string",
                      "desc": "string"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "result": 0,
                      "error": "string",
                      "desc": "string"
                    }
                  }
                }
              }
            }
          }

        }
      }
    },
    "https://prutech.org/v2/rooms/{roomId}..del": {
      "get": {
        "tags": [ "Rooms" ],
        "summary": "Delete video room",
        "description": "This method allows to Delete video room",

        "operationId": "channels/Video/Delete video room",
        "parameters": [
          {
            "name": "roomId ",
            "in": "path",
            "description": "ID of video room to delete",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            },
            "example": "123e4567-e89b-12d3-a456-426655440000"
          }
        ],
        "responses": {
          "200": {
            "description": "Message accepted for delivery.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.videoRommupdateResponse"
                },
                "examples": {
                  "Success Response": {
                    "value": {
                      "result": 0
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "video room not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "result": 0,
                      "error": "string",
                      "desc": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "result": 0,
                      "error": "string",
                      "desc": "string"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "result": 0,
                      "error": "string",
                      "desc": "string"
                    }
                  }
                }
              }
            }
          }

        }
      }
    },
    "https://prutech.org/v2/rooms/{roomId}/tokens": {
      "post": {
        "tags": [ "Rooms" ],
        "summary": "Create token",
        "description": "This method allows to Create token for joining video room",

        "operationId": "channels/Video/Create token",
        "parameters": [
          {
            "name": "roomId ",
            "in": "path",
            "description": "ID of video room to create token",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            },
            "example": "123e4567-e89b-12d3-a456-426655440000"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.roomCreateToken"
              },
              "examples": {
                "Text message": {
                  "value": {
                    "name": "John Doe",
                    "role": "participant",
                    "user_ref": "XXXXX"
                  }


                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Message accepted for delivery.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.videoRommTokenResponse"
                },
                "examples": {
                  "Success Response": {
                    "value": {
                      "result": 0,
                      "token": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.createVideoRommResponse"
                },
                "examples": {
                  "Text message": {
                    "value": {
                      "result": 40004,
                      "error": [
                        "Required Data Missing: name"
                      ],
                      "desc": "Bad request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "result": 0,
                      "error": "string",
                      "desc": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "video room not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "result": 0,
                      "error": "string",
                      "desc": "string"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "result": 0,
                      "error": "string",
                      "desc": "string"
                    }
                  }
                }
              }
            }
          }

        }
      }
    },
    "https://prutech.org/v2/rooms/{roomId}/users": {
      "get": {
        "tags": [ "Rooms" ],
        "summary": "Get list of users in a video room",
        "description": "This method allows to Get list of users in a video room",

        "operationId": "channels/Video/Get list of users in a video room",
        "parameters": [
          {
            "name": "roomId ",
            "in": "path",
            "description": "ID of video room to create token",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            },
            "example": "123e4567-e89b-12d3-a456-426655440000"
          }
        ],
        "responses": {
          "200": {
            "description": "Message accepted for delivery.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.videoRommListUserResponse"
                },
                "examples": {
                  "Success Response": {
                    "value": {
                      "result": 0,
                      "total": 1,
                      "users": [
                        {
                          "name": "John Doe",
                          "user_ref": "XXXXX",
                          "role": "participant",
                          "permissions": {
                            "publish": true,
                            "subscribe": true,
                            "record": true,
                            "stats": true,
                            "controlhandlers": true
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "result": 0,
                      "error": "string",
                      "desc": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "video room not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "result": 0,
                      "error": "string",
                      "desc": "string"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "result": 0,
                      "error": "string",
                      "desc": "string"
                    }
                  }
                }
              }
            }
          }

        }
      }
    },
    "https://prutech.org/v2/cdr/period/{from_date}/{to_date}": {
      "get": {
        "tags": [ "CDR" ],
        "summary": "Request CDR",
        "description": "This method Request CDR for a specific period",

        "operationId": "channels/Video/Request CDR",
        "parameters": [
          {
            "name": "from_date ",
            "in": "path",
            "description": "Starting date for CDR in `YYYY-MM-DD` format",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to_date ",
            "in": "path",
            "description": "End date for CDR in `YYYY-MM-DD` format",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Message accepted for delivery.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.cdrResponse"
                },
                "examples": {
                  "Success Response": {
                    "value": {
                      "result": 0,
                      "cdr": [
                        {
                          "trans_date": "2020-07-17T04:15:07.000Z",
                          "conf_num": "XXXXXXXXX",
                          "call_num": "XXXXX-XXXXX-XXXXX-XXXX",
                          "call_log_id": "XXXXX",
                          "parent_partner_id": "",
                          "room": {
                            "room_id": "XXXXXXXXXXXXXXXXX",
                            "connect_dt": "2020-07-17T04:13:41.587Z",
                            "disconnect_dt": "2020-07-17T04:14:20.154Z",
                            "duration": 38.567,
                            "sip": false
                          },
                          "user": {
                            "ip": "192.168.1.16",
                            "name": "John Doe",
                            "role": "participant",
                            "ref": "John Doe",
                            "agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.89 Safari/537.36",
                            "token": "string",
                            "confName": "string"
                          },
                          "sigserver": {
                            "disconnect_dt": "2020-07-17T04:14:20.137Z",
                            "connect_dt": "2020-07-17T04:13:13.691Z",
                            "ip": "192.168.1.11",
                            "duration": 66.446,
                            "hold_duration": 0.003
                          },
                          "published_track": {
                            "audio": false,
                            "data": false,
                            "video": false,
                            "screen": false,
                            "url": false
                          },
                          "usage": {
                            "subscribed_minutes": 193.501,
                            "published_minutes": 64.614,
                            "screen_minutes": 0,
                            "connect_minutes": 66.446,
                            "room_connect_minutes": 66.443
                          },
                          "app_id": "XXXXXXXXXXXXXXXXXX",
                          "cdr_id": "XXXXXXXXXXXXXXXXXX"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "result": 0,
                      "error": "string",
                      "desc": "string"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "result": 0,
                      "error": "string",
                      "desc": "string"
                    }
                  }
                }
              }
            }
          }

        }
      }
    },
    "https://prutech.org/v2/cdr/room/{room_id}": {
      "get": {
        "tags": [ "CDR" ],
        "summary": "Requesting CDR for a specific video room",
        "description": "This method Requesting CDR for a specific video room",

        "operationId": "channels/Video/Requesting CDR for a specific video room",
        "parameters": [
          {
            "name": "room_id  ",
            "in": "path",
            "description": "ID of video room to get CDR",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Message accepted for delivery.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.cdrResponse"
                },
                "examples": {
                  "Success Response": {
                    "value": {
                      "result": 0,
                      "cdr": [
                        {
                          "trans_date": "2020-07-17T04:15:07.000Z",
                          "conf_num": "XXXXXXXXX",
                          "call_num": "XXXXX-XXXXX-XXXXX-XXXX",
                          "call_log_id": "XXXXX",
                          "parent_partner_id": "",
                          "room": {
                            "room_id": "XXXXXXXXXXXXXXXXX",
                            "connect_dt": "2020-07-17T04:13:41.587Z",
                            "disconnect_dt": "2020-07-17T04:14:20.154Z",
                            "duration": 38.567,
                            "sip": false
                          },
                          "user": {
                            "ip": "192.168.1.16",
                            "name": "John Doe",
                            "role": "participant",
                            "ref": "John Doe",
                            "agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.89 Safari/537.36",
                            "token": "string",
                            "confName": "string"
                          },
                          "sigserver": {
                            "disconnect_dt": "2020-07-17T04:14:20.137Z",
                            "connect_dt": "2020-07-17T04:13:13.691Z",
                            "ip": "192.168.1.11",
                            "duration": 66.446,
                            "hold_duration": 0.003
                          },
                          "published_track": {
                            "audio": false,
                            "data": false,
                            "video": false,
                            "screen": false,
                            "url": false
                          },
                          "usage": {
                            "subscribed_minutes": 193.501,
                            "published_minutes": 64.614,
                            "screen_minutes": 0,
                            "connect_minutes": 66.446,
                            "room_connect_minutes": 66.443
                          },
                          "app_id": "XXXXXXXXXXXXXXXXXX",
                          "cdr_id": "XXXXXXXXXXXXXXXXXX"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "result": 0,
                      "error": "string",
                      "desc": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "video room not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "result": 0,
                      "error": "string",
                      "desc": "string"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "result": 0,
                      "error": "string",
                      "desc": "string"
                    }
                  }
                }
              }
            }
          }

        }
      }
    },
    "https://prutech.org/v2/cdr/room-period/{room_id}/{from_date}/{to_date}": {
      "get": {
        "tags": [ "CDR" ],
        "summary": "Request CDR for a specific video room and specified period",
        "description": "This method Request CDR for a specific video room and specified period",

        "operationId": "channels/Video/Request CDR for a specific video room and specified period",
        "parameters": [
          {
            "name": "room_id  ",
            "in": "path",
            "description": "ID of video room to get CDR",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from_date ",
            "in": "path",
            "description": "Starting date for CDR in `YYYY-MM-DD` format",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to_date ",
            "in": "path",
            "description": "End date for CDR in `YYYY-MM-DD` format",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Message accepted for delivery.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.cdrResponse"
                },
                "examples": {
                  "Success Response": {
                    "value": {
                      "result": 0,
                      "cdr": [
                        {
                          "trans_date": "2020-07-17T04:15:07.000Z",
                          "conf_num": "XXXXXXXXX",
                          "call_num": "XXXXX-XXXXX-XXXXX-XXXX",
                          "call_log_id": "XXXXX",
                          "parent_partner_id": "",
                          "room": {
                            "room_id": "XXXXXXXXXXXXXXXXX",
                            "connect_dt": "2020-07-17T04:13:41.587Z",
                            "disconnect_dt": "2020-07-17T04:14:20.154Z",
                            "duration": 38.567,
                            "sip": false
                          },
                          "user": {
                            "ip": "192.168.1.16",
                            "name": "John Doe",
                            "role": "participant",
                            "ref": "John Doe",
                            "agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.89 Safari/537.36",
                            "token": "string",
                            "confName": "string"
                          },
                          "sigserver": {
                            "disconnect_dt": "2020-07-17T04:14:20.137Z",
                            "connect_dt": "2020-07-17T04:13:13.691Z",
                            "ip": "192.168.1.11",
                            "duration": 66.446,
                            "hold_duration": 0.003
                          },
                          "published_track": {
                            "audio": false,
                            "data": false,
                            "video": false,
                            "screen": false,
                            "url": false
                          },
                          "usage": {
                            "subscribed_minutes": 193.501,
                            "published_minutes": 64.614,
                            "screen_minutes": 0,
                            "connect_minutes": 66.446,
                            "room_connect_minutes": 66.443
                          },
                          "app_id": "XXXXXXXXXXXXXXXXXX",
                          "cdr_id": "XXXXXXXXXXXXXXXXXX"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "result": 0,
                      "error": "string",
                      "desc": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "video room not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "result": 0,
                      "error": "string",
                      "desc": "string"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "result": 0,
                      "error": "string",
                      "desc": "string"
                    }
                  }
                }
              }
            }
          }

        }
      }
    },
    "https://prutech.org/v2/cdr/conf/{conf_num}": {
      "get": {
        "tags": [ "CDR" ],
        "summary": "Requesting CDR for a conference number",
        "description": "This method Requesting CDR for a conference number",

        "operationId": "channels/Video/Requesting CDR for a conference number",
        "parameters": [
          {
            "name": "conf_num   ",
            "in": "path",
            "description": "Get CDR by conference number",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Message accepted for delivery.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.cdrResponse"
                },
                "examples": {
                  "Success Response": {
                    "value": {
                      "result": 0,
                      "cdr": [
                        {
                          "trans_date": "2020-07-17T04:15:07.000Z",
                          "conf_num": "XXXXXXXXX",
                          "call_num": "XXXXX-XXXXX-XXXXX-XXXX",
                          "call_log_id": "XXXXX",
                          "parent_partner_id": "",
                          "room": {
                            "room_id": "XXXXXXXXXXXXXXXXX",
                            "connect_dt": "2020-07-17T04:13:41.587Z",
                            "disconnect_dt": "2020-07-17T04:14:20.154Z",
                            "duration": 38.567,
                            "sip": false
                          },
                          "user": {
                            "ip": "192.168.1.16",
                            "name": "John Doe",
                            "role": "participant",
                            "ref": "John Doe",
                            "agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.89 Safari/537.36",
                            "token": "string",
                            "confName": "string"
                          },
                          "sigserver": {
                            "disconnect_dt": "2020-07-17T04:14:20.137Z",
                            "connect_dt": "2020-07-17T04:13:13.691Z",
                            "ip": "192.168.1.11",
                            "duration": 66.446,
                            "hold_duration": 0.003
                          },
                          "published_track": {
                            "audio": false,
                            "data": false,
                            "video": false,
                            "screen": false,
                            "url": false
                          },
                          "usage": {
                            "subscribed_minutes": 193.501,
                            "published_minutes": 64.614,
                            "screen_minutes": 0,
                            "connect_minutes": 66.446,
                            "room_connect_minutes": 66.443
                          },
                          "app_id": "XXXXXXXXXXXXXXXXXX",
                          "cdr_id": "XXXXXXXXXXXXXXXXXX"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "result": 0,
                      "error": "string",
                      "desc": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "video room not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "result": 0,
                      "error": "string",
                      "desc": "string"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "result": 0,
                      "error": "string",
                      "desc": "string"
                    }
                  }
                }
              }
            }
          }

        }
      }
    },
    "https://prutech.org/v2/archive/period/{from_date}/{to_date}": {
      "get": {
        "tags": [ "Archive" ],
        "summary": "Get access to files",
        "description": "This method allows to get access to files created for a specific period",

        "operationId": "channels/Video/Get access to files",
        "parameters": [
          {
            "name": "from_date ",
            "in": "path",
            "description": "Starting date for Archive in YYYY-MM-DD format",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to_date ",
            "in": "path",
            "description": "End date for Archive in YYYY-MM-DD format",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Message accepted for delivery.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.archiveResponse"
                },
                "examples": {
                  "Success Response": {
                    "value": {
                      "result": 0,
                      "archive": [
                        {
                          "_id": "XXXXXXXXXXXXXX",
                          "trans_date": "2020-07-17T00:00:00.000Z",
                          "conf_num": "XXXXXXXXXXXX",
                          "metadata": "https://portal.enablex.io/XXXXXXX.json",
                          "transcoded": [
                            {
                              "url": "https://portal.enablex.io/XXXXXX.MP4"
                            }
                          ],
                          "app_id": "XXXXXXXXXXXXXXXXXXXXXX",
                          "room_id": "XXXXXXXXXXXXXXXXXXXXXX",
                          "recording": [
                            {
                              "url": "https://portal.enablex.io/XXXXXXXX.mkv"
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "result": 0,
                      "error": "string",
                      "desc": "string"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "result": 0,
                      "error": "string",
                      "desc": "string"
                    }
                  }
                }
              }
            }
          }

        }
      }
    },
    "https://prutech.org/v2/archive/room/{room_id}": {
      "get": {
        "tags": [ "Archive" ],
        "summary": "Requesting file archive for a specific video room",
        "description": "This method Request file archive for a specific video room",

        "operationId": "channels/Video/Request file archive for a specific video room",
        "parameters": [
          {
            "name": "room_id  ",
            "in": "path",
            "description": "ID of video room to get file archive",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Message accepted for delivery.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.archiveResponse"
                },
                "examples": {
                  "Success Response": {
                    "value": {
                      "result": 0,
                      "archive": [
                        {
                          "_id": "XXXXXXXXXXXXXX",
                          "trans_date": "2020-07-17T00:00:00.000Z",
                          "conf_num": "XXXXXXXXXXXX",
                          "metadata": "https://portal.enablex.io/XXXXXXX.json",
                          "transcoded": [
                            {
                              "url": "https://portal.enablex.io/XXXXXX.MP4"
                            }
                          ],
                          "app_id": "XXXXXXXXXXXXXXXXXXXXXX",
                          "room_id": "XXXXXXXXXXXXXXXXXXXXXX",
                          "recording": [
                            {
                              "url": "https://portal.enablex.io/XXXXXXXX.mkv"
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "result": 0,
                      "error": "string",
                      "desc": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "video room not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "result": 0,
                      "error": "string",
                      "desc": "string"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "result": 0,
                      "error": "string",
                      "desc": "string"
                    }
                  }
                }
              }
            }
          }

        }
      }
    },
    "https://prutech.org/v2/archive/room-period/{room_id}/{from_date}/{to_date}": {
      "get": {
        "tags": [ "Archive" ],
        "summary": "Requesting  file archive for a specific video room and specified period",
        "description": "This method Request  file archive for a specific video room and specified period",

        "operationId": "channels/Video/Request  file archive for a specific video room and specified period",
        "parameters": [
          {
            "name": "room_id  ",
            "in": "path",
            "description": "ID of video room to get CDR",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from_date ",
            "in": "path",
            "description": "Starting date for CDR in `YYYY-MM-DD` format",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to_date ",
            "in": "path",
            "description": "End date for CDR in `YYYY-MM-DD` format",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Message accepted for delivery.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.archiveResponse"
                },
                "examples": {
                  "Success Response": {
                    "value": {
                      "result": 0,
                      "archive": [
                        {
                          "_id": "XXXXXXXXXXXXXX",
                          "trans_date": "2020-07-17T00:00:00.000Z",
                          "conf_num": "XXXXXXXXXXXX",
                          "metadata": "https://portal.enablex.io/XXXXXXX.json",
                          "transcoded": [
                            {
                              "url": "https://portal.enablex.io/XXXXXX.MP4"
                            }
                          ],
                          "app_id": "XXXXXXXXXXXXXXXXXXXXXX",
                          "room_id": "XXXXXXXXXXXXXXXXXXXXXX",
                          "recording": [
                            {
                              "url": "https://portal.enablex.io/XXXXXXXX.mkv"
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "result": 0,
                      "error": "string",
                      "desc": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "video room not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "result": 0,
                      "error": "string",
                      "desc": "string"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "result": 0,
                      "error": "string",
                      "desc": "string"
                    }
                  }
                }
              }
            }
          }

        }
      }
    },
    "https://prutech.org/v2/archive/conf/{conf_num}": {
      "get": {
        "tags": [ "Archive" ],
        "summary": "Requesting file archive for a specific video room",
        "description": "This method Request file archive for a specific video room",

        "operationId": "channels/Video/Request file archive for a specific video room",
        "parameters": [
          {
            "name": "conf_num ",
            "in": "path",
            "description": "Get CDR by conference number",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Message accepted for delivery.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.archiveResponse"
                },
                "examples": {
                  "Success Response": {
                    "value": {
                      "result": 0,
                      "archive": [
                        {
                          "_id": "XXXXXXXXXXXXXX",
                          "trans_date": "2020-07-17T00:00:00.000Z",
                          "conf_num": "XXXXXXXXXXXX",
                          "metadata": "https://portal.enablex.io/XXXXXXX.json",
                          "transcoded": [
                            {
                              "url": "https://portal.enablex.io/XXXXXX.MP4"
                            }
                          ],
                          "app_id": "XXXXXXXXXXXXXXXXXXXXXX",
                          "room_id": "XXXXXXXXXXXXXXXXXXXXXX",
                          "recording": [
                            {
                              "url": "https://portal.enablex.io/XXXXXXXX.mkv"
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "result": 0,
                      "error": "string",
                      "desc": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "video room not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "result": 0,
                      "error": "string",
                      "desc": "string"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentVideostandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "result": 0,
                      "error": "string",
                      "desc": "string"
                    }
                  }
                }
              }
            }
          }

        }
      }
    },
    "https://prutech.org/SmsPortalApi/api/Values/CreateCampaign/json/apikey=XXXXXXXX": {
      "post": {
        "tags": [
          "CREATE SMS CAMPAIGN"
        ],
        "summary": "Create SMS Campaign",
        "description": "This method allows you to create SMS Campaign",
        "operationId": "channels/SMS/createCampaign",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token for validating user..<br/>Token can be Authorization Bearer or Authorization Basic",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/prudentSMSapiservice.openapi.CreateCampaign"
              },
              "examples": {
                "Text message": {
                  "value": {
                    "campname": "My Campaign1",
                    "fromdt": "14/05/2019",
                    "todt": "15/05/2019",
                    "fromtime": "09:00:00",
                    "totime": "23:00:00",
                    "senderid": "7",
                    "templateid": "23",
                    "type": "1",
                    "script": "hai mr [PARAMETER1] amd mrs [PARAMETER2]"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Message accepted for delivery.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentSMSapiservice.openapi.CreateCampaignResponse"
                },
                "examples": {
                  "Success Response": {
                    "value": {
                      "Status": "Success",
                      "Message": "Campaign Created Successfully",
                      "CampaignId": "2"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "https://prutech.org/SmsPortalApi/api/Values/UploadMSISDNBase/json/apikey=XXXXXX": {
      "post": {
        "tags": [
          "BASE UPLOAD"
        ],
        "summary": "Upload base",
        "description": "This method allows you to Upload base",
        "operationId": "channels/SMS/BaseUpload",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token for validating user..<br/>Token can be Authorization Bearer or Authorization Basic",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/prudentSMSapiservice.openapi.UploadMSISDNBase"
              },
              "examples": {
                "Text message": {
                  "value": {
                    "campaignid": "2",
                    "msisdn": "xxxxxxxxxx,xxxxxxxxxx,xxxxxxxxxx"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Message accepted for delivery.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentSMSapiservice.openapi.UploadMSISDNBaseResponse"
                },
                "examples": {
                  "Success Response": {
                    "value": {
                      "Status": "Success",
                      "Message": "Base Uploaded!",
                      "CampaignId": "2"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "https://prutech.org/SmsPortalApi/api/Values/InstantSMS/json/apikey=XXXXXXXX": {
      "post": {
        "tags": [
          "INSTANT SMS POST"
        ],
        "summary": "Instant SMS using POST method",
        "description": "This method allows you to send instant SMS ",
        "operationId": "channels/SMS/InstantSMSPOST",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token for validating user..<br/>Token can be Authorization Bearer or Authorization Basic",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/prudentSMSapiservice.openapi.instantSMSPost"
              },
              "examples": {
                "Text message": {
                  "value": {
                    "msisdn": "xxxxxxxxxx,xxxxxxxxxx,xxxxxxxxxx",
                    "script": "Hi mr DD",
                    "senderid": "1",
                    "templateid": "1",
                    "smstype": "1",
                    "pingbackurl": "https://customerurlsample.com"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Message accepted for delivery.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentSMSapiservice.openapi.instantSMSPostResponse"
                },
                "examples": {
                  "Success Response": {
                    "value": {
                      "Status": "Success",
                      "Message": "SMS Created Successfully",
                      "uniqueid": "66"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "https://prutech.org/SmsPortalApi/api/Values/GetData?Msisdn={Msisdn}&script={script}&senderid={senderid}&templateid={templateid}&smstype={smstype}&key={key}": {
      "get": {
        "tags": [
          "INSTANT SMS GET"
        ],
        "summary": "Instant SMS using POST method",
        "description": "This method allows you to send instant SMS ",
        "operationId": "channels/SMS/InstantSMSGET",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token for validating user..<br/>Token can be Authorization Bearer or Authorization Basic",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "msisdn": "msisdn",
            "in": "path",
            "description": "msisdn.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/prudentSMSapiservice.openapi.instantSMSGet"
            },
            "example": "Msisdn=919544xxxxxx&script=Member, Thank you for being a part of Dubai Gold & Diamonds Perinthalmanna.Hope you enjoyed shopping with us. 9946300916&senderid=9&templateid=49&smstype=1&key=JNERC7NF"
          }
        ],
        "responses": {
          "200": {
            "description": "Message accepted for delivery.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentSMSapiservice.openapi.instantSMSGetResponse"
                },
                "examples": {
                  "Success Response": {
                    "value": {
                      "Status": "Success",
                      "Message": "SMS Created Successfully",
                      "uniqueid": "66"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "https://prutech.org/SmsPortalApi/api/Values/CreateSenderID?ApiKey=XXXX": {
      "post": {
        "tags": [
          "SENDERID CREATION"
        ],
        "summary": "Create senderid",
        "description": "This method allows you to create senderid",
        "operationId": "channels/SMS/CreateSenderID",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token for validating user..<br/>Token can be Authorization Bearer or Authorization Basic",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/prudentSMSapiservice.openapi.CreateSenderID"
              },
              "examples": {
                "Text message": {
                  "value": {
                    "SenderId": "xxxxxx",
                    "PrincipleId": "xxxxxxxxxxxxxxxxxxx"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Message accepted for delivery.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentSMSapiservice.openapi.CreateSenderIDResponse"
                },
                "examples": {
                  "Success Response": {
                    "value": {
                      "Status": "Failed",
                      "Message": "Invalid Principle Id must be length of 19"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "https://prutech.org/SmsPortalApi/api/Values/PostDeliveryFetch?ApiKey=x123": {
      "post": {
        "tags": [
          "PULL SMS DELIVERY RESPONSE"
        ],
        "summary": "pull report",
        "description": "This method allows you to pull report",
        "operationId": "channels/SMS/pullReport",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token for validating user..<br/>Token can be Authorization Bearer or Authorization Basic",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/prudentSMSapiservice.openapi.PullReport"
              },
              "examples": {
                "Text message": {
                  "value": {
                    "Uniqueid": "xxxxxx"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Message accepted for delivery.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentSMSapiservice.openapi.PullReportResponse"
                },
                "examples": {
                  "Success Response": {
                    "value": [
                      {
                        "MSISDN": "8606216994",
                        "DELIVERY_TIME": "09-03-2020 00:00:00",
                        "DELIVERY_RESPONSE": "OTHER"
                      },
                      {
                        "MSISDN": "8606216994",
                        "DELIVERY_TIME": "09-03-2020 10:11:11",
                        "DELIVERY_RESPONSE": "OTHER"
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "https://prutech.org/SmsPortalApi/api/Values/Smstemplatefetch?ApiKey=XXXXX": {
      "post": {
        "tags": [
          "FETCH SMS TEMPLATE STATUS"
        ],
        "summary": "customer can fetch template status",
        "description": "This method allows you to fetch template status",
        "operationId": "channels/SMS/Smstemplatefetch",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token for validating user..<br/>Token can be Authorization Bearer or Authorization Basic",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/prudentSMSapiservice.openapi.FetchTemplate"
              },
              "examples": {
                "Text message": {
                  "value": {
                    "templateid": "72"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Message accepted for delivery.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentSMSapiservice.openapi.FetchTemplateResponse"
                },
                "examples": {
                  "Success Response": {
                    "value": {
                      "templateid": "72",
                      "template_status": "Approved"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "https://prutech.org/SmsPortalApi/api/Values/TemplateAPI?ApiKey=XXXX": {
      "post": {
        "tags": [
          "SMS TEMPLATE CREATION"
        ],
        "summary": "Create SMS TEMPLATE",
        "description": "This method allows you to create SMS TEMPLATE",
        "operationId": "channels/SMS/CreateSMSTemplate",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token for validating user..<br/>Token can be Authorization Bearer or Authorization Basic",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/prudentSMSapiservice.openapi.Template"
              },
              "examples": {
                "Text message": {
                  "value": {
                    "SenderId": "xxxxxx",
                    "PrincipleId": "xxxxxxxxxxxxxxxxxxx"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Message accepted for delivery.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentSMSapiservice.openapi.TemplateIDResponse"
                },
                "examples": {
                  "Success Response": {
                    "value": {
                      "Status": "Failed",
                      "Message": "Invalid Principle Id must be length of 19"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "https://Prutech.org/PMMW/api/v1/send-template": {
      "post": {
        "tags": [ "Send Whatsapp Message" ],
        "summary": "V1/Send Template Message",
        "description": "Send a single or multiple template messages to one or more recipients. Template messages can be sent and delivered at anytime. Each template sent needs to be registered and pre-approved by WhatsApp. <br/> The API response will not contain the final delivery status.",

        "operationId": "channels/whatsapp/v1/send-template",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token for validating user..<br/>Token can be Authorization Bearer or Authorization Basic",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.SendTemplateMessage"
              },
              "examples": {
                "Body template message": {
                  "value": {
                    "From": "441134960000",
                    "To": "441134960001",
                    "MessageId": "1215f543ab19-345f-adbd-12ad31451ed25f35",
                    "TemplateName": "template_name",
                    "Language": "Language",
                    "ParameterCount": "2",
                    "Param1": "Parameter1",
                    "Param2": "Parameter2"
                  }
                }


              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Template created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.BulkMessageInfo"
                },
                "examples": {
                  "Success Response": {
                    "value": {
                      "status": 1,
                      "message": "Request Accepted"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.ApiException"
                },
                "examples": {
                  "Text validation error response": {
                    "value": {
                      "status": 0,
                      "message": "Bulk Id should be unique"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "UnAuthorized",
            "content": {
              "application/json": {
                "examples": {
                  "Failure Response": {
                    "value": {
                      "message": "UnAuthorized!"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "examples": {
                  "Failure Response": {
                    "value": {
                      "message": "Error!"
                    }
                  }
                }
              }
            }

          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "prudentVoicestandaloneapiservice.openapi.CallPingBack": {
        "type": "object",
        "properties": {
          "ct_call_id _ID": {
            "type": "number",
            "description": "Id, which is uniquely identify by each Call"
          },
          "aparty_number": {
            "type": "number",
            "description": "A party Mobile number"
          },
          "bparty_number": {
            "type": "number",
            "description": "B party Mobile number"
          },
          "a_call_start_time": {
            "type": "number",
            "description": "A party Start Time in the format of `dd/mm/yyyy hh24:mi:ss`"
          },
          "a_call_conn_time": {
            "type": "number",
            "description": "A party Connect Time in the format of `dd/mm/yyyy hh24:mi:ss`"
          },
          "a_call_end_time": {
            "type": "string",
            "description": "A party End Time in the format of `dd/mm/yyyy hh24:mi:ss`"
          },
          "a_duration": {
            "type": "string",
            "description": "A party Call duration in seconds"
          },
          "a_call_status": {
            "type": "string",
            "description": "A party call Status"
          },
          "b_call_start_time": {
            "type": "string",
            "description": "B party Start Time in the format of `dd/mm/yyyy hh24:mi:ss`"
          },
          "b_call_conn_time": {
            "type": "string",
            "description": "B party Connect Tim in the format of `dd/mm/yyyy hh24:mi:ss`"
          },
          "b_call_end_time": {
            "type": "string",
            "description": "B party End Tim Time in the format of `dd/mm/yyyy hh24:mi:ss`"
          },
          "b_duration": {
            "type": "string",
            "description": "B party Call duration in seconds"
          },
          "b_call_status": {
            "type": "string",
            "description": "B party call Status"
          },
          "recording_uri": {
            "description": "Voice Recording files"
          }

        }
      },
      "prudentVoicestandaloneapiservice.openapi.pingBackobdResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of request. Success/Failed"
          }
        }
      },
      "prudentVoicestandaloneapiservice.openapi.Create-CampaignPingback": {
        "type": "object",
        "properties": {
          "CAMPAIGN_ID": {
            "type": "number",
            "description": "Id, which is uniquely identify by each campaig can be numeric values"
          },
          "CALL_ID": {
            "type": "number",
            "description": "Obd call Id"
          },
          "MSISDN": {
            "type": "number",
            "description": "Customers number"
          },
          "CALL_START_TIME": {
            "type": "number",
            "description": "Scheduled OBD Start Time in the format of `dd/mm/yyyy hh24:mi:ss`"
          },
          "CALL_END_TIME": {
            "type": "string",
            "description": "Scheduled OBD End Time in the format of `dd/mm/yyyy hh24:mi:ss`"
          },
          "DTMF": {
            "type": "number"
          },
          "DURATION": {
            "type": "number",
            "description": "Obd Call Duration"
          },
          "CALL_CIRCLE": {
            "type": "string",
            "description": "caller circle"
          },
          "CALL_STATUS": {
            "type": "string",
            "description": "Scheduled OBD Call Status."
          }
        }
      },
      "prudentSMSapiservice.openapi.CreateCampaign": {
        "type": "object",
        "properties": {
          "campname": {
            "type": "Alphanumeric name",
            "description": "Campaign Name"
          },
          "type": {
            "type": "number",
            "description": "SMS campaign type, 0 – Promotional 1 – transactional 2 - Service implicit 3 - Service Explicit "
          },
          "senderid": {
            "type": "number",
            "description": "Sender ID - Numeric sender ID, which is pre-approved"
          },
          "templateid": {
            "type": "number",
            "description": "SMS template ID, Numeric SMS template ID, which is pre-approved "
          },
          "fromdt": {
            "type": "Date Format “DD/MM/YYYY”",
            "description": "SMS schedule start date "
          },
          "todt": {
            "type": "Date Format “DD/MM/YYYY”",
            "description": "SMS schedule end date "
          },
          "fromtime": {
            "type": "Date Format “HH24:MI:SS”",
            "description": "SMS schedule start time "
          },
          "totime": {
            "type": "Date Format “HH24:MI:SS”",
            "description": "SMS schedule end time "
          },
          "script": {
            "type": "Message Content with parameters value",
            "description": "Alphanumeric SMS content . This parameter will be replaced with SMS template parameters in the same order. "
          },
          "pingbackurl": {
            "type": "url",
            "description": "Url to push delivery response provide by customer[details of pingback url described in last section] "
          }
        }
      },
      "prudentSMSapiservice.openapi.CreateCampaignResponse": {
        "type": "object",
        "properties": {
          "campname": {
            "type": "Alphanumeric name",
            "description": "Campaign Name"
          },
          "Status": {
            "type": "string",
            "description": "Status of request"
          },
          "Message": {
            "type": "string",
            "description": "Message status"
          },
          "campaignid": {
            "type": "number",
            "description": "Unique SMS campaign ID"
          }
        }
      },
      "prudentSMSapiservice.openapi.UploadMSISDNBase": {
        "type": "object",
        "properties": {
          "campaignid": {
            "type": "Number",
            "description": "Unique Id of campaign"
          },
          "msisdn": {
            "type": "csv of mobilenumber with countrycode",
            "description": "Comma separated mobile numbers with out country code. Allow maximum of 100000 0  number in a single push"
          }
        }
      },
      "prudentSMSapiservice.openapi.UploadMSISDNBaseResponse": {
        "type": "object",
        "properties": {
          "Status": {
            "type": "string",
            "description": "Status of request"
          },
          "Message": {
            "type": "string",
            "description": "Message status"
          },
          "campaignid": {
            "type": "number",
            "description": "Unique SMS campaign ID"
          }
        }
      },
      "prudentSMSapiservice.openapi.instantSMSPost": {
        "type": "object",
        "properties": {
          "msisdn": {
            "type": "string",
            "description": "Comma separated mobile numbers with out country code. Allow maximum of 100 number in a single push"
          },
          "script": {
            "type": "string",
            "description": "Alphanumeric SMS content"
          },
          "senderid": {
            "type": "string",
            "description": "Numeric sender ID, which is pre-approved"
          },
          "templateid": {
            "type": "string",
            "description": "Numeric template ID, which is pre-approved"
          },
          "smstype": {
            "type": "number",
            "description": "SMS campaign type, 0 – Promotional 1 – transactional 2 - Service implicit 3 - Service Explicit "
          },
          "pingbackurl": {
            "type": "url",
            "description": "Url to push delivery response, provide by customer[details of pingback url described in last section]"
          }
        }
      },
      "prudentSMSapiservice.openapi.instantSMSPostResponse": {
        "type": "object",
        "properties": {
          "Status": {
            "type": "string",
            "description": "Status of request"
          },
          "Message": {
            "type": "string",
            "description": "Message status"
          },
          "uniqueid": {
            "type": "number",
            "description": "uniqueid"
          }
        }
      },
      "prudentSMSapiservice.openapi.instantSMSGet": {
        "type": "object",
        "properties": {
          "msisdn": {
            "type": "string",
            "description": "Comma separated mobile numbers with out country code. Allow maximum of 100 number in a single push"
          },
          "script": {
            "type": "string",
            "description": "Alphanumeric SMS content"
          },
          "senderid": {
            "type": "string",
            "description": "Numeric sender ID, which is pre-approved"
          },
          "templateid": {
            "type": "string",
            "description": "Numeric template ID, which is pre-approved"
          },
          "smstype": {
            "type": "number",
            "description": "SMS campaign type, 0 – Promotional 1 – transactional 2 - Service implicit 3 - Service Explicit "
          }
        }
      },
      "prudentSMSapiservice.openapi.instantSMSGetResponse": {
        "type": "object",
        "properties": {
          "Status": {
            "type": "string",
            "description": "Status of request"
          },
          "Message": {
            "type": "string",
            "description": "Message status"
          },
          "uniqueid": {
            "type": "number",
            "description": "uniqueid"
          }
        }
      },
      "prudentSMSapiservice.openapi.CreateSenderID": {
        "type": "object",
        "properties": {
          "SenderId": {
            "type": "string",
            "description": "sender id"
          },
          "PrincipleId": {
            "type": "Number",
            "description": "[19 Digit]"
          }
        }
      },
      "prudentSMSapiservice.openapi.CreateSenderIDResponse": {
        "type": "object",
        "properties": {
          "Status": {
            "type": "string",
            "description": "Status of request"
          },
          "Message": {
            "type": "string",
            "description": "Message status"
          }
        }
      },
      "prudentSMSapiservice.openapi.PullReport": {
        "type": "object",
        "properties": {
          "Uniqueid": {
            "type": "number",
            "description": "Uniqueid"
          }
        }
      },
      "prudentSMSapiservice.openapi.PullReportResponse": {
        "type": "object",
        "properties": {
          "MSISDN": {
            "type": "string",
            "description": "Msisdn"
          },
          "DELIVERY_RESPONSE": {
            "type": "Alpha numeric DELIVERED/UNDELIV/REJECTED/EXPIRED/OTHER",
            "description": "Sms delivery response status"
          },
          "DELIVERY_TIME": {
            "type": "string",
            "description": "Sms delivery response time"
          }
        }
      },
      "prudentSMSapiservice.openapi.FetchTemplate": {
        "type": "object",
        "properties": {
          "templateid": {
            "type": "number",
            "description": "Template id against the api request"
          }
        }
      },
      "prudentSMSapiservice.openapi.FetchTemplateResponse": {
        "type": "object",
        "properties": {
          "templateid": {
            "type": "number",
            "description": "Id of the template"
          },
          "template_status": {
            "type": "Alpha numeric approved/no action/denied/deleted",
            "description": "status"
          }
        }
      },
      "prudentSMSapiservice.openapi.Template": {
        "type": "object",
        "properties": {
          "script": {
            "type": "alphanumeric",
            "description": "Template script"
          },
          "unicodestatus": {
            "type": "Number",
            "description": "Unicode status:0-english1-unicode"
          },
          "DLTtemplateid": {
            "type": "Number",
            "description": "Template id registered in DLT-19 digit"
          },
          "pingbackurl": {
            "type": "url",
            "description": "Push sms template status url"
          }
        }
      },
      "prudentSMSapiservice.openapi.TemplateResponse": {
        "type": "object",
        "properties": {
          "Status": {
            "type": "string",
            "description": "Status of request"
          },
          "Message": {
            "type": "string",
            "description": "Message status"
          },
          "Templateid": {
            "type": "number",
            "description": "Id of the created template"
          }
        }
      },

      "prudentVideosstandaloneapiservice.openapi.archiveTranscoded": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "URL of the transcoding to download"
          }
        }
      },
      "prudentVideosstandaloneapiservice.openapi.archiveRecording": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "URL of the transcoding to download"
          }
        }
      },
      "prudentVideosstandaloneapiservice.openapi.archive": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Unique identified of archive file"
          },
          "trans_date": {
            "type": "string",
            "description": "Transaction date time of archive file"
          },
          "conf_num": {
            "type": "string",
            "description": "Conference number of the archive file"
          },
          "metadata": {
            "type": "string",
            "description": "URL of the metadata of archive file"
          },
          "transcoded": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/prudentVideosstandaloneapiservice.openapi.archiveTranscoded"
            }
          },
          "app_id": {
            "type": "string",
            "description": "Application unique identifier"
          },
          "room_id": {
            "type": "string",
            "description": "Room identifier of the archive file"
          },
          "recording": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/prudentVideosstandaloneapiservice.openapi.archiveRecording"
            }
          }
        }
      },
      "prudentVideostandaloneapiservice.openapi.archiveResponse": {

        "type": "object",
        "properties": {
          "result": {
            "format": "int32",
            "type": "integer"
          },
          "archive": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/prudentVideosstandaloneapiservice.openapi.archive"
            }
          }

        }
      },
      "prudentVideosstandaloneapiservice.openapi.cdrusage": {
        "type": "object",
        "properties": {
          "subscribed_minutes": {
            "format": "int32",
            "type": "integer"
          },
          "published_minutes": {
            "format": "int32",
            "type": "integer"
          },
          "screen_minutes": {
            "format": "int32",
            "type": "integer"
          },
          "connect_minutes": {

            "format": "int32",
            "type": "integer"
          },
          "room_connect_minutes": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "prudentVideosstandaloneapiservice.openapi.cdrpublished_track": {
        "type": "object",
        "properties": {
          "audio": {
            "type": "boolean"
          },
          "data": {
            "type": "boolean"
          },
          "video": {
            "type": "boolean"
          },
          "screen": {

            "type": "boolean"
          },
          "url": {
            "type": "boolean"
          }
        }
      },
      "prudentVideosstandaloneapiservice.openapi.cdrsigserver": {
        "type": "object",
        "properties": {
          "disconnect_dt": {
            "type": "string"
          },
          "connect_dt": {
            "type": "string"
          },
          "ip": {
            "type": "string"
          },
          "duration": {
            "format": "int32",
            "type": "integer"
          },
          "hold_duration": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "prudentVideosstandaloneapiservice.openapi.cdrRoom": {
        "type": "object",
        "properties": {
          "room_id": {
            "type": "string"
          },
          "connect_dt": {
            "type": "string"
          },
          "disconnect_dt": {
            "type": "string"
          },
          "duration": {
            "type": "integer"
          },
          "sip": {
            "type": "boolean"
          }
        }
      },
      "prudentVideosstandaloneapiservice.openapi.cdruser": {
        "type": "object",
        "properties": {
          "ip": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "description": "Role of the user [participant, moderator]"
          },
          "ref": {
            "type": "string"
          },
          "agent": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "confName": {
            "type": "string"
          }
        }
      },
      "prudentVideosstandaloneapiservice.openapi.cdr": {
        "type": "object",
        "properties": {
          "trans_date": {
            "type": "string",
            "description": "CDR transaction date"
          },
          "conf_num": {
            "type": "string",
            "description": "Room conference number"
          },
          "call_num": {
            "type": "string"
          },
          "call_log_id": {
            "type": "string",
            "description": "Log reference of the meeting in the EnableX system"
          },
          "parent_partner_id": {
            "type": "string"
          },
          "room": {
            "$ref": "#/components/schemas/prudentVideosstandaloneapiservice.openapi.cdrRoom"
          },
          "user": {
            "$ref": "#/components/schemas/prudentVideosstandaloneapiservice.openapi.cdruser"
          },
          "sigserver": {
            "$ref": "#/components/schemas/prudentVideosstandaloneapiservice.openapi.cdrsigserver"
          },
          "published_track": {
            "$ref": "#/components/schemas/prudentVideosstandaloneapiservice.openapi.cdrpublished_track"
          },
          "usage": {
            "$ref": "#/components/schemas/prudentVideosstandaloneapiservice.openapi.cdrusage"
          },
          "app_id": {
            "type": "string",
            "description": "Application unique identifier"
          },
          "cdr_id": {
            "type": "string",
            "description": "CDR unique identifier"
          }
        }
      },
      "prudentVideostandaloneapiservice.openapi.cdrResponse": {

        "type": "object",
        "properties": {
          "result": {
            "format": "int32",
            "type": "integer"
          },
          "cdr": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/prudentVideosstandaloneapiservice.openapi.cdr"
            }
          }

        }
      },
      "prudentVideosstandaloneapiservice.openapi.roomsUserList": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of Room or Topic of Meeting"
          },
          "user_ref": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "description": "Role of the user, joining video room"
          },
          "permissions": {
            "$ref": "#/components/schemas/prudentVideosstandaloneapiservice.openapi.roomsUserListPermissions"
          }
        }
      },
      "prudentVideosstandaloneapiservice.openapi.roomsUserListPermissions": {
        "type": "object",
        "properties": {
          "publish": {
            "type": "boolean"
          },
          "subscribe": {
            "type": "boolean"
          },
          "record": {
            "type": "boolean"
          },
          "stats": {
            "type": "boolean"
          },
          "controlhandlers": {
            "type": "boolean"
          }
        }
      },
      "prudentVideostandaloneapiservice.openapi.videoRommListUserResponse": {
        "type": "object",
        "properties": {
          "result": {
            "format": "int32",
            "type": "integer"
          },
          "total": {
            "format": "int32",
            "type": "integer"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/prudentVideosstandaloneapiservice.openapi.roomsUserList"
            }
          }
        }

      },
      "prudentVideostandaloneapiservice.openapi.videoRommTokenResponse": {
        "type": "object",
        "properties": {
          "result": {
            "format": "int32",
            "type": "integer"
          },
          "token": {
            "type": "string",
            "description": "Token string for joining video room"
          }
        }

      },
      "prudentVideostandaloneapiservice.openapi.roomCreateToken": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the user to join video room"
          },
          "role": {
            "type": "string",
            "description": "Role of the user, joining video room"
          },
          "user_ref": {
            "type": "string",
            "description": "Room user ID for reference. Post call, reports include this data for your reference/reporting"
          }

        }

      },
      "prudentVideostandaloneapiservice.openapi.videoRommupdateResponse": {
        "type": "object",
        "properties": {
          "result": {
            "format": "int32",
            "type": "integer"
          }
        }

      },
      "prudentVideosstandaloneapiservice.openapi.updateroomSettings": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Any description info about your room"
          },
          "duration": {
            "type": "string",
            "format": "int32",
            "description": "Total duration of video room. Its required only for Scheduled Room."
          },
          "moderators": {
            "type": "string",
            "description": "Total number of moderator(s) allowed in the Room. 1 moderator is set by default."
          },
          "participants": {
            "type": "string",
            "description": "Total number of participants allowed in the room. This doesn’t count the Moderator. 1-50 (For Permanent & Adhoc Room), 1-300 (For Scheduled Rooms). 1-1000 (For Scheduled Rooms in Lecture Mode)"
          },
          "auto_recording": {
            "type": "boolean",
            "description": "If enabled, recordings gets started as soon as any participant publishes into the room. In Auto-Recording enabled sessions, Recording can be stopped and restarted manually using function calls."
          },
          "quality": {
            "type": "string",
            "description": "If your application setting and subscription allows HD streaming, you may opt to use either HD, SD or LD for a room. If not used, EnableX allows subscription based stream quality by default."
          }
        }

      },
      "prudentVideostandaloneapiservice.openapi.updateroom": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of Room or Topic of Meeting"
          },
          "settings": {
            "$ref": "#/components/schemas/prudentVideosstandaloneapiservice.openapi.updateroomSettings"
          },
          "data": {
            "$ref": "#/components/schemas/prudentVideosstandaloneapiservice.openapi.roomsData"
          },
          "sip": {
            "$ref": "#/components/schemas/prudentVideosstandaloneapiservice.openapi.roomsSip"
          }
        }

      },
      "prudentVideostandaloneapiservice.openapi.createVideoRommResponse": {

        "type": "object",
        "properties": {
          "result": {
            "format": "int32",
            "type": "integer"
          },
          "error": {
            "type": "array",
            "description": "Detailed error description"
          },
          "desc": {
            "type": "string",
            "description": "Error description"
          }

        }

      },
      "prudentVideostandaloneapiservice.openapi.room": {

        "type": "object",
        "properties": {
          "result": {
            "format": "int32",
            "type": "integer"
          },
          "room": {
            "type": "object",
            "$ref": "#/components/schemas/prudentVideosstandaloneapiservice.openapi.roomdata"
          }

        }

      },
      "prudentVideosstandaloneapiservice.openapi.roomdata": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of Room or Topic of Meeting"
          },
          "owner_ref": {
            "type": "string",
            "description": "Room owner ID for reference. Post call, reports include this data for your reference/reporting"
          },
          "settings": {
            "$ref": "#/components/schemas/prudentVideosstandaloneapiservice.openapi.roomSettings"
          },
          "data": {
            "$ref": "#/components/schemas/prudentVideosstandaloneapiservice.openapi.roomsData"
          },
          "sip": {
            "$ref": "#/components/schemas/prudentVideosstandaloneapiservice.openapi.roomsSip"
          }
        }

      },
      "prudentVideosstandaloneapiservice.openapi.roomSettings": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Any description info about your room"
          },
          "mode": {
            "type": "string",
            "description": "Type of Room for video meeting"
          },
          "scheduled": {
            "type": "boolean",
            "description": "Whether the video room is a permanent room or scheduled for a specific duration. Setting it false creates a permanent room."
          },
          "adhoc": {
            "type": "boolean",
            "description": "Whether the video room is for one time use. To create an adhoc room, you need to set it to true and settings.scheduled as false."
          },
          "duration": {
            "type": "string",
            "format": "int32",
            "description": "Total duration of video room. Its required only for Scheduled Room."
          },
          "moderators": {
            "type": "string",
            "description": "Total number of moderator(s) allowed in the Room. 1 moderator is set by default."
          },
          "participants": {
            "type": "string",
            "description": "Total number of participants allowed in the room. This doesn’t count the Moderator. 1-50 (For Permanent & Adhoc Room), 1-300 (For Scheduled Rooms). 1-1000 (For Scheduled Rooms in Lecture Mode)"
          },
          "auto_recording": {
            "type": "boolean",
            "description": "If enabled, recordings gets started as soon as any participant publishes into the room. In Auto-Recording enabled sessions, Recording can be stopped and restarted manually using function calls."
          },
          "quality": {
            "type": "string",
            "description": "If your application setting and subscription allows HD streaming, you may opt to use either HD, SD or LD for a room. If not used, EnableX allows subscription based stream quality by default."
          }
        }

      },
      "prudentVideostandaloneapiservice.openapi.ApiException": {
        "type": "object",
        "properties": {
          "result": {
            "type": "integer",
            "format": "int32",
            "description": "Zero indicate failure"
          },
          "error": {
            "type": "string",
            "description": "Detailed error description"
          },
          "desc": {
            "type": "string"
          }
        }

      },
      "prudentVideostandaloneapiservice.openapi.videoRommResponse": {

        "type": "object",
        "properties": {
          "result": {
            "format": "int32",
            "type": "integer"
          },
          "rooms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/prudentVideosstandaloneapiservice.openapi.rooms"
            }
          }

        }
      },
      "prudentVideosstandaloneapiservice.openapi.rooms": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of Room or Topic of Meeting"
          },
          "service_id": {
            "type": "string",
            "description": "Room service ID for internal system use"
          },
          "owner_ref": {
            "type": "string",
            "description": "Room owner ID for reference. Post call, reports include this data for your reference/reporting"
          },
          "settings": {
            "$ref": "#/components/schemas/prudentVideosstandaloneapiservice.openapi.roomsSettings"
          },
          "data": {
            "$ref": "#/components/schemas/prudentVideosstandaloneapiservice.openapi.roomsData"
          },
          "configured_media_zone": {
            "type": "string",
            "description": "Configured media zone"
          },
          "created": {
            "type": "string",
            "description": "Datetime of room creation"
          },
          "isMediaServerAvailable": {
            "type": "boolean",
            "description": "Is media server available"
          },
          "updated": {
            "type": "string",
            "description": "Datetime of room updation"
          },
          "room_id": {
            "type": "string",
            "description": "Room unique identifier"
          },
          "sip": {
            "$ref": "#/components/schemas/prudentVideosstandaloneapiservice.openapi.roomsSip"
          }
        }
      },
      "prudentVideosstandaloneapiservice.openapi.roomsSettings": {

        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Any description info about your room"
          },
          "mode": {
            "type": "string",
            "description": "Type of Room for video meeting"
          },
          "scheduled": {
            "type": "boolean",
            "description": "Whether the video room is a permanent room or scheduled for a specific duration. Setting it false creates a permanent room."
          },
          "scheduled_time": {
            "type": "string",
            "readOnly": true,
            "description": "Format: `YYYY-MM-DD HH:II:SS`. Applicable when scheduled is set to true. This is scheduled start time of the Room. Token will be issues before 15 minutes of start time. Token will not be issued beyond scheduled duration if no participant is available in the room."
          },
          "adhoc": {
            "type": "boolean",
            "description": "Whether the video room is for one time use. To create an adhoc room, you need to set it to true and settings.scheduled as false."
          },
          "duration": {
            "type": "string",
            "format": "int32",
            "description": "Total duration of video room. Its required only for Scheduled Room."
          },
          "moderators": {
            "type": "string",
            "description": "Total number of moderator(s) allowed in the Room. 1 moderator is set by default."
          },
          "participants": {
            "type": "string",
            "description": "Total number of participants allowed in the room. This doesn’t count the Moderator. 1-50 (For Permanent & Adhoc Room), 1-300 (For Scheduled Rooms). 1-1000 (For Scheduled Rooms in Lecture Mode)"
          },
          "auto_recording": {
            "type": "boolean",
            "description": "If enabled, recordings gets started as soon as any participant publishes into the room. In Auto-Recording enabled sessions, Recording can be stopped and restarted manually using function calls."
          },
          "active_talker": {
            "type": "boolean",
            "readOnly": true,
            "description": "If enabled, you can set how many streams you will have in active talkers."
          },
          "screen_share": {
            "type": "boolean",
            "readOnly": true,
            "description": "If you need Screen Share in a room, you may enable it."
          },
          "canvas": {
            "type": "boolean",
            "readOnly": true,
            "description": "If you need canvas streaming (Streaming with contents of HTML5 Canvas Object) in a room, you may enable it."
          },
          "knock": {
            "type": "boolean",
            "readOnly": true,
            "description": "If you need participant to wait before he is allowed by moderator to join a session, then enable knock feature."
          },
          "quality": {
            "type": "string",
            "description": "If your application setting and subscription allows HD streaming, you may opt to use either HD, SD or LD for a room. If not used, EnableX allows subscription based stream quality by default."
          },
          "billing_code": {
            "type": "string",
            "readOnly": true,
            "description": "This is for your applications owned reference"
          },
          "abwd": {
            "type": "boolean",
            "readOnly": true,
            "description": "If you need disable ABWD (Auto-Bandwidth Detection) in a Room."
          },
          "facex": {
            "type": "boolean",
            "readOnly": true,
            "description": "If you need carry out Face Recognition Analysis in this Room."
          },
          "max_active_talkers": {
            "type": "string",
            "readOnly": true,
            "description": "How many maximum streams you need in active talkers. Maximum 9 active talkers can be defined."
          }
        }
      },
      "prudentVideosstandaloneapiservice.openapi.roomsData": {
        "type": "object",
        "properties": {
          "custom_key": {
            "type": "string",
            "description": "You can define your own keys in this object. None of the keys and their values are validated by EnableX"
          }
        }
      },
      "prudentVideosstandaloneapiservice.openapi.roomsSip": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "This is to enable SIP Connection to the Room"
          }
        }
      },
      "prudentVoicestandaloneapiservice.openapi.campaignBaseLoad": {
        "type": "object",
        "properties": {
          "file": {
            "type": "file",
            "description": "File containing obd base"
          }
        }
      },
      "prudentVoicestandaloneapiservice.openapi.createCampaignResponse": {

        "properties": {
          "campaignKey": {
            "type": "string",
            "description": "Encrypted campaignKey"
          }

        }
      },
      "prudentVoicestandaloneapiservice.openapi.Create-Campaign": {
        "type": "object",
        "properties": {
          "flowid": {
            "type": "string",
            "description": "Encrypted flowid which will be available in site."
          },
          "fromdate": {
            "type": "string",
            "description": "From date in `YYYY-MM-DD` format"
          },
          "todate": {
            "type": "string",
            "description": "To date in `YYYY-MM-DD` format"
          },
          "fromtime": {
            "type": "string",
            "description": "From time"
          },
          "totime": {
            "type": "string",
            "description": "To time"
          },
          "dailtimeout": {
            "type": "number",
            "description": "Dail time out"
          },
          "name": {
            "type": "string",
            "description": "Campaign name"
          },
          "description": {
            "type": "string",
            "description": "description"
          },
          "retryintervaltype": {
            "type": "string",
            "description": "Retry Interval type, 0 - interval in mins , 1- interval in days"
          },
          "retryintervalvalue": {
            "type": "string",
            "description": "Retry interval valueInterval in minutes / Days"
          },
          "retrycount": {
            "type": "string",
            "description": "Number of times to retry"
          }

        }

      },
      "prudent.openapi.Voice.call-response": {
        "properties": {
          "RespId": {
            "type": "string",
            "description": "Response Id"
          },
          "Response": {
            "type": "string",
            "description": "success message."
          },
          "ReqId": {
            "type": "string",
            "description": "Id of the request"
          }

        }
      },
      "prudentVoicestandaloneapiservice.openapi.SingleMessageInfo": {
        "type": "object",
        "properties": {
          "status": {
            "type": "number",
            "description": "One for success"
          },
          "message": {
            "type": "object",
            "$ref": "#/components/schemas/prudent.openapi.Voice.call-response"
          },
          "requestid": {
            "type": "string",
            "description": "Id of the request"
          }
        }
      },
      "prudentVoicestandaloneapiservice.openapi.Call": {
        "type": "object",
        "properties": {
          "Cli": {
            "type": "string",
            "description": "Number from which call to be initiated."
          },
          "apartyno": {
            "type": "string",
            "description": "First Number to Dial"
          },
          "bpartyno": {
            "type": "string",
            "description": "Second number to Dial"
          },
          "reference_id": {
            "type": "string",
            "description": "Reference Id for Request Identification."
          }

        }

      },
      "prudentwhatsappstandaloneapiservice.openapi.PullReportResponse": {
        "type": "object",
        "properties": {
          "seenTime": {
            "type": "string",
            "format": "date-time",
            "description": "Tells when the message was seen."
          },
          "sentTime": {
            "type": "string",
            "format": "date-time",
            "description": "Tells when the message was sent."
          },
          "messageId": {
            "type": "string",
            "description": "The ID that uniquely identifies the received message"
          },
          "deliveredTime": {
            "type": "string",
            "format": "date-time",
            "description": "Tells when the message was delivered."
          }

        }
      },
      "infobippushko.openapi.ott.PullReport": {
        "type": "object",
        "properties": {
          "Pull with message id": {
            "type": "object",
            "description": "Number of returned messages in this request.",
            "$ref": "#/components/schemas/infobippushko.openapi.whatsapp.PullreportWithMessageId"
          },
          "Pull with date": {
            "type": "object",
            "description": "Number of returned messages in this request.",
            "$ref": "#/components/schemas/infobippushko.openapi.whatsapp.PullreportWithDate"
          }
        }
      },
      "infobippushko.openapi.whatsapp.PullreportWithMessageId": {
        "type": "object",
        "properties": {
          "MessageId": {
            "type": "string",
            "description": "The ID that uniquely identifies the received message."
          }

        }
      },
      "infobippushko.openapi.whatsapp.PullreportWithDate": {
        "type": "object",
        "properties": {
          "fromTime": {
            "type": "string",
            "description": "From time in `DD-MM-YYYY HR:MM:SS` format"
          },
          "toTime": {
            "type": "string",
            "description": "To time in `DD-MM-YYYY HR:MM:SS` format"
          }

        }
      },
      "infobippushko.openapi.whatsapp.InboundRCSMessageResult": {
        "type": "object",
        "allOf": [
          {
            "properties": {
              "results": {
                "type": "array",
                "description": "Collection of reports, one per every received message.",
                "items": {
                  "$ref": "#/components/schemas/infobippushko.openapi.whatsapp.InboundRCSMessageData"
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/infobippushko.openapi.infobip.api.models.MessageCount"
          }
        ]
      },
      "infobippushko.openapi.whatsapp.InboundRCSMessageBase": {
        "type": "object",
        "properties": {
          "From": {
            "type": "string",
            "description": "Number which sent the message.",
            "readOnly": false,
            "writeOnly": true
          },
          "To": {
            "type": "string",
            "description": "Sender provided during the activation process.",
            "readOnly": false,
            "writeOnly": true
          },
          "receivedAt": {
            "type": "string",
            "description": "Tells when Prudent platform received the message.",
            "format": "date-time",
            "readOnly": false,
            "writeOnly": true
          },
          "MessageId": {
            "type": "string",
            "description": "The ID that uniquely identifies the received message.",
            "readOnly": false,
            "writeOnly": true
          },
          "pairedMessageId": {
            "type": "string"
          },
          "callbackData": {
            "type": "string"
          },
          "Price": {
            "description": "Message price.",
            "type": "number",
            "format": "double",
            "readOnly": false,
            "writeOnly": true
          },
          "IntegrationType": {
            "type": "string",
            "description": "communication medium",
            "readOnly": false,
            "writeOnly": true
          }
        }
      },
      "infobippushko.openapi.whatsapp.InboundRCSMessageData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/infobippushko.openapi.whatsapp.InboundRCSMessageBase"
          },
          {
            "type": "object",
            "properties": {
              "Message": {
                "$ref": "#/components/schemas/infobippushko.openapi.whatsapp.InboundRCSMessage"
              }
            }
          }
        ]
      },
      "infobippushko.openapi.whatsapp.InboundRCSMessage": {
        "title": "MoMessage",
        "type": "object",
        "properties": {
          "Type": {
            "$ref": "#/components/schemas/infobippushko.openapi.RCS.Type"
          }
        },
        "discriminator": {
          "propertyName": "Type",
          "mapping": {
            "TEXT": "#/components/schemas/infobippushko.openapi.RCS.InboundTextMessage",
            "FILE": "#/components/schemas/infobippushko.openapi.RCS.InboundFileMessage",
            "SUGGESTION": "#/components/schemas/infobippushko.openapi.RCS.InboundSuggestionMessage"
          }
        }
      },
      "infobippushko.openapi.RCS.Type": {
        "title": "Type",
        "type": "string",
        "description": "Type of the message content. Select the type from the dropbox to view their parameters.",
        "enum": [ "TEXT", "FILE", "SUGGESTION" ]
      },
      "infobippushko.openapi.RCS.InboundTextMessage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/infobippushko.openapi.whatsapp.InboundRCSMessage"
          },
          {
            "type": "object",
            "properties": {
              "Text": {
                "type": "string",
                "description": "The text which is sent in an incoming message.",
                "readOnly": false,
                "writeOnly": true
              }
            }
          }
        ]
      },
      "infobippushko.openapi.RCS.InboundFileMessage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/infobippushko.openapi.whatsapp.InboundRCSMessage"
          },
          {
            "type": "object",
            "properties": {

              "url": {
                "type": "string",
                "description": "URL of the file which is sent in an incoming message.",
                "readOnly": false,
                "writeOnly": true
              },
              "name": {
                "type": "string",
                "description": "Name of a file which is sent in an incoming message.",
                "readOnly": false,
                "writeOnly": true
              },
              "contentType": {
                "type": "string",
                "description": "Content type of a file which is sent in an incoming message.",
                "readOnly": false,
                "writeOnly": true
              },
              "size": {
                "type": "number ",
                "format": "int64",
                "description": "Size of the file which is sent in an incoming message. Minimum value is 0. Size of file is considered to be expressed in bytes.",
                "readOnly": false,
                "writeOnly": true
              }
            }
          }
        ]
      },
      "infobippushko.openapi.RCS.InboundSuggestionMessage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/infobippushko.openapi.whatsapp.InboundRCSMessage"
          },
          {
            "type": "object",
            "properties": {
              "Text": {
                "type": "string",
                "description": "Incoming suggestion text.",
                "readOnly": false,
                "writeOnly": true
              },
              "postbackData": {
                "type": "string",
                "description": "postbackData of incoming suggestion.",
                "readOnly": false,
                "writeOnly": true
              }
            }
          }
        ]
      },
      "infobippushko.openapi.whatsapp.InboundMessageResult": {
        "type": "object",
        "allOf": [
          {
            "properties": {
              "results": {
                "type": "array",
                "description": "Collection of reports, one per every received message.",
                "items": {
                  "$ref": "#/components/schemas/infobippushko.openapi.whatsapp.InboundMessageData"
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/infobippushko.openapi.infobip.api.models.MessageCount"
          }
        ]
      },
      "infobippushko.openapi.infobip.api.models.MessageCount": {
        "type": "object",
        "properties": {
          "messageCount": {
            "type": "string",
            "description": "The ID that uniquely identifies the received message.",
            "format": "integer",
            "readOnly": false,
            "writeOnly": true
          },
          "pendingMessageCount": {
            "type": "number",
            "description": "Number of remaining new messages on Prudent servers ready to be returned in the next request.",
            "format": "integer",
            "readOnly": false,
            "writeOnly": true
          }
        }
      },
      "infobippushko.openapi.whatsapp.InboundMessageBase": {
        "type": "object",
        "properties": {
          "From": {
            "type": "string",
            "description": "Number which sent the message.",
            "readOnly": false,
            "writeOnly": true
          },
          "To": {
            "type": "string",
            "description": "Sender provided during the activation process.",
            "readOnly": false,
            "writeOnly": true
          },
          "Price": {
            "description": "Message price.",
            "type": "number",
            "format": "double",
            "readOnly": false,
            "writeOnly": true
          },
          "MessageId": {
            "type": "string",
            "description": "The ID that uniquely identifies the received message.",
            "readOnly": false,
            "writeOnly": true
          },
          "ReceivedAt": {
            "type": "string",
            "description": "Tells when Prudent platform received the message.",
            "format": "date-time",
            "readOnly": false,
            "writeOnly": true
          },
          "IntegrationType": {
            "type": "string",
            "description": "communication medium",
            "readOnly": false,
            "writeOnly": true
          }
        }
      },
      "infobippushko.openapi.whatsapp.InboundMessageData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/infobippushko.openapi.whatsapp.InboundMessageBase"
          },
          {
            "type": "object",
            "properties": {
              "Message": {
                "$ref": "#/components/schemas/infobippushko.openapi.whatsapp.InboundMessage"
              },
              "Contact": {
                "description": "Information about recipient.",
                "readOnly": false,
                "writeOnly": true,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/infobippushko.openapi.whatsapp.ContactName"
                  }
                ]
              }
            }
          }
        ]
      },
      "infobippushko.openapi.whatsapp.InboundMessage": {
        "title": "MoMessage",
        "type": "object",
        "properties": {
          "Type": {
            "$ref": "#/components/schemas/infobippushko.openapi.whatsapp.Type"
          }
        },
        "discriminator": {
          "propertyName": "Type",
          "mapping": {
            "TEXT": "#/components/schemas/infobippushko.openapi.whatsapp.InboundTextMessage",
            "IMAGE": "#/components/schemas/infobippushko.openapi.whatsapp.InboundImageMessage",
            "DOCUMENT": "#/components/schemas/infobippushko.openapi.whatsapp.InboundDocumentMessage",
            "STICKER": "#/components/schemas/infobippushko.openapi.whatsapp.InboundStickerMessage",
            "LOCATION": "#/components/schemas/infobippushko.openapi.whatsapp.InboundLocationMessage",
            "CONTACT": "#/components/schemas/infobippushko.openapi.whatsapp.InboundContactMessage",
            "VIDEO": "#/components/schemas/infobippushko.openapi.whatsapp.InboundVideoMessage",
            "AUDIO": "#/components/schemas/infobippushko.openapi.whatsapp.InboundAudioMessage"
          }
        }
      },
      "infobippushko.openapi.whatsapp.ContactName": {
        "title": "Contact",
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Contact name",
            "readOnly": false,
            "writeOnly": true
          }
        }
      },
      "infobippushko.openapi.whatsapp.InboundStickerMessage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/infobippushko.openapi.whatsapp.InboundMessage"
          },
          {
            "type": "object",
            "properties": {
              "Url": {
                "type": "string",
                "description": "Url for media download.",
                "readOnly": false,
                "writeOnly": true
              }
            }
          }
        ]
      },
      "infobippushko.openapi.whatsapp.InboundDocumentMessage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/infobippushko.openapi.whatsapp.InboundMessage"
          },
          {
            "$ref": "#/components/schemas/infobippushko.openapi.whatsapp.Media"
          }
        ]
      },
      "infobippushko.openapi.whatsapp.InboundImageMessage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/infobippushko.openapi.whatsapp.InboundMessage"
          },
          {
            "$ref": "#/components/schemas/infobippushko.openapi.whatsapp.Media"
          }
        ]
      },
      "infobippushko.openapi.whatsapp.InboundLocationMessage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/infobippushko.openapi.whatsapp.InboundMessage"
          },
          {
            "required": [ "latitude", "longitude" ],
            "type": "object",
            "properties": {
              "Longitude": {
                "type": "number",
                "description": "Longitude. The value must be between -90 and 90.",
                "format": "double",
                "readOnly": false,
                "writeOnly": true
              },
              "Latitude": {
                "type": "number",
                "description": "Latitude. The value must be between -180 and 180.",
                "format": "double",
                "readOnly": false,
                "writeOnly": true
              },
              "Name": {
                "type": "string",
                "description": "Location name.",
                "readOnly": false,
                "writeOnly": true
              },
              "Address": {
                "type": "string",
                "description": "Location address.",
                "readOnly": false,
                "writeOnly": true
              },
              "Url": {
                "type": "string",
                "description": "Location URL.",
                "readOnly": false,
                "writeOnly": true
              }
            }
          }
        ]
      },
      "infobippushko.openapi.whatsapp.InboundContactMessage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/infobippushko.openapi.whatsapp.InboundMessage"
          },
          {
            "type": "object",
            "properties": {
              "Contacts": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.ContactContent"
                }
              }
            }
          }
        ]
      },
      "infobippushko.openapi.whatsapp.InboundVideoMessage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/infobippushko.openapi.whatsapp.InboundMessage"
          },
          {
            "$ref": "#/components/schemas/infobippushko.openapi.whatsapp.Media"
          }
        ]
      },
      "infobippushko.openapi.whatsapp.InboundAudioMessage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/infobippushko.openapi.whatsapp.InboundMessage"
          },
          {
            "$ref": "#/components/schemas/infobippushko.openapi.whatsapp.Media"
          }
        ]
      },
      "infobippushko.openapi.whatsapp.Media": {
        "title": "Media",
        "type": "object",
        "properties": {
          "Caption": {
            "type": "string",
            "description": "Media Caption.",
            "readOnly": false,
            "writeOnly": true
          },
          "Url": {
            "type": "string",
            "description": "Url for media download.",
            "readOnly": false,
            "writeOnly": true
          }
        }
      },
      "infobippushko.openapi.whatsapp.InboundTextMessage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/infobippushko.openapi.whatsapp.InboundMessage"
          },
          {
            "type": "object",
            "properties": {
              "Text": {
                "type": "string",
                "description": "Content of the end user message.",
                "readOnly": false,
                "writeOnly": true
              }
            }
          }
        ]
      },
      "infobippushko.openapi.whatsapp.Type": {
        "title": "Type",
        "type": "string",
        "description": "Type of the message content. Select the type from the dropbox to view their parameters.",
        "enum": [ "TEXT", "IMAGE", "DOCUMENT", "STICKER", "LOCATION", "CONTACT", "VIDEO", "AUDIO" ]
      },
      "infobippushko.openapi.whatsapp.DeliveryResult": {
        "title": "whatsappDlrReportsResponse",
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "description": "Collection of reports, one per every message.",
            "readOnly": false,
            "writeOnly": true,
            "items": {
              "$ref": "#/components/schemas/infobippushko.openapi.whatsapp.DeliveryReport"
            }
          }
        }
      },
      "infobippushko.openapi.whatsapp.DeliveryReport": {
        "type": "object",
        "properties": {
          "BulkId": {
            "type": "string",
            "description": "The ID that uniquely identifies the request.",
            "readOnly": false,
            "writeOnly": true
          },
          "Price": {
            "description": "Sent message price.",
            "readOnly": false,
            "writeOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/infobippushko.openapi.infobip.api.models.Price"
              }
            ]
          },
          "Status": {
            "description": "Indicates whether the message is successfully sent, not sent, delivered, not delivered, waiting for delivery or any other possible status.",
            "readOnly": false,
            "writeOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/infobippushko.openapi.infobip.api.models.Status"
              }
            ]
          },
          "Error": {
            "description": "Indicates whether the error occurred during the query execution.",
            "readOnly": false,
            "writeOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/infobippushko.openapi.infobip.api.models.Error"
              }
            ]
          },
          "MessageId": {
            "type": "string",
            "description": "The ID that uniquely identifies the message sent.",
            "readOnly": false,
            "writeOnly": true
          },
          "DoneAt": {
            "type": "string",
            "description": "Tells when the message was finished processing by Infobip (ie. delivered to destination, delivered to destination network, etc.).",
            "format": "date-time",
            "readOnly": false,
            "writeOnly": true
          },
          "MessageCount": {
            "type": "integer",
            "description": "The number of sent message segments.",
            "format": "int32",
            "readOnly": false,
            "writeOnly": true
          },
          "SentAt": {
            "type": "string",
            "description": "Tells when the message was sent. Has the following format: ",
            "format": "date-time",
            "readOnly": false,
            "writeOnly": true
          },
          "To": {
            "type": "string",
            "description": "The message destination address.",
            "readOnly": false,
            "writeOnly": true
          }
        }
      },
      "infobippushko.openapi.infobip.api.models.Status": {
        "title": "Status",
        "type": "object",
        "properties": {
          "GroupName": {
            "type": "string",
            "description": "Group name for the status.",
            "readOnly": false,
            "writeOnly": true
          },
          "Id": {
            "type": "integer",
            "description": "Status ID.",
            "format": "int32",
            "readOnly": false,
            "writeOnly": true
          },
          "GroupId": {
            "type": "integer",
            "description": "Status group ID.",
            "format": "int32",
            "readOnly": false,
            "writeOnly": true
          },
          "Name": {
            "type": "string",
            "description": "Status name.",
            "readOnly": false,
            "writeOnly": true
          },
          "Action": {
            "type": "string",
            "description": "Action that should be taken to fix the error.",
            "readOnly": false,
            "writeOnly": true
          },
          "Description": {
            "type": "string",
            "description": "Human-readable description of the status.",
            "readOnly": false,
            "writeOnly": true
          }
        }
      },
      "infobippushko.openapi.infobip.api.models.Error": {
        "title": "Error",
        "type": "object",
        "properties": {
          "Description": {
            "type": "string",
            "description": "Human-readable description of the error.",
            "readOnly": false,
            "writeOnly": true
          },
          "Permanent": {
            "type": "boolean",
            "description": "Indicates whether the error is permanent.",
            "readOnly": false,
            "writeOnly": true
          },
          "Name": {
            "type": "string",
            "description": "Error name.",
            "readOnly": false,
            "writeOnly": true
          },
          "Id": {
            "type": "integer",
            "description": "Error ID.",
            "format": "int32",
            "readOnly": false,
            "writeOnly": true
          },
          "GroupName": {
            "type": "string",
            "description": "Error group name.",
            "readOnly": false,
            "writeOnly": true
          },
          "GroupId": {
            "type": "integer",
            "description": "Error group ID.",
            "format": "int32",
            "readOnly": false,
            "writeOnly": true
          }
        }
      },
      "infobippushko.openapi.infobip.api.models.Price": {
        "title": "Price",
        "type": "object",
        "properties": {
          "Currency": {
            "type": "string",
            "description": "The currency in which the price is displayed.",
            "readOnly": false,
            "writeOnly": true
          },
          "PricePerMessage": {
            "type": "number",
            "description": "The price per individual  message.",
            "format": "double",
            "readOnly": false,
            "writeOnly": true
          }
        }
      },
      "infobiprcsapi.openapi.com.infobip.rcs.api.bulk.RcsBulkSendRequest": {
        "title": "RcsBulkSendRequest",
        "type": "object",
        "properties": {
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/infobiprcsapi.openapi.com.infobip.rcs.api.single.RcsSendRequest"
            }
          }
        }
      },
      "infobiprcsapi.openapi.SingleMessageInfo": {
        "type": "object",
        "properties": {
          "to": {
            "type": "string",
            "description": "Message destination.",
            "example": "385977666618"
          },
          "messageCount": {
            "type": "integer",
            "description": "Number of messages required to deliver.",
            "format": "int32",
            "example": 1
          },
          "messageId": {
            "type": "string",
            "description": "The ID that uniquely identifies the message sent.",
            "example": "06df139a-7eb5-4a6e-902e-40e892210455"
          },
          "status": {
            "$ref": "#/components/schemas/infobiprcsapi.openapi.SingleMessageStatus"
          }
        }
      },
      "infobiprcsapi.openapi.SingleMessageStatus": {
        "type": "object",
        "properties": {
          "groupId": {
            "type": "integer",
            "description": "Status group ID.",
            "format": "int32",
            "example": 1
          },
          "groupName": {
            "type": "string",
            "description": "Status group name.",
            "example": "PENDING"
          },
          "id": {
            "type": "integer",
            "description": "Status ID.",
            "format": "int32",
            "example": 7
          },
          "name": {
            "type": "string",
            "description": "Status name.",
            "example": "PENDING_ENROUTE"
          },
          "description": {
            "type": "string",
            "description": "Human-readable description of the status.",
            "example": "Message sent to next instance"
          },
          "action": {
            "type": "string",
            "description": "Action that should be taken to eliminate the error."
          }
        }
      },
      "infobiprcsapi.openapi.ApiRequestError": {
        "type": "object",
        "properties": {
          "serviceException": {
            "$ref": "#/components/schemas/infobiprcsapi.openapi.ApiRequestErrorDetails"
          }
        }
      },
      "infobiprcsapi.openapi.ApiRequestErrorDetails": {
        "type": "object",
        "properties": {
          "messageId": {
            "type": "string",
            "description": "Uniquely identifies the message sent",
            "example": "06df139a-7eb5-4a6e-902e-40e892210455"
          },
          "text": {
            "type": "string",
            "description": "Error description",
            "example": "Bad request"
          },
          "validationErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "description": "Map of validation errors",
              "example": "jhjht",
              "items": {
                "type": "string",
                "description": "Map of validation errors",
                "example": "rtyry"
              }
            },
            "description": "Map of validation errors",
            "example": "tryry"
          }
        }
      },
      "infobiprcsapi.openapi.TextRcsMtContent": {
        "required": [ "text" ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/infobiprcsapi.openapi.RcsMtContent"
          },
          {
            "type": "object",
            "properties": {
              "text": {
                "maxLength": 1000,
                "minLength": 1,
                "type": "string",
                "description": "Message text"
              },
              "suggestions": {
                "type": "array",
                "description": "List of suggestions",
                "items": {
                  "$ref": "#/components/schemas/infobiprcsapi.openapi.Suggestion"
                }
              }
            }
          }
        ]
      },
      "infobiprcsapi.openapi.Suggestion": {
        "required": [ "postbackData", "text" ],
        "type": "object",
        "properties": {
          "text": {
            "maxLength": 25,
            "minLength": 1,
            "type": "string",
            "description": "Suggestion text",
            "example": "Pick one!"
          },
          "postbackData": {
            "maxLength": 2048,
            "minLength": 1,
            "type": "string",
            "description": "Value which is going to be sent as a reply to a suggestion",
            "example": "REPLY"
          },
          "type": {
            "type": "string",
            "enum": [ "REPLY", "OPEN_URL", "DIAL_PHONE", "SHOW_LOCATION", "REQUEST_LOCATION" ]
          }
        },
        "description": "List of suggestions that will be sent in card",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "REPLY": "#/components/schemas/infobiprcsapi.openapi.ReplySuggestion",
            "OPEN_URL": "#/components/schemas/infobiprcsapi.openapi.OpenUrlSuggestion",
            "DIAL_PHONE": "#/components/schemas/infobiprcsapi.openapi.DialPhoneSuggestion",
            "SHOW_LOCATION": "#/components/schemas/infobiprcsapi.openapi.ShowLocationSuggestion",
            "REQUEST_LOCATION": "#/components/schemas/infobiprcsapi.openapi.RequestLocationSuggestion"
          }
        }
      },
      "infobiprcsapi.openapi.FileRcsMtContent": {
        "required": [ "file" ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/infobiprcsapi.openapi.RcsMtContent"
          },
          {
            "type": "object",
            "properties": {
              "file": {
                "$ref": "#/components/schemas/infobiprcsapi.openapi.Resource"
              },
              "thumbnail": {
                "$ref": "#/components/schemas/infobiprcsapi.openapi.Resource"
              }
            }
          }
        ]
      },
      "infobiprcsapi.openapi.CardRcsMtContent": {
        "required": [ "alignment", "content", "orientation" ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/infobiprcsapi.openapi.RcsMtContent"
          },
          {
            "type": "object",
            "properties": {
              "orientation": {
                "type": "string",
                "description": "Orientation type defines orientation in Card message",
                "enum": [ "HORIZONTAL", "VERTICAL" ]
              },
              "alignment": {
                "type": "string",
                "description": "Alignment type defines alignment in Card message",
                "enum": [ "LEFT", "RIGHT" ]
              },
              "content": {
                "$ref": "#/components/schemas/infobiprcsapi.openapi.CardContent"
              },
              "suggestions": {
                "type": "array",
                "description": "List of suggestions",
                "items": {
                  "$ref": "#/components/schemas/infobiprcsapi.openapi.Suggestion"
                }
              }
            }
          }
        ]
      },
      "infobiprcsapi.openapi.CarouselRcsMtContent": {
        "required": [ "cardWidth", "contents" ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/infobiprcsapi.openapi.RcsMtContent"
          },
          {
            "type": "object",
            "properties": {
              "cardWidth": {
                "type": "string",
                "description": "Width of cards contained within the carousel",
                "example": "MEDIUM",
                "enum": [ "SMALL", "MEDIUM" ]
              },
              "contents": {
                "maxItems": 10,
                "minItems": 2,
                "type": "array",
                "description": "An array of cards contained within the carousel",
                "items": {
                  "$ref": "#/components/schemas/infobiprcsapi.openapi.CardContent"
                }
              },
              "suggestions": {
                "type": "array",
                "description": "List of suggestions",
                "items": {
                  "$ref": "#/components/schemas/infobiprcsapi.openapi.Suggestion"
                }
              }
            }
          }
        ]
      },
      "infobiprcsapi.openapi.ReplySuggestion": {
        "required": [ "postbackData", "text" ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/infobiprcsapi.openapi.Suggestion"
          }
        ]
      },
      "infobiprcsapi.openapi.OpenUrlSuggestion": {
        "required": [ "postbackData", "text", "url" ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/infobiprcsapi.openapi.Suggestion"
          },
          {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "description": "URL that will be opened on mobile phone when the suggestion is selected",
                "example": "https://www.infobip.com"
              }
            }
          }
        ]
      },
      "infobiprcsapi.openapi.DialPhoneSuggestion": {
        "required": [ "postbackData", "text" ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/infobiprcsapi.openapi.Suggestion"
          },
          {
            "type": "object",
            "properties": {
              "phoneNumber": {
                "pattern": "hfdh",
                "type": "string",
                "description": "Valid phone number",
                "example": "385977666618"
              }
            }
          }
        ]
      },
      "infobiprcsapi.openapi.ShowLocationSuggestion": {
        "required": [ "latitude", "longitude", "postbackData", "text" ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/infobiprcsapi.openapi.Suggestion"
          },
          {
            "type": "object",
            "properties": {
              "latitude": {
                "maximum": 90,
                "minimum": -90,
                "type": "number",
                "description": "Latitude of the location",
                "format": "double",
                "example": 45.793418
              },
              "longitude": {
                "maximum": 180,
                "minimum": -180,
                "type": "number",
                "description": "Longitude of the location",
                "format": "double",
                "example": 15.946297
              },
              "label": {
                "maxLength": 100,
                "minLength": 1,
                "type": "string",
                "description": "Label of the location",
                "example": "Navigate to our office"
              }
            }
          }
        ]
      },
      "infobiprcsapi.openapi.Resource": {
        "required": [ "url" ],
        "type": "object",
        "properties": {
          "url": {
            "maxLength": 1000,
            "minLength": 1,
            "type": "string",
            "description": "URL of the given resource",
            "example": "https://www.infobip.com/infobip-logo.png"
          }
        },
        "description": "Resource object describing the thumbnail of the card"
      },
      "infobiprcsapi.openapi.CardContent": {
        "type": "object",
        "properties": {
          "title": {
            "maxLength": 200,
            "minLength": 1,
            "type": "string",
            "description": "Title of the card, displayed as bolded text",
            "example": "Card title"
          },
          "description": {
            "maxLength": 2000,
            "minLength": 1,
            "type": "string",
            "description": "Description of the card, displayed as regular text",
            "example": "Some supercool, attention-grabbing description"
          },
          "media": {
            "$ref": "#/components/schemas/infobiprcsapi.openapi.CardMedia"
          },
          "suggestions": {
            "maxItems": 4,
            "minItems": 0,
            "type": "array",
            "description": "List of suggestions that will be sent in card",
            "items": {
              "$ref": "#/components/schemas/infobiprcsapi.openapi.Suggestion"
            }
          }
        },
        "description": "An array of cards contained within the carousel"
      },
      "infobiprcsapi.openapi.RcsApiResponse": {
        "required": [ "messages" ],
        "type": "object",
        "properties": {
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/infobiprcsapi.openapi.SingleMessageInfo"
            }
          }
        }
      },
      "infobiprcsapi.openapi.ApiException": {
        "type": "object",
        "properties": {
          "requestError": {
            "$ref": "#/components/schemas/infobiprcsapi.openapi.ApiRequestError"
          }
        }
      },
      "infobiprcsapi.openapi.com.infobip.rcs.api.single.RcsSendRequest": {
        "title": "RcsSendRequest",
        "required": [ "content", "to" ],
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "Message sender",
            "example": "myRcsSender"
          },
          "to": {
            "type": "string",
            "description": "Message destination",
            "example": "385977666618"
          },

          "content": {
            "$ref": "#/components/schemas/infobiprcsapi.openapi.RcsMtContent"
          },
          "callbackData": {
            "type": "string",
            "description": "Custom client data that will be included in Delivery Report."
          },
          "messageId": {
            "type": "string",
            "description": "MessageId data that will be included in Delivery Report."
          }
        }
      },
      "infobiprcsapi.openapi.RcsMtContent": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Message type, describing type of message which is going to be sent over RCS",
            "enum": [ "TEXT", "FILE", "CARD", "CAROUSEL" ]
          }
        },
        "description": "Rcs message contents",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "TEXT": "#/components/schemas/infobiprcsapi.openapi.TextRcsMtContent",
            "FILE": "#/components/schemas/infobiprcsapi.openapi.FileRcsMtContent",
            "CARD": "#/components/schemas/infobiprcsapi.openapi.CardRcsMtContent",
            "CAROUSEL": "#/components/schemas/infobiprcsapi.openapi.CarouselRcsMtContent"
          }
        }
      },
      "infobiprcsapi.openapi.SmsFailoverRequest": {
        "required": [ "from", "text" ],
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "Message failover sender",
            "example": "myFailoverRcsSender"
          },
          "text": {
            "type": "string",
            "description": "Message failover text",
            "example": "This message was sent over SMS."
          },
          "validityPeriod": {
            "type": "integer",
            "description": "Message failover validity period",
            "format": "int32",
            "example": 15
          },
          "validityPeriodTimeUnit": {
            "type": "string",
            "description": "Message failover validity period time unit",
            "example": "MINUTES",
            "enum": [ "SECONDS", "MINUTES", "HOURS", "DAYS" ]
          }
        },
        "description": "Sms failover message contents"
      },
      "prudentwhatsapptemplatemanagement.openapi.ApiException": {
        "type": "object",
        "properties": {
          "requestError": {
            "$ref": "#/components/schemas/prudentwhatsapptemplatemanagement.openapi.ApiRequestError"
          }
        }
      },
      "prudentwhatsapptemplatemanagement.openapi.ApiRequestError": {
        "type": "object",
        "properties": {
          "serviceException": {
            "$ref": "#/components/schemas/prudentwhatsapptemplatemanagement.openapi.ApiRequestErrorDetails"
          }
        }
      },
      "prudentwhatsapptemplatemanagement.openapi.ApiRequestErrorDetails": {
        "type": "object",
        "properties": {
          "messageId": {
            "type": "string",
            "description": "Uniquely identifies the message sent",
            "example": "06df139a-7eb5-4a6e-902e-40e892210455"
          },
          "text": {
            "type": "string",
            "description": "Detailed error description",
            "example": "Bad request"
          },
          "validationErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "description": "Map of validation errors",
              "example": "request.message.content.media.file.url: [is not a valid url]",
              "items": {
                "type": "string",
                "description": "Map of validation errors",
                "example": "request.message.content.media.file.url: [is not a valid url]"
              }
            },
            "description": "Map of validation errors",
            "example": "request.message.content.media.file.url: [is not a valid url]"
          }
        }
      },
      "prudentwhatsappstandaloneapiservice.openapi.ApiException": {
        "type": "object",
        "properties": {
          "status": {
            "type": "Intiger",
            "description": "Zero indicate failure"
          },
          "message": {
            "type": "string",
            "description": "Detailed error description"
          }
        }
      },
      "prudentwhatsappstandaloneapiservice.openapi.templateList": {
        "type": "object",
        "properties": {
          "total": {
            "type": "String",
            "description": "Indicate total number of templates"
          },
          "waba_templates": {
            "type": "Array",
            "description": "List out details of templates"
          }
        }
      },
      "prudentwhatsappstandaloneapiservice.openapi.FailoverMessage": {
        "required": [ "Content", "From", "To", "MessageId" ],
        "type": "object",
        "properties": {
          "From": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string",
            "description": "Registered WhatsApp sender number. Must be in international format and comply with WhatsApps requirements."
          },
          "To": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string",
            "description": "Message recipient number. Must be in international format and comply with WhatsApps requirements."
          },
          "MessageId": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "The ID that uniquely identifies the message sent."
          },
          "Content": {
            "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.TemplateContent"
          },
          "CallBackData": {
            "maxLength": 4000,
            "minLength": 0,
            "type": "string",
            "description": "Custom client data that will be included in a Delivery Report"
          },

          "SmsFailover": {
            "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.Failover"
          }
        },
        "description": "An array of messages being sent."
      },
      "prudentwhatsappstandaloneapiservice.openapi.TemplateFooterContent": {
        "required": [ "From", "Text" ],
        "type": "object",
        "properties": {
          "From": {
            "maxLength": 24,
            "minLength": 1,
            "type": "string",
            "description": "SMS sender number. Must be in international format."
          },
          "Text": {
            "maxLength": 4096,
            "minLength": 1,
            "type": "string",
            "description": "Content of the SMS that will be sent."
          }
        },
        "description": "SMS message to be sent if the WhatsApp template message could not be delivered."
      },
      "prudentwhatsappstandaloneapiservice.openapi.Failover": {
        "required": [ "From", "Text" ],
        "type": "object",
        "properties": {
          "From": {
            "maxLength": 24,
            "minLength": 1,
            "type": "string",
            "description": "SMS sender number. Must be in international format."
          },
          "Text": {
            "maxLength": 4096,
            "minLength": 1,
            "type": "string",
            "description": "Content of the SMS that will be sent."
          }
        },
        "description": "SMS message to be sent if the WhatsApp template message could not be delivered."
      },
      "prudentwhatsappstandaloneapiservice.openapi.TemplateContent": {
        "required": [ "Language", "TemplateData", "TemplateName" ],
        "type": "object",
        "properties": {
          "TemplateName": {
            "maxLength": 512,
            "minLength": 1,
            "type": "string",
            "description": "Template name. Should only contain lowercase alphanumeric characters and underscores."
          },
          "TemplateData": {
            "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.TemplateDataContent"
          },
          "Language": {
            "type": "string",
            "description": "The code of language or locale to use. Must be the same code used when registering the template."
          }
        },
        "description": "The content object to build a message that will be sent."
      },
      "prudentwhatsappstandaloneapiservice.openapi.TemplateButtonContent": {
        "required": [ "Type" ],
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          }
        },
        "description": "Template buttons. Should be defined in correct order, only if `quick reply` or `dynamic URL` buttons have been registered. It can have up to three `quick reply` buttons or only one `dynamic URL` button.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "QUICK_REPLY": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.TemplateQuickReplyButtonContent",
            "URL": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.TemplateUrlButtonContent"
          }
        }
      },
      "prudentwhatsappstandaloneapiservice.openapi.TextMessage": {
        "required": [ "Content", "From", "To", "MessageId" ],
        "type": "object",
        "properties": {
          "From": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string",
            "description": "Registered WhatsApp sender number. Must be in international format and comply with WhatsApps requirements"
          },
          "To": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string",
            "description": "Message recipient number. Must be in international format and comply with WhatsApps requirements."
          },
          "MessageId": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "The ID that uniquely identifies the message sent."
          },
          "Content": {
            "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.TextContent"
          },
          "CallBackData": {
            "maxLength": 4000,
            "minLength": 0,
            "type": "string",
            "description": "Custom client data that will be included in a Delivery Report"
          }
        }
      },
      "prudentwhatsappstandaloneapiservice.openapi.TextContent": {
        "required": [ "Text" ],
        "type": "object",
        "properties": {
          "Text": {
            "maxLength": 4096,
            "minLength": 1,
            "type": "string",
            "description": "Content of the message being sent."
          },
          "PreviewUrl": {
            "type": "boolean",
            "description": "Allows for URL preview from within the message. If set to `true`, the message content must contain a URL starting with `https://` or `http://`. Defaults to `false`."
          }
        },
        "description": "The content object to build a message that will be sent."
      },
      "prudentwhatsappstandaloneapiservice.openapi.SingleMessageInfo": {
        "type": "object",
        "properties": {
          "Status": {
            "type": "Boolean",
            "description": "One for success and zero for failure"
          },
          "Message": {
            "type": "String",
            "description": "success message."
          }
        }
      },
      "prudentwhatsappstandaloneapiservice.openapi.CreateTemplateResponse": {
        "type": "object",
        "properties": {
          "Status": {
            "type": "Boolean",
            "description": "True for success"
          },
          "Message": {
            "type": "String",
            "description": "success message."
          }
        }
      },
      "prudentwhatsappstandaloneapiservice.openapi.TemplateDataContent": {
        "required": [ "Body" ],
        "type": "object",
        "properties": {
          "Body": {
            "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.TemplateBodyContent"
          },
          "header": {
            "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.TemplateHeaderContent"
          },
          "Buttons": {
            "type": "array",
            "description": "Template buttons. Should be defined in correct order, only if `quick reply` or `dynamic URL` buttons have been registered. It can have up to three `quick reply` buttons or only one `dynamic URL` button.",
            "items": {
              "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.TemplateButtonContent"
            }
          }
        },
        "description": "Template data. Values have to be set as registered in the template."
      },
      "prudentwhatsappstandaloneapiservice.openapi.TemplateBodyContent": {
        "required": [ "PlaceHolders" ],
        "type": "object",
        "properties": {
          "PlaceHolders": {
            "type": "array",
            "description": "Templates parameters values ordered as registered in the template. The value must not be null, but can be an empty array if the template was registered without placeholders. Values within the array must not be null or empty.",
            "items": {
              "type": "string",
              "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.TemplateBodyplaceholderContent"
            }
          }
        },
        "description": "Template body."
      },

      "prudentwhatsappstandaloneapiservice.openapi.TemplateBodyplaceholderContent": {
        "properties": {
          "Type": {
            "type": "string"

          },
          "Text": {
            "type": "string",
            "description": "Value of a placeholder in the text header."
          }
        }
      },
      "prudentwhatsappstandaloneapiservice.openapi.TemplateQuickReplyButtonContent": {
        "required": [ "Parameter" ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.TemplateButtonContent"
          },
          {
            "type": "object",
            "properties": {
              "Parameter": {
                "maxLength": 128,
                "minLength": 1,
                "type": "string",
                "description": "Payload of a `quick reply` button."
              }
            }
          }
        ]
      },
      "prudentwhatsappstandaloneapiservice.openapi.TemplateHeaderContent": {
        "required": [ "Type" ],
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"

          }
        },
        "description": "Template header. Should be defined, only if placeholders or media have been registered in the templates header.",
        "discriminator": {
          "propertyName": "Type",
          "mapping": {
            "text": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.TemplateTextHeaderContent",
            "document": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.TemplateDocumentHeaderContent",
            "image": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.TemplateImageHeaderContent",
            "video": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.TemplateVideoHeaderContent"

          }
        }
      },
      "prudentwhatsappstandaloneapiservice.openapi.TemplateVideoHeaderContent": {
        "required": [ "MediaUrl" ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.TemplateHeaderContent"
          },
          {
            "type": "object",
            "properties": {
              "MediaUrl": {
                "maxLength": 2048,
                "minLength": 1,
                "type": "string",
                "description": "URL of a video sent in the header. It is expected to be a valid URL starting with `https://` or `http://`. Supported video types are `MP4`, `3GPP`. Maximum video size is 16MB."
              }
            }
          }
        ]
      },
      "prudentwhatsappstandaloneapiservice.openapi.TemplateImageHeaderContent": {
        "required": [ "MediaUrl" ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.TemplateHeaderContent"
          },
          {
            "type": "object",
            "properties": {
              "MediaUrl": {
                "maxLength": 2048,
                "minLength": 1,
                "type": "string",
                "description": "URL of an image sent in the header. It is expected to be a valid URL starting with `https://` or `http://`. Supported image types are `JPG`, `JPEG`, `PNG`. Maximum image size is 5MB."
              }
            }
          }
        ]
      },
      "prudentwhatsappstandaloneapiservice.openapi.TemplateDocumentHeaderContent": {
        "required": [ "FileName", "MediaUrl" ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.TemplateHeaderContent"
          },
          {
            "type": "object",
            "properties": {
              "MediaUrl": {
                "maxLength": 2048,
                "minLength": 1,
                "type": "string",
                "description": "URL of a document sent in the header. It is expected to be a valid URL starting with `https://` or `http://`. Supported document type is `PDF`. Maximum document size is 100MB."
              },
              "FileName": {
                "maxLength": 240,
                "minLength": 1,
                "type": "string",
                "description": "FileName of the document."
              }
            }
          }
        ]
      },
      "prudentwhatsappstandaloneapiservice.openapi.TemplateTextHeaderContent": {
        "required": [ "PlaceHolder" ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.TemplateHeaderContent"
          },
          {
            "type": "object",
            "properties": {
              "PlaceHolder": {
                "type": "string",
                "description": "Value of a placeholder in the text header."
              }
            }
          }
        ]
      },
      "prudentwhatsapptemplatemanagement.openapi.TextHeaderApiData": {
        "required": [ "text" ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/prudentwhatsapptemplatemanagement.openapi.HeaderApiData"
          },
          {
            "type": "object",
            "properties": {
              "text": {
                "type": "string",
                "description": "Template header text. Can contain up to 60 characters, with one placeholder {{1}}."
              }
            }
          }
        ]
      },
      "prudentwhatsapptemplatemanagement.openapi.ImageHeaderApiData": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/prudentwhatsapptemplatemanagement.openapi.HeaderApiData"
          }
        ]
      },
      "prudent-ccaas-conversation-service.openapi.TelegramForceReply": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/prudent-ccaas-conversation-service.openapi.TelegramReplyMarkup"
          },
          {
            "type": "object",
            "properties": {
              "selective": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "prudentwhatsapptemplatemanagement.openapi.HeaderApiData": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "format": {
            "type": "string",
            "enum": [ "TEXT", "IMAGE", "VIDEO", "DOCUMENT" ]
          }
        },
        "description": "Template header. Can be `image`, `document`, `video` or `text`.",
        "discriminator": {
          "propertyName": "format",
          "mapping": {
            "TEXT": "#/components/schemas/prudentwhatsapptemplatemanagement.openapi.TextHeaderApiData",
            "IMAGE": "#/components/schemas/prudentwhatsapptemplatemanagement.openapi.ImageHeaderApiData",
            "VIDEO": "#/components/schemas/prudentwhatsapptemplatemanagement.openapi.VideoHeaderApiData",
            "DOCUMENT": "#/components/schemas/prudentwhatsapptemplatemanagement.openapi.DocumentHeaderApiData"
          }
        }
      },

      "prudentwhatsapptemplatemanagement.openapi.PhoneNumberButtonApiData": {
        "required": [ "phone_number", "text" ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/prudentwhatsapptemplatemanagement.openapi.ButtonApiData"
          },
          {
            "type": "object",
            "properties": {
              "phone_number": {
                "type": "string",
                "description": "Phone number to which a phone call would be placed by end-user when hitting the button."
              }
            }
          }
        ]
      },
      "prudentwhatsapptemplatemanagement.openapi.UrlButtonApiData": {
        "required": [ "text", "url" ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/prudentwhatsapptemplatemanagement.openapi.ButtonApiData"
          },
          {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "description": "URL to which the end-user will be directed when hitting the button. URL is expected to start with `https://` or `http://`. Can be static or dynamic. For dynamic URL registration, add a placeholder {{1}} at the end of the link. Example: `https://www.prudent.com/{{1}}`"
              }
            }
          }
        ]
      },
      "prudentwhatsapptemplatemanagement.openapi.QuickReplyButtonApiData": {
        "required": [ "Text" ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/prudentwhatsapptemplatemanagement.openapi.ButtonApiData"
          }
        ]
      },
      "prudentwhatsapptemplatemanagement.openapi.DocumentHeaderApiData": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/prudentwhatsapptemplatemanagement.openapi.HeaderApiData"
          }
        ]
      },
      "prudentwhatsapptemplatemanagement.openapi.VideoHeaderApiData": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/prudentwhatsapptemplatemanagement.openapi.HeaderApiData"
          }
        ]
      },
      "prudentwhatsappstandaloneapiservice.openapi.TemplateUrlButtonContent": {
        "required": [ "Parameter" ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.TemplateButtonContent"
          },
          {
            "type": "object",
            "properties": {
              "Parameter": {
                "type": "string",
                "description": "URL extension of a `dynamic URL` defined in the registered template."
              }
            }
          }
        ]
      },
      "prudentsc.openapi.TokenRequest": {
        "required": [ "client_id", "client_secret", "grant_type" ],
        "type": "object",
        "properties": {
          "client_id": {
            "type": "string",
            "description": "Your unique username, obtained by signup (user creation) on Infobip portal."
          },
          "client_secret": {
            "type": "string",
            "description": "Your password, obtained by signup (user creation) on Infobip portal."
          },
          "grant_type": {
            "type": "string",
            "description": "Grant type as defined by the OAuth framework.",
            "enum": [ "client_credentials" ]
          }
        }
      },
      "prudentsc.openapi.TokenResponse": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string"
          },
          "expires_in": {
            "type": "integer",
            "description": "Expiration in seconds.",
            "format": "int32"
          },
          "error": {
            "type": "string"
          }
        }
      },
      "prudentsc.openapi.ErrorResponse": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string"
          },
          "expires_in": {
            "type": "integer",
            "format": "int32"
          },
          "error": {
            "type": "string"
          }
        }
      },
      "prudentwhatsappstandaloneapiservice.openapi.Credentials": {
        "required": [ "username", "password" ],
        "type": "object",
        "properties": {
          "username": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "username of your account"
          },
          "password": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "password of your account"
          }
        }
      },
      "prudentwhatsappstandaloneapiservice.openapi.dataError": {
        "type": "object",
        "properties": {
          "tokenId": {
            "maxLength": 500,
            "minLength": 1,
            "type": "string",
            "description": "token to send requests"
          },
          "expiresIn": {
            "ExpireIn": 50,
            "minLength": 0,
            "type": "integer",
            "description": "expiry in seconds"
          }
        }
      },
      "prudentwhatsappstandaloneapiservice.openapi.BulkMessage": {
        "required": [ "Messages", "BulkId" ],
        "type": "object",
        "properties": {
          "Messages": {
            "type": "array",
            "description": "An array of messages being sent.",
            "items": {
              "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.FailoverMessage"
            }
          },
          "BulkId": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "The ID that uniquely identifies the request. Bulk ID will be received only when you send a message to more than one destination address."
          }
        }
      },
      "prudentwhatsappstandaloneapiservice.openapi.BulkMessageInfo": {
        "type": "object",
        "properties": {
          "status": {
            "type": "Integer",
            "description": "One indicate success"
          },
          "message": {
            "type": "String",
            "description": "success message."
          }
        }
      },
      "prudentwhatsappstandaloneapiservice.openapi.InteractiveMultiProductMessage": {
        "required": [ "Content", "From", "To", "MessageId" ],
        "type": "object",
        "properties": {
          "From": {
            "maxLength": 24,
            "minLength": 1,
            "type": "string",
            "description": "Registered WhatsApp sender number. Must be in international format and comply with"
          },
          "To": {
            "maxLength": 24,
            "minLength": 1,
            "type": "string",
            "description": "Message recipient number. Must be in international format and comply with WhatsApp requirements."
          },
          "MessageId": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "The ID that uniquely identifies the message sent."
          },
          "Content": {
            "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.InteractiveMultiProductContent"
          },
          "CallBackData": {
            "maxLength": 4000,
            "minLength": 0,
            "type": "string",
            "description": "Custom client data that will be included in a Delivery Report"
          }
        }
      },
      "prudentwhatsappstandaloneapiservice.openapi.SendTemplateMessage": {
        "required": [ "From", "To", "MessageId", "ParameterCount", "Language", "TemplateName", "Param1" ],
        "type": "object",
        "properties": {
          "From": {
            "maxLength": 24,
            "minLength": 1,
            "type": "string",
            "description": "Registered WhatsApp sender number. Must be in international format and comply with"
          },
          "To": {
            "maxLength": 24,
            "minLength": 1,
            "type": "string",
            "description": "Message recipient number. Must be in international format and comply with WhatsApp requirements."
          },
          "MessageId": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "The ID that uniquely identifies the message sent."
          },
          "TemplateName": {
            "type": "string",
            "description": "Template name. Should only contain lowercase alphanumeric characters and underscores."
          },

          "ParameterCount": {
            "type": "number ",
            "description": "Number of messagesparameter required to deliver, Parameter count should be upto 20"

          },
          "language": {
            "type": "string",
            "description": "The code of language or locale to use. Must be the same code used when registering the template."

          },
          "Param": {
            "type": "string",
            "description": "The parameter values ordered as registered in the template. The value must not be null or parameter count should be zero if the template was registered without placeholders. The parameter can be upto 20 example param1,param2, param3 etc. "
          }
        }
      },

      "prudentwhatsapptemplatemanagement.openapi.com.prudent.whatsapp.template.management.api.TemplatePublicApiRequest": {
        "title": "TemplateRequest",
        "required": [ "category", "language", "name", "components" ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 512,
            "minLength": 1,
            "description": "Template name. Must only contain lowercase alphanumeric characters and underscores."
          },
          "language": {
            "type": "string",
            "description": "The language code or locale to use. Multiple templates with different language codes can be registered under the same template name.",
            "enum": [ "af", "sq", "ar", "az", "bn", "bg", "ca", "zh_CN", "zh_HK", "zh_TW", "hr", "cs", "da", "nl", "en", "en_GB", "en_US", "et", "fil", "fi", "fr", "de", "el", "gu", "ha", "he", "hi", "hu", "id", "ga", "it", "ja", "kn", "kk", "ko", "lo", "lv", "lt", "mk", "ms", "ml", "mr", "nb", "fa", "pl", "pt_BR", "pt_PT", "pa", "ro", "ru", "sr", "sk", "sl", "es", "es_AR", "es_ES", "es_MX", "sw", "sv", "ta", "te", "th", "tr", "uk", "ur", "uz", "vi", "unknown" ]
          },
          "category": {
            "type": "string",
            "description": "Category of the template.",
            "enum": [ "ACCOUNT_UPDATE", "PAYMENT_UPDATE", "PERSONAL_FINANCE_UPDATE", "SHIPPING_UPDATE", "RESERVATION_UPDATE", "ISSUE_RESOLUTION", "APPOINTMENT_UPDATE", "TRANSPORTATION_UPDATE", "TICKET_UPDATE", "ALERT_UPDATE", "AUTO_REPLY" ]
          },
          "components": {
            "$ref": "#/components/schemas/prudentwhatsapptemplatemanagement.openapi.TemplateStructureApiData"
          }
        }
      },
      "prudentwhatsapptemplatemanagement.openapi.TemplateStructureApiData": {
        "required": [ "body" ],
        "type": "array",
        "items": {
          "properties": {
            "header": {
              "$ref": "#/components/schemas/prudentwhatsapptemplatemanagement.openapi.HeaderApiData"
            },
            "body": {
              "$ref": "#/components/schemas/prudentwhatsapptemplatemanagement.openapi.BodytypeApiData"

            },
            "footer": {
              "$ref": "#/components/schemas/prudentwhatsapptemplatemanagement.openapi.FooterApiData"

            },
            "buttons": {
              "$ref": "#/components/schemas/prudentwhatsapptemplatemanagement.openapi.ButtontypeApiData"

            },
            "type": {
              "type": "string",
              "readOnly": true,
              "enum": [ "TEXT", "MEDIA", "UNSUPPORTED" ]
            }
          }
        },

        "description": "Template structure."
      },
      "prudentwhatsapptemplatemanagement.openapi.BodytypeApiData": {
        "properties": {
          "type": {
            "type": "string"
          },
          "text": {
            "type": "string",
            "maxLength": 1024,
            "minLength": 1,
            "description": "Template body. Can be registered as plain text or text with placeholders. Placeholders have to be correctly formatted and in the correct order, regardless of other sections. Example: {{1}}, {{2}}, {{3}}...",
            "example": "body {{1}} content"
          },
          "example": {
            "type": "object",
            "$ref": "#/components/schemas/prudentwhatsapptemplatemanagement.openapi.BodyExampleApiData"
          }
        }
      },
      "prudentwhatsapptemplatemanagement.openapi.BodyExampleApiData": {
        "properties": {
          "body_text": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/prudentwhatsapptemplatemanagement.openapi.BodyExampleTextApiData"
            }
          }
        }
      },
      "prudentwhatsapptemplatemanagement.openapi.BodyExampleTextApiData": {
        "properties": {
          "An array of dynamic parameters": {
            "type": "array",
            "description": "Example[{1},{2},{3}...]"
          }
        }
      },
      "prudentwhatsapptemplatemanagement.openapi.ButtontypeApiData": {
        "properties": {
          "type": {
            "type": "string"
          },
          "buttons": {
            "maxItems": 3,
            "minItems": 1,
            "type": "array",
            "description": "Template buttons. Can be either up to 3 `quick reply` buttons or up to 2 `call to action(PHONE_NUMBER,URL)` buttons. Call to action buttons must be unique in type.",
            "items": {
              "$ref": "#/components/schemas/prudentwhatsapptemplatemanagement.openapi.ButtonApiData"
            }
          }
        }
      },
      "prudentwhatsapptemplatemanagement.openapi.FooterApiData": {
        "properties": {
          "type": {
            "type": "string"
          },
          "text": {
            "maxLength": 60,
            "minLength": 0,
            "type": "string",
            "description": "Template footer. Plain text, up to 60 characters.",
            "example": "footer"
          }
        }
      },
      "prudentwhatsapptemplatemanagement.openapi.ButtonApiData": {
        "required": [ "text" ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [ "PHONE_NUMBER", "URL", "QUICK_REPLY" ]
          },
          "text": {
            "maxLength": 25,
            "minLength": 1,
            "type": "string",
            "description": "Button text."
          }
        },
        "description": "Template buttons. Can be either up to 3 `quick reply` buttons or up to 2 `call to action` buttons. Call to action buttons must be unique in type.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "PHONE_NUMBER": "#/components/schemas/prudentwhatsapptemplatemanagement.openapi.PhoneNumberButtonApiData",
            "URL": "#/components/schemas/prudentwhatsapptemplatemanagement.openapi.UrlButtonApiData",
            "QUICK_REPLY": "#/components/schemas/prudentwhatsapptemplatemanagement.openapi.QuickReplyButtonApiData"
          }
        }
      },
      "prudentwhatsappstandaloneapiservice.openapi.DocumentMessage": {
        "required": [ "Content", "From", "To", "MessageId" ],
        "type": "object",
        "properties": {
          "From": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string",
            "description": "Registered WhatsApp sender number. Must be in international format and comply with WhatsApps requirements"
          },
          "To": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string",
            "description": "Message recipient number. Must be in international format and comply with WhatsApp requirements."
          },
          "MessageId": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "The ID that uniquely identifies the message sent."
          },
          "Content": {
            "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.DocumentContent"
          },
          "CallBackData": {
            "maxLength": 4000,
            "minLength": 0,
            "type": "string",
            "description": "Custom client data that will be included in a Delivery Report."
          }
        }
      },
      "prudentwhatsappstandaloneapiservice.openapi.DocumentContent": {
        "required": [ "MediaUrl" ],
        "type": "object",
        "properties": {
          "MediaUrl": {
            "maxLength": 2048,
            "minLength": 1,
            "type": "string",
            "description": "URL of a document sent in a WhatsApp message. Must be a valid URL starting with `https://` or `http://`.Supported document type PDF. Maximum document size is 100MB."
          },
          "Caption": {
            "maxLength": 3000,
            "minLength": 0,
            "type": "string",
            "description": "Caption of the document."
          },
          "FileName": {
            "maxLength": 240,
            "minLength": 0,
            "type": "string",
            "description": "File name of the document."
          }
        },
        "description": "The content object to build a message that will be sent."
      },
      "prudentwhatsappstandaloneapiservice.openapi.ImageMessage": {
        "required": [ "Content", "From", "To", "MessageId" ],
        "type": "object",
        "properties": {
          "From": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string",
            "description": "Registered WhatsApp sender number. Must be in international format and comply with WhatsApps requirements."
          },
          "To": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string",
            "description": "Message recipient number. Must be in international format and comply with WhatsApps requirements."
          },
          "MessageId": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "The ID that uniquely identifies the message sent."
          },
          "Content": {
            "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.ImageContent"
          },
          "CallBackData": {
            "maxLength": 4000,
            "minLength": 0,
            "type": "string",
            "description": "Custom client data that will be included in a Delivery Report"
          }
        }
      },
      "prudentwhatsappstandaloneapiservice.openapi.ImageContent": {
        "required": [ "MediaUrl" ],
        "type": "object",
        "properties": {
          "MediaUrl": {
            "maxLength": 2048,
            "minLength": 1,
            "type": "string",
            "description": "URL of an image sent in a WhatsApp message. Must be a valid URL starting with `https://` or `http://`. Supported image types are `JPG`, `JPEG`, `PNG`. Maximum image size is 5MB."
          },
          "Caption": {
            "maxLength": 3000,
            "minLength": 0,
            "type": "string",
            "description": "Caption of the image."
          }
        },
        "description": "The content object to build a message that will be sent."
      },
      "prudentwhatsappstandaloneapiservice.openapi.AudioMessage": {
        "required": [ "Content", "From", "To", "MessageId" ],
        "type": "object",
        "properties": {
          "From": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string",
            "description": "Registered WhatsApp sender number. Must be in international format and comply with WhatsApp requirements."
          },
          "To": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string",
            "description": "Message recipient number. Must be in international format and comply with WhatsApp requirements."
          },
          "MessageId": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "The ID that uniquely identifies the message sent."
          },
          "Content": {
            "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.AudioContent"
          },
          "CallBackData": {
            "maxLength": 4000,
            "minLength": 0,
            "type": "string",
            "description": "Custom client data that will be included in a Delivery Report."
          }
        }
      },
      "prudentwhatsappstandaloneapiservice.openapi.AudioContent": {
        "required": [ "MediaUrl" ],
        "type": "object",
        "properties": {
          "MediaUrl": {
            "maxLength": 2048,
            "minLength": 1,
            "type": "string",
            "description": "URL of an audio sent in a WhatsApp message. Must be a valid URL starting with `https://` or `http://`. Supported audio types are `AAC`, `AMR`, `MP3`, `MP4`, `OPUS`. Maximum audio size is 16MB."
          }
        },
        "description": "The content object to build a message that will be sent."
      },
      "prudentwhatsappstandaloneapiservice.openapi.VideoMessage": {
        "required": [ "Content", "From", "To", "MessageId" ],
        "type": "object",
        "properties": {
          "From": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string",
            "description": "Registered WhatsApp sender number. Must be in international format and comply with WhatsApps requirements."
          },
          "To": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string",
            "description": "Message recipient number. Must be in international format and comply with WhatsApps requirements."
          },
          "MessageId": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "The ID that uniquely identifies the message sent."
          },
          "Content": {
            "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.VideoContent"
          },
          "CallBackData": {
            "maxLength": 4000,
            "minLength": 0,
            "type": "string",
            "description": "Custom client data that will be included in a Delivery Report."
          }
        }
      },
      "prudentwhatsappstandaloneapiservice.openapi.VideoContent": {
        "required": [ "MediaUrl" ],
        "type": "object",
        "properties": {
          "MediaUrl": {
            "maxLength": 2048,
            "minLength": 1,
            "type": "string",
            "description": "URL of a video sent in a WhatsApp message. Must be a valid URL starting with `https://` or `http://`. Supported video types are `MP4`, `3GPP`. Maximum video size is 16MB."
          },
          "Caption": {
            "maxLength": 3000,
            "minLength": 0,
            "type": "string",
            "description": "Caption of the video."
          }
        },
        "description": "The content object to build a message that will be sent."
      },
      "prudentwhatsappstandaloneapiservice.openapi.StickerMessage": {
        "required": [ "Content", "From", "To", "MessageId" ],
        "type": "object",
        "properties": {
          "From": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string",
            "description": "Registered WhatsApp sender number. Must be in international format and comply with WhatsApps requirements."
          },
          "To": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string",
            "description": "Message recipient number. Must be in international format and comply with WhatsApps requirements."
          },
          "MessageId": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "The ID that uniquely identifies the message sent."
          },
          "Content": {
            "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.StickerContent"
          },
          "CallBackData": {
            "maxLength": 4000,
            "minLength": 0,
            "type": "string",
            "description": "Custom client data that will be included in a Delivery Report."
          }
        }
      },
      "prudentwhatsappstandaloneapiservice.openapi.StickerContent": {
        "required": [ "MediaUrl" ],
        "type": "object",
        "properties": {
          "MediaUrl": {
            "maxLength": 2048,
            "minLength": 1,
            "type": "string",
            "description": "URL of a sticker sent in a WhatsApp message. Must be a valid URL starting with `https://` or `http://`. Supported sticker type is `WebP`. Sticker file should be 512x512 pixels. Maximum sticker size is 100KB."
          }
        },
        "description": "The content object to build a message that will be sent."
      },
      "prudentwhatsappstandaloneapiservice.openapi.LocationMessage": {
        "required": [ "Content", "From", "To", "MessageId" ],
        "type": "object",
        "properties": {
          "From": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string",
            "description": "Registered WhatsApp sender number. Must be in international format and comply with WhatsApps requirements."
          },
          "To": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string",
            "description": "Message recipient number. Must be in international format and comply with WhatsApps requirements."
          },
          "MessageId": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "The ID that uniquely identifies the message sent."
          },
          "Content": {
            "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.LocationContent"
          },
          "CallBackData": {
            "maxLength": 4000,
            "minLength": 0,
            "type": "string",
            "description": "Custom client data that will be included in a Delivery Report."
          }
        }
      },
      "prudentwhatsappstandaloneapiservice.openapi.LocationContent": {
        "required": [ "latitude", "longitude" ],
        "type": "object",
        "properties": {
          "Latitude": {
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "description": "Latitude of a location sent in the WhatsApp message.",
            "format": "double"
          },
          "Longitude": {
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "description": "Longitude of a location sent in the WhatsApp message.",
            "format": "double"
          },
          "Name": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "Location name."
          },
          "Address": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "Location address."
          }
        },
        "description": "The content object to build a message that will be sent."
      },
      "prudentwhatsappstandaloneapiservice.openapi.ContactsMessage": {
        "required": [ "Content", "From", "To", "MessageId" ],
        "type": "object",
        "properties": {
          "From": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string",
            "description": "Registered WhatsApp sender number. Must be in international format and comply with WhatsApps requirements."
          },
          "To": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string",
            "description": "Message recipient number. Must be in international format and comply with WhatsApps requirements."
          },
          "MessageId": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "The ID that uniquely identifies the message sent."
          },
          "Content": {
            "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.ContactsContent"
          },
          "CallBackData": {
            "maxLength": 4000,
            "minLength": 0,
            "type": "string",
            "description": "Custom client data that will be included in a Delivery Report."
          }
        }
      },
      "prudentwhatsappstandaloneapiservice.openapi.ContactsContent": {
        "required": [ "Contacts" ],
        "type": "object",
        "properties": {
          "Contacts": {
            "type": "array",
            "description": "An array of contacts sent in a WhatsApp message.",
            "items": {
              "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.ContactContent"
            }
          }
        },
        "description": "The content object to build a message that will be sent."
      },
      "prudentwhatsappstandaloneapiservice.openapi.ContactContent": {
        "required": [ "Name" ],
        "type": "object",
        "properties": {
          "Addresses": {
            "type": "array",
            "description": "Array of addresses information.",
            "items": {
              "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.AddressContent"
            }
          },
          "Birthday": {
            "type": "string",
            "description": "Date of birth in `YYYY-MM-DD` format."
          },
          "Emails": {
            "type": "array",
            "description": "Array of emails information.",
            "items": {
              "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.EmailContent"
            }
          },
          "Name": {
            "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.NameContent"
          },
          "Org": {
            "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.OrganizationContent"
          },
          "Phones": {
            "type": "array",
            "description": "Array of phones information.",
            "items": {
              "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.PhoneContent"
            }
          },
          "Urls": {
            "type": "array",
            "description": "Array of urls information.",
            "items": {
              "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.UrlContent"
            }
          }
        },
        "description": "An array of contacts sent in a WhatsApp message."
      },
      "prudentwhatsappstandaloneapiservice.openapi.AddressContent": {
        "type": "object",
        "properties": {
          "Street": {
            "type": "string",
            "description": "Street name."
          },
          "City": {
            "type": "string",
            "description": "City name."
          },
          "State": {
            "type": "string",
            "description": "State name."
          },
          "Zip": {
            "type": "string",
            "description": "Zip code value."
          },
          "Country": {
            "type": "string",
            "description": "Country name."
          },
          "CountryCode": {
            "type": "string",
            "description": "Country code value."
          },
          "Type": {
            "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.AddressType"
          }
        },
        "description": "Array of addresses information."
      },
      "prudentwhatsappstandaloneapiservice.openapi.AddressType": {
        "type": "string",
        "description": "Type of the address. Can be `HOME` or `WORK`.",
        "enum": [ "HOME", "WORK" ]
      },
      "prudentwhatsappstandaloneapiservice.openapi.EmailContent": {
        "type": "object",
        "properties": {
          "Email": {
            "type": "string",
            "description": "Contacts email."
          },
          "Type": {
            "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.EmailType"
          }
        },
        "description": "Array of emails information."
      },
      "prudentwhatsappstandaloneapiservice.openapi.EmailType": {
        "type": "string",
        "description": "Type of the email. Can be `HOME` or `WORK`.",
        "enum": [ "HOME", "WORK" ]
      },
      "prudentwhatsappstandaloneapiservice.openapi.NameContent": {
        "required": [ "First_name", "Formatted_name" ],
        "type": "object",
        "properties": {
          "First_name": {
            "type": "string",
            "description": "Contacts first name."
          },
          "Last_name": {
            "type": "string",
            "description": "Contacts last name."
          },
          "Middle_name": {
            "type": "string",
            "description": "Contacts middle name."
          },
          "Suffix": {
            "type": "string",
            "description": "Contacts name suffix."
          },
          "Prefix": {
            "type": "string",
            "description": "Contacts name prefix."
          },
          "Formatted_name": {
            "type": "string",
            "description": "Contacts full name as it normally appears."
          }
        },
        "description": "Contains information about contacts name."
      },
      "prudentwhatsappstandaloneapiservice.openapi.OrganizationContent": {
        "type": "object",
        "properties": {
          "Company": {
            "type": "string",
            "description": "Company name."
          },
          "Department": {
            "type": "string",
            "description": "Department name."
          },
          "Title": {
            "type": "string",
            "description": "Title value."
          }
        },
        "description": "Contains information about contacts company."
      },
      "prudentwhatsappstandaloneapiservice.openapi.PhoneContent": {
        "type": "object",
        "properties": {
          "Phone": {
            "type": "string",
            "description": "Contacts phone number."
          },
          "Type": {
            "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.PhoneType"
          },
          "Wa_id": {
            "type": "string",
            "description": "Contacts WhatsApp ID."
          }
        },
        "description": "Array of phones information."
      },
      "prudentwhatsappstandaloneapiservice.openapi.PhoneType": {
        "type": "string",
        "description": "Type of the phone number. Can be `CELL`, `MAIN`, `IPHONE`, `HOME` or `WORK`.",
        "enum": [ "CELL", "MAIN", "IPHONE", "HOME", "WORK" ]
      },
      "prudentwhatsappstandaloneapiservice.openapi.UrlContent": {
        "type": "object",
        "properties": {
          "Url": {
            "type": "string",
            "description": "Contacts url."
          },
          "Type": {
            "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.UrlType"
          }
        },
        "description": "Array of urls information."
      },
      "prudentwhatsappstandaloneapiservice.openapi.UrlType": {
        "type": "string",
        "description": "Type of the url. Can be `HOME` or `WORK`.",
        "enum": [ "HOME", "WORK" ]
      },
      "prudentwhatsappstandaloneapiservice.openapi.InteractiveButtonsMessage": {
        "required": [ "Content", "From", "To", "MessageId" ],
        "type": "object",
        "properties": {
          "From": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string",
            "description": "Registered WhatsApp sender number. Must be in international format and comply with WhatsApps requirements."
          },
          "To": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string",
            "description": "Message recipient number. Must be in international format and comply with WhatsApps requirements."
          },
          "MessageId": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "The ID that uniquely identifies the message sent."
          },
          "content": {
            "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.InteractiveButtonsContent"
          },
          "CallBackData": {
            "maxLength": 4000,
            "minLength": 0,
            "type": "string",
            "description": "Custom client data that will be included in a Delivery Report"
          }
        }
      },
      "prudentwhatsappstandaloneapiservice.openapi.InteractiveButtonsContent": {
        "required": [ "Action", "Body" ],
        "type": "object",
        "properties": {
          "Body": {
            "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.InteractiveBodyContent"
          },
          "Action": {
            "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.InteractiveButtonsActionContent"
          },
          "Header": {
            "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.InteractiveButtonsHeaderContent"
          },
          "Footer": {
            "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.InteractiveFooterContent"
          }
        },
        "description": "The content object to build a message that will be sent."
      },
      "prudentwhatsappstandaloneapiservice.openapi.InteractiveBodyContent": {
        "required": [ "Text" ],
        "type": "object",
        "properties": {
          "Text": {
            "maxLength": 1024,
            "minLength": 1,
            "type": "string",
            "description": "Content of the message body."
          }
        },
        "description": "Body of a message containing one or more [interactive elements](https://www.prudent.com/docs/whatsapp/message-types#free-form-messages)."
      },
      "prudentwhatsappstandaloneapiservice.openapi.InteractiveButtonsActionContent": {
        "required": [ "Buttons" ],
        "type": "object",
        "properties": {
          "Buttons": {
            "maxItems": 3,
            "minItems": 1,
            "type": "array",
            "description": "An array of buttons sent in a message. It can have up to three buttons.",
            "items": {
              "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.InteractiveButtonContent"
            }
          }
        },
        "description": "Allows you to specify buttons sent in the message."
      },
      "prudentwhatsappstandaloneapiservice.openapi.InteractiveButtonContent": {
        "required": [ "Type" ],
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          },
          "Reply": {
            "type": "object",
            "items": {
              "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.InteractiveButtonContent"
            }
          }
        },
        "description": "An array of buttons sent in a message. It can have up to three buttons.",
        "discriminator": {
          "propertyName": "Type",
          "mapping": {
            "reply": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.InteractiveReplyButtonContent"
          }
        }
      },
      "prudentwhatsappstandaloneapiservice.openapi.InteractiveReplyButtonContent": {
        "required": [ "Id", "Title" ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.InteractiveButtonContent"
          },
          {
            "type": "object",
            "properties": {
              "Id": {
                "maxLength": 256,
                "minLength": 1,
                "type": "string",
                "description": "Unique identifier of the button."
              },
              "Title": {
                "maxLength": 20,
                "minLength": 1,
                "type": "string",
                "description": "Unique title of the button. Does not allow emojis or markdown."
              }
            }
          }
        ]
      },
      "prudentwhatsappstandaloneapiservice.openapi.InteractiveButtonsHeaderContent": {
        "required": [ "Type" ],
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          }
        },
        "description": "Header of a message containing one or more interactive elements.",
        "discriminator": {
          "propertyName": "Type",
          "mapping": {
            "text": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.InteractiveButtonsTextHeaderContent",
            "video": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.InteractiveButtonsVideoHeaderContent",
            "image": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.InteractiveButtonsImageHeaderContent",
            "document": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.InteractiveButtonsDocumentHeaderContent"
          }
        }
      },
      "prudentwhatsappstandaloneapiservice.openapi.InteractiveButtonsTextHeaderContent": {
        "required": [ "Text" ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.InteractiveButtonsHeaderContent"
          },
          {
            "type": "object",
            "properties": {
              "Text": {
                "maxLength": 60,
                "minLength": 1,
                "type": "string",
                "description": "Content of the header used when creating interactive buttons(https://www.prudent.com/docs/whatsapp/message-types#interactive-buttons-free-form-messages)."
              }
            }
          }
        ]
      },
      "prudentwhatsappstandaloneapiservice.openapi.InteractiveButtonsVideoHeaderContent": {
        "required": [ "MediaUrl" ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.InteractiveButtonsHeaderContent"
          },
          {
            "type": "object",
            "properties": {
              "MediaUrl": {
                "maxLength": 2048,
                "minLength": 1,
                "type": "string",
                "description": "URL of a video sent in the header of a message containing one or more interactive buttons. Must be a valid URL starting with `https://` or `http://`. Supported video types are `MP4`, `3GPP`. Maximum video size is 16MB."
              }
            }
          }
        ]
      },
      "prudentwhatsappstandaloneapiservice.openapi.InteractiveButtonsImageHeaderContent": {
        "required": [ "MediaUrl" ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.InteractiveButtonsHeaderContent"
          },
          {
            "type": "object",
            "properties": {
              "MediaUrl": {
                "maxLength": 2048,
                "minLength": 1,
                "type": "string",
                "description": "URL of an image sent in the header of a message containing one or more [interactive buttons]. Must be a valid URL starting with `https://` or `http://`. Supported image types are `JPG`, `JPEG`, `PNG`. Maximum image size is 5MB."
              }
            }
          }
        ]
      },
      "prudentwhatsappstandaloneapiservice.openapi.InteractiveButtonsDocumentHeaderContent": {
        "required": [ "MediaUrl" ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.InteractiveButtonsHeaderContent"
          },
          {
            "type": "object",
            "properties": {
              "MediaUrl": {
                "maxLength": 2048,
                "minLength": 1,
                "type": "string",
                "description": "URL of a document sent in the header of a message containing one or more interactive buttons. Must be a valid URL starting with `https://` or `http://`. Supported document type is `PDF`. Maximum document size is 100MB."
              },
              "FileName": {
                "maxLength": 240,
                "minLength": 0,
                "type": "string",
                "description": "FileName of the document."
              }
            }
          }
        ]
      },
      "prudentwhatsappstandaloneapiservice.openapi.InteractiveFooterContent": {
        "required": [ "Text" ],
        "type": "object",
        "properties": {
          "Text": {
            "maxLength": 60,
            "minLength": 1,
            "type": "string",
            "description": "Content of the message footer."
          }
        },
        "description": "Footer of a message containing one or more interactive elements."
      },
      "prudentwhatsappstandaloneapiservice.openapi.InteractiveListMessage": {
        "required": [ "Content", "From", "To", "MessageId" ],
        "type": "object",
        "properties": {
          "From": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string",
            "description": "Registered WhatsApp sender number. Must be in international format and comply with WhatsApps requirements"
          },
          "To": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string",
            "description": "Message recipient number. Must be in international format and comply with WhatsApp requirements."
          },
          "MessageId": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "The ID that uniquely identifies the message sent."
          },
          "Content": {
            "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.InteractiveListContent"
          },
          "CallBackData": {
            "maxLength": 4000,
            "minLength": 0,
            "type": "string",
            "description": "Custom client data that will be included in a Delivery Report"
          }
        }
      },
      "prudentwhatsappstandaloneapiservice.openapi.InteractiveListContent": {
        "required": [ "Action", "Body" ],
        "type": "object",
        "properties": {
          "Body": {
            "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.InteractiveBodyContent"
          },
          "Action": {
            "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.InteractiveListActionContent"
          },
          "Header": {
            "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.InteractiveListHeaderContent"
          },
          "Footer": {
            "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.InteractiveFooterContent"
          }
        },
        "description": "The content object to build a message that will be sent."
      },
      "prudentwhatsappstandaloneapiservice.openapi.InteractiveListActionContent": {
        "required": [ "Button", "Sections", "Title" ],
        "type": "object",
        "properties": {
          "Button": {
            "maxLength": 20,
            "minLength": 1,
            "type": "string"
          },
          "Sections": {
            "maxItems": 10,
            "minItems": 1,
            "type": "array",
            "description": "Array of sections in the list.",
            "items": {
              "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.InteractiveListSectionContent"
            }
          }
        },
        "description": "Allows you to specify the title of the list and its sections. Each section can have a title and multiple rows to select."
      },
      "prudentwhatsappstandaloneapiservice.openapi.InteractiveListHeaderContent": {
        "required": [ "Type" ],
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          }
        },
        "description": "Header of a message containing one or more [interactive elements](https://www.prudent.com/docs/whatsapp/message-types#free-form-messages).",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "TEXT": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.InteractiveListTextHeaderContent"
          }
        }
      },
      "prudentwhatsappstandaloneapiservice.openapi.InteractiveListTextHeaderContent": {
        "required": [ "Text" ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.InteractiveListHeaderContent"
          },
          {
            "type": "object",
            "properties": {
              "Text": {
                "maxLength": 60,
                "minLength": 1,
                "type": "string",
                "description": "Content of the header used when creating an [interactive list](https://www.prudent.com/docs/whatsapp/message-types#interactive-lists-free-form-messages)."
              }
            }
          }
        ]
      },
      "prudentwhatsappstandaloneapiservice.openapi.InteractiveListSectionContent": {
        "required": [ "Rows" ],
        "type": "object",
        "properties": {
          "Title": {
            "maxLength": 24,
            "minLength": 1,
            "type": "string",
            "description": "Title of the section."
          },
          "Rows": {
            "type": "array",
            "description": "An array of rows sent within a section. Section must contain at least one row. Message can have up to ten rows.",
            "items": {
              "$ref": "#/components/schemas/prudentwhatsappstandaloneapiservice.openapi.InteractiveRowContent"
            }
          }
        },
        "description": "Array of sections in the list."
      },
      "prudentwhatsappstandaloneapiservice.openapi.InteractiveRowContent": {
        "required": [ "Id", "Title" ],
        "type": "object",
        "properties": {
          "Id": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "Identifier of the row. It must be unique across all sections."
          },
          "Title": {
            "maxLength": 24,
            "minLength": 1,
            "type": "string",
            "description": "Title of the row."
          },
          "Description": {
            "maxLength": 72,
            "minLength": 0,
            "type": "string",
            "description": "Description of the row."
          }
        },
        "description": "An array of rows sent within a section. Section must contain at least one row. Message can have up to ten rows."
      },
      "infobippushko.openapi.ott.SeenReport": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "description": "Collection of reports, one per every message.",
            "readOnly": false,
            "writeOnly": true,
            "items": {
              "$ref": "#/components/schemas/infobippushko.openapi.whatsapp.SeenDeletedBase"
            }
          }
        }
      },

      "infobippushko.openapi.whatsapp.SeenDeletedBase": {
        "type": "object",
        "properties": {
          "MessageId": {
            "type": "string",
            "description": "The ID of the sent message.",
            "readOnly": false,
            "writeOnly": true
          },
          "From": {
            "type": "string",
            "description": "Number which sent the message.",
            "readOnly": false,
            "writeOnly": true
          },
          "To": {
            "type": "string",
            "description": "Registered WhatsApp business number.",
            "readOnly": false,
            "writeOnly": true
          },
          "SentAt": {
            "type": "string",
            "description": "Tells when the message was sent.",
            "format": "date-time",
            "readOnly": false,
            "writeOnly": true
          },
          "SeenAt": {
            "type": "string",
            "description": "Tells when the message was seen.",
            "format": "date-time",
            "readOnly": false,
            "writeOnly": true
          }
        }
      }
    },
    "responses": {},
    "parameters": {},
    "examples": {},
    "requestBodies": {
      "prudent-iot-siman-service.iot.openapi.MakeOrderRequestBodyV3": {
        "content": {
          "application/json": {
            "schema": {
              "required": [ "country", "mobileGeneration", "quantity", "shippingAddress", "size", "useCase" ],
              "type": "object",
              "properties": {
                "quantity": {
                  "type": "integer",
                  "description": "Quantity of the ordered SIM cards. Whole positive number which is defining number of devices/sim cards needed;",
                  "example": 100
                },
                "country": {
                  "type": "string",
                  "description": "The country in which the SIM cards will be used.",
                  "example": "United States of America"
                },
                "useCase": {
                  "$ref": "#/components/schemas/prudent-iot-siman-service.iot.openapi.UseCase"
                },
                "size": {
                  "$ref": "#/components/schemas/prudent-iot-siman-service.iot.openapi.ModelSize"
                },
                "mobileGeneration": {
                  "$ref": "#/components/schemas/prudent-iot-siman-service.iot.openapi.MobileGeneration"
                },
                "shippingAddress": {
                  "$ref": "#/components/schemas/prudent-iot-siman-service.iot.openapi.AddressV3"
                },
                "trialOrder": {
                  "type": "boolean",
                  "description": "Shows if ordered sims should be trial or not",
                  "example": true
                }
              }
            }
          }
        },
        "required": true
      },
      "prudent-iot-siman-service.iot.openapi.UpdateSimCardNameRequestBody": {
        "content": {
          "application/json": {
            "schema": {
              "required": [ "simName" ],
              "type": "object",
              "properties": {
                "simName": {
                  "type": "string",
                  "description": "User defined SIM name",
                  "example": "Infobip SIM card"
                }
              }
            }
          }
        },
        "required": true
      },
      "prudent-iot-siman-service.iot.openapi.UpdateSimAlertRequestBody": {
        "content": {
          "application/json": {
            "schema": {
              "required": [ "limit" ],
              "type": "object",
              "properties": {
                "limit": {
                  "type": "integer",
                  "description": "Alerting limit notification of specific SIM Card.",
                  "example": 500
                }
              }
            }
          }
        },
        "required": true
      },
      "prudent-iot-siman-service.iot.openapi.UpdateSimCardOrderStatusRequestBody": {
        "content": {
          "application/json": {
            "schema": {
              "required": [ "status" ],
              "type": "object",
              "properties": {
                "status": {
                  "$ref": "#/components/schemas/prudent-iot-siman-service.iot.openapi.OrderStatus"
                }
              }
            }
          }
        },
        "required": true
      },
      "prudent-iot-siman-service.iot.openapi.UpdateSimCardOrderRequestBody": {
        "content": {
          "application/json": {
            "schema": {
              "required": [ "country", "mobileGeneration", "quantity", "shippingAddress", "size", "useCase" ],
              "type": "object",
              "properties": {
                "quantity": {
                  "type": "integer",
                  "description": "Quantity of the ordered SIM cards. Whole positive number which is defining number of devices/sim cards needed;",
                  "example": 100
                },
                "country": {
                  "type": "string",
                  "description": "The country in which the SIM cards will be used.",
                  "example": "United States of America"
                },
                "useCase": {
                  "$ref": "#/components/schemas/prudent-iot-siman-service.iot.openapi.UseCase"
                },
                "size": {
                  "$ref": "#/components/schemas/prudent-iot-siman-service.iot.openapi.ModelSize"
                },
                "mobileGeneration": {
                  "$ref": "#/components/schemas/prudent-iot-siman-service.iot.openapi.MobileGeneration"
                },
                "shippingAddress": {
                  "$ref": "#/components/schemas/prudent-iot-siman-service.iot.openapi.Address"
                }
              }
            }
          }
        },
        "required": true
      },
      "prudent-iot-siman-service.iot.openapi.UpdateDudRequestBody": {
        "content": {
          "application/json": {
            "schema": {
              "required": [ "usageAnomalyDetection" ],
              "type": "object",
              "properties": {
                "usageAnomalyDetection": {
                  "type": "boolean",
                  "description": "true if you want device usage anomaly detection to be active, false otherwise",
                  "example": true
                }
              }
            }
          }
        },
        "required": true
      },
      "prudent-iot-siman-service.iot.openapi.EmailRequestBody": {
        "content": {
          "application/json": {
            "schema": {
              "required": [ "email" ],
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "description": "email address on which you want to receive alert notifications.",
                  "example": "iot_alerts@company.com"
                }
              }
            }
          }
        },
        "required": true
      },
      "prudent-iot-siman-service.iot.openapi.CreateSimAlertRequestBody": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/prudent-iot-siman-service.iot.openapi.CreateSimAlertRequest"
            }
          }
        },
        "required": true
      },
      "prudent-iot-siman-service.iot.openapi.UpdateOfflineDevicesDetectionRequest": {
        "content": {
          "application/json": {
            "schema": {
              "required": [ "offlineDevicesDetection" ],
              "type": "object",
              "properties": {
                "offlineDevicesDetection": {
                  "type": "boolean",
                  "description": "true if you want alert functionality for IoT devices offline detection",
                  "example": true
                }
              }
            }
          }
        },
        "required": true
      },
      "prudent-iot-siman-service.iot.openapi.UpdateImeiChangeRequest": {
        "content": {
          "application/json": {
            "schema": {
              "required": [ "imeiChangeDetection" ],
              "type": "object",
              "properties": {
                "imeiChangeDetection": {
                  "type": "boolean",
                  "description": "true if you want alert functionality for IoT device IMEI change",
                  "example": true
                }
              }
            }
          }
        },
        "required": true
      },
      "prudent-iot-siman-service.iot.openapi.UpdateSimCardStatusRequestBody": {
        "content": {
          "application/json": {
            "schema": {
              "required": [ "status" ],
              "type": "object",
              "properties": {
                "status": {
                  "$ref": "#/components/schemas/prudent-iot-siman-service.iot.openapi.SimStatus"
                }
              }
            }
          }
        },
        "required": true
      }
    }

  },
  "x-tagGroups": [
    {
      "name": "SMS Service APIs",
      "category": "SMS",
      "summary": "Summary on X-tagGroups",
      "description": "With 2 billion users, SMS is the most used application worldwide. It enables you to reach more customers, sharing important and timely notifications, as well as provide real-time customer support.Send and manage messages over SMS Business Solution",
      "tags": [ "Authentication API", "Send Whatsapp Message", "Customer APIs", "Receive Whatsapp Message" ]
    }
  ],
  "x-categories": [
    {
      "name": "PLATFORM & CONNECTIVITY",
      "summary": "Numbers, Number lookup, IoT, Mobile identity and more...",
      "description": "Powerful infrastructure that connects you to the world."
    },
    {
      "name": "CHANNELS",
      "summary": "SMS as communication channel...",
      "description": "Create a perfect customer experience by using the channels your customer already use and love."
    }
  ]
}
